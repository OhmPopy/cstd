#ifndef _SOCK_H_
#define _SOCK_H_

#include "../slgdev.h"
struct CSockBase
{
    addr_in addr;
    SOCKET m_sSock;
    SOCK_ADDRESS m_Addr;
    BOOL m_bCalTimeOut;
    VideoPro* m_Pro;
    BOOL m_srv;
    void* m_pSsl;
};

typedef enum
{
    NET_NONE = 0x00,
    NET_OVERLAPPED,
    NET_SELECTED
} NET_MODEL;

#define ANYIP(af) (AF_INET6==(af)) ? "::0" : "0.0.0.0"
#define MEMRESERVER_SIZE (256*1024)
#define MEMRESERVER_UNIT (8 *1024)

////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_InitSock
//功能 初始化sock库
//参数
//返回
//说明 此接口用于初始化客户端并设定预留内存大小，此大小用于申请的内存池
// 库默认大小为192KB，在数据接受过程中将会使用此内存池
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_InitSock(NET_MODEL NetModel, unsigned int uMemPoolSize = MEMRESERVER_SIZE, unsigned int uMemPoolUnit = MEMRESERVER_UNIT);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_UnInitSock
//功能 反初始化sock库
//参数
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_UnInitSock();
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_SetListenCallBack
//功能 服务器网络侦听回调设置
//参数 lpfnListen 回调函数指针
// pvContext 回调函数上下文
//返回
//说明 当侦听到有客户端连接时回调给外部
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_SetListenCallBack(ListenCallBack lpfnListen, void* pvContext);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_SetDataRecvCallBack
//功能 数据接受回调
//参数 lpfnRecv 回调函数指针
// pvContext 回调函数上下文
//返回
//说明 当接受到客户端发送过来的数据时回调给外部(TCP)
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_SetDataRecvCallBack(DataRecvCallBack lpfnRecv, void* pvContext) ;
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_SetDataRecvFromCallBack
//功能 数据接受回调
//参数 lpfnRecv 回调函数指针
// pvContext 回调函数上下文
//返回
//说明 当接受到网络对方发送过来的数据时回调给外部(UDP)
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_SetDataRecvFromCallBack(DataRecvFromCallBack lpfnRecv, void* pvContext) ;
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_StartWork
//功能 启动套接字数据处理工作流
//参数 bStartUp 启动与否
//返回
//说明 当接受到客户端发送过来的数据时回调给外部
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_StartWork(BOOL bStartUp);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_CreateSock
//功能 创建套接字
//参数 af 指明了协议族/域，通常 AF_INET (ipv4) AF_INET6 (ipv6) AF_LOCAL AF_UNSPEC 等；
//参数 nSOCKType 套接字类型（字节流或数据报）
//返回 套接字句柄
//说明
////////////////////////////////////////////////////////////////////////////////////////
SOCKET SLGDEV_CALL SLG_CreateSock(int af, int nSOCKType); //创建套接字
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_ReleaseSock
//功能 释放套接字
//参数 hSOCK 套接字句柄
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_ReleaseSock(SOCKET hSOCK, CSockBase* user); //释放套接字
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_Bind
//功能 绑定帧听端口
//参数 hSOCK 套接字句柄
// Addr 侦听地址
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_Bind(SOCKET hSOCK, const addr_in* addr);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_Connect
//功能 连接某个地址
//参数 hSOCK 套接字句柄
// Addr 服务地址
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_Connect(SOCKET hSOCK, const addr_in* addr);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_AddInIPGroup
//功能 加入多播组
//参数 hSOCK 套接字句柄
// GroupIPAddr 组播地址
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_AddInIPGroup(SOCKET hSOCK, const addr_in* addr);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_DropOutIPGroup
//功能 退出多播组
//参数 hSOCK 套接字句柄
// GroupIPAddr 组播地址
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_DropOutIPGroup(SOCKET hSOCK, const addr_in* GroupIPAddr);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_Listen
//功能 启动帧听
//参数 hSOCK 套接字句柄
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_Listen(SOCKET hSOCK, CSockBase* user);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_SetSendBufSize
//功能 设置发送缓冲大小
//参数 hSOCK 套接字句柄
// nSize 缓冲大小
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_SetSendBufSize(SOCKET hSOCK, int nSize);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_SetRecvBufSize
//功能 设置接受缓冲大小
//参数 hSOCK 套接字句柄
// nSize 缓冲大小
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_SetRecvBufSize(SOCKET hSOCK, int nSize);
////////////////////////////////////////////////////////////////////////////////////////
//函数名??SLG_Send
//功能 发送数据
//参数 hSOCK 套接字句柄
// pbData 数据内存
// lpLen 数据内存大小
//返回
//说明 TCP协议发送数据
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_Send(SOCKET hSOCK, const char* pbData, int* lpLen);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_SendTo
//功能 发送数据
//参数 hSOCK 套接字句柄
// addr 目的地址
// pbData 数据内存
// lpLen 数据内存大小
//返回
//说明 UDP发送数据
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_SendTo(SOCKET hSOCK, const addr_in* addr, const char* pbData, int* lpLen);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_Recv
//功能 数据接受
//参数 hSOCK 套接字句柄, type (0不加密，1加密服务器端, 2加密客户端)
//返回
//说明 调用此接口后，当hSOCK有数据来时会以回调方式通知给外部
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_Recv(SOCKET hSOCK, CSockBase* user); //数据接受，调用此接口后，当psock有数据来时会以回调方式通知给外部
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_GetPeerAddr
//功能 获取对等方地址
//参数 hSOCK 套接字句柄
//返回 pAddr 对等方地址
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_GetPeerAddr(SOCKET hSOCK, addr_in* pAddr);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_GetLocalIP
//功能 获取本地IP
//参数 hSOCK 套接字句柄
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_GetLocalIP(const addr_in* addr, int port, addr_in* pAddr);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_GetSockName
//功能 获取本地IP
//参数 hSOCK 套接字句柄
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
BOOL SLGDEV_CALL SLG_GetSockName(SOCKET hSOCK, addr_in* pAddr);
////////////////////////////////////////////////////////////////////////////////////////
//函数名称 SLG_GetLastError
//功能 获取网络错误
//参数
//返回
//说明
////////////////////////////////////////////////////////////////////////////////////////
int SLGDEV_CALL SLG_GetLastError(); //获取网络错误

#endif // _SOCK_H_
