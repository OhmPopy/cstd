// 加密位算法
/*
45D412345678A1A33822
45 开始位
D4 指令位
12 栋号
34 单元号
56 楼层号
78 室号
A1 汉字内码高位
A3 汉字内码地位
38 加密及校验位
22 结束位
指令的说明：
D4  告诉信息板将有信息发送
D3  接收中的数据流
D7  清除指定的信息板，数据
加密位的算法：
MOV A,#45H
ADD A,#D4H
ADD A,#12H
ADD A,#34H
ADD A,#56H
ADD A,#78H
ADD A,#A1H
ADD A,#A3H
CLR     C
ANL A,#0FH
SUBB A,#0AH
JNC   BIN_ASCII1
ADD     A,#3AH
RET                 加密返回数据在A中
BIN_ASCII1:
ADD     A,#41H
RET                 加密返回数据在A中
*/
int get_sp(const uchar* x)
{
  uchar A = *x++;
  A += *x++;
  A += *x++;
  A += *x++;
  A += *x++;
  A += *x++;
  A += *x++;
  A += *x++;
  A = ~A; //cpl a
  ++A;//inc a
  A = (A >> 4) | (A << 4); //SWAP a
  A &= 0x0f; //anl a, #0fH
  A = (A >= 0x0a) ? (A - 0x0a + 0x41) : (A - 0x0a + 0x3A);
  return A;
}
int test_get_sp()
{
  const char* sdata[] = {
    "45D412345678A1A33822",
    "45D400000000A1A34122",  //注意：发送此条帧好延时1秒，再发送以下数据流
    "45D300000000A1A34122",  //每条间隔1ms
    "45D300000000C4EE3322",
    "45D300000000CBBC3622",
    "45D300000000B5C43622",
    "45D300000000C9EE3322",
    "45D300000000C9EE3322",
    "45D300000000BCB03722",
    "45D300000000B8A33822",
    "45D300000000D7A33622",
    "45D300000000B5C43622",
    "45D300000000D6BF3522",
    "45D300000000D5E63222",
    "45D300000000CED23422",
    "45D300000000C4E33422",
    "45D300000000B8F83322",
    "45D300000000A3AC3922",
    "45D300000000C0EF3322",
    "45D300000000BDDA3522",
    "45D300000000BCBE3622",
    "45D300000000B5C43622",
    "45D300000000DCB03522",
    "45D300000000CEC23522",
    "45D300000000C2FA3222",
    "45D300000000B3E43522",
    "45D300000000D5E23322",
    "45D300000000D4DA3322",
    //发送指定的单元（1234）在这充满温馨的季节里，给你我真挚的祝福及深深的思念。
    "45D412340000A1A33522",
    "45D312340000A1A33522",
    "45D312340000C4EE4622",
    "45D312340000CBBC3122",
    "45D312340000B5C43222",
    "45D312340000C9EE4522",
    "45D312340000C9EE4522",
    "45D312340000BCB03322",
    "45D312340000B8A33422",
    "45D312340000D7A33222",
    "45D312340000B5C43222",
    "45D312340000D6BF3022",
    "45D312340000D5E64522",
    "45D312340000CED23022",
    "45D312340000C4E34622",
    "45D312340000B8F84622",
    "45D312340000A3AC3522",
    "45D312340000C0EF4622",
    "45D312340000BDDA3022",
    "45D312340000BCBE3222",
    "45D312340000B5C43222",
    "45D312340000DCB03122",
    //发送指定的主机和分机（1234-5678）在这充满温馨的季节里，给你我真挚的祝福及深深的思念。
    "45D412345678A1A33822",
    "45D312345678A1A33922",
    "45D312345678C4EE3222",
    "45D312345678CBBC3422",
    "45D312345678B5C43522",
    "45D312345678C9EE3122",
    "45D312345678C9EE3122",
    "45D312345678BCB03622",
    "45D312345678B8A33722",
    "45D312345678D7A33522",
    "45D312345678B5C43522",
    "45D312345678D6BF3322",
    "45D312345678D5E63122",
    "45D312345678CED23322",
    "45D312345678C4E33222",
    "45D312345678B8F83222",
    "45D312345678A3AC3822",
    "45D312345678C0EF3222",
    "45D312345678BDDA3322",
    "45D312345678BCBE3522",
    "45D312345678B5C43522",
    "45D312345678DCB03422",
    "45D312345678CEC23422",
    "45D312345678C2FA3122",
    "45D312345678B3E43322",
    "45D312345678D5E23122",
    "45D312345678D4DA3222",
    "45D312340000CEC23122",
    "45D312340000C2FA4522",
    "45D312340000B3E43022",
    "45D312340000D5E24522",
    "45D312340000D4DA4622",
  };
  enum {nn = sizeof(sdata) / sizeof(sdata[0])};
  uchar map[128] = {0};
  int i, j;
  for (i = 0; i < 10; ++i) {
    map['0' + i] = i;
  }
  for (i = 0; i < 6; ++i) {
    map['a' + i] = map['A' + i] = i + 10;
  }
  for (i = 0; i < nn; ++i) {
    //uchar* ud = udata + i*10;
    uchar ud[10] = {0};
    const char* sd = sdata[i];
    uchar A = 0;
    for (j = 0; sd[j]; j += 2) {
      ud[j / 2] = (map[sd[j]] << 4) | (map[sd[j + 1]]);
    }
    A = get_sp(ud);
    ASSERT(A == ud[8] && "错误!");
  }
  return 0;
}

