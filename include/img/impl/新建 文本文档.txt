
  if (1 == cn) {
    int x;

    switch (bpp) {

    case 24: {
      const Color24* A0 = (const Color24*)A;

      for (x = 0; x < w; ++x) {
        B[x] = GREYSCALIZE(A0[x].r, A0[x].g, A0[x].b);
      }

      return 0;
    }

    case 18: {
      const Color16_666* A0 = (const Color16_666*)A;

      for (x = 0; x < w; ++x) {
        B[x] = GREYSCALIZE(A0[x].r << 2, A0[x].g << 2, A0[x].b << 2);
      }

      return 0;
    }

    case 16: {
      const Color16_565* A0 = (const Color16_565*)A;

      for (x = 0; x < w; ++x) {
        B[x] = GREYSCALIZE(A0[x].r << 3, A0[x].g << 2, A0[x].b << 3);
      }

      return 0;
    }

    case 15: {
      const Color16_555* A0 = (const Color16_555*)A;

      for (x = 0; x < w; ++x) {
        B[x] = GREYSCALIZE(A0[x].r << 3, A0[x].g << 3, A0[x].b << 3);
      }

      return 0;
    }

    case 12: {
      const Color16_444* A0 = (const Color16_444*)A;

      for (x = 0; x < w; ++x) {
        B[x] = GREYSCALIZE(A0[x].r << 4, A0[x].g << 4, A0[x].b << 4);
      }

      return 0;
    }

    case  8: {
      const uint8* A0 = (const uint8*)A;
      assert(colorTable != 0);

      for (x = 0; x < w; ++x) {
        B[x] = colorTable[A0[x]];
      }

      return 0;
    }

    case  4: {
      const uint8* A0 = (const uint8*)A;
      assert(colorTable != 0);

      for (x = 0; x < (w >> 1); ++x) {
        unsigned int tmpByte = A0[x];
        B[0] = colorTable[tmpByte >> 4];
        B[1] = colorTable[tmpByte & 0xF];
        B = &B[2];
      }

      if ((w & 1) != 0) {
        unsigned int tmpByte = A0[w >> 1]; // is safe
        B[0] = colorTable[tmpByte >> 4];
      }

      return 0;
    }

    case  1: {
      int borderWidth;
      const uint8* A0 = (const uint8*)A;
      assert(colorTable != 0);

      for (x = 0; x < (w >> 3); ++x) {
        unsigned int tmpByte = A0[x];
        B[0] = colorTable[ tmpByte >> 7];
        B[1] = colorTable[(tmpByte >> 6) & 1];
        B[2] = colorTable[(tmpByte >> 5) & 1];
        B[3] = colorTable[(tmpByte >> 4) & 1];
        B[4] = colorTable[(tmpByte >> 3) & 1];
        B[5] = colorTable[(tmpByte >> 2) & 1];
        B[6] = colorTable[(tmpByte >> 1) & 1];
        B[7] = colorTable[tmpByte & 1];

        B = &B[8];
      }

      borderWidth = w & 7;

      if (borderWidth > 0) {
        unsigned int tmpByte = A0[w >> 3]; // is safe

        for (x = 0; x < borderWidth; ++x) {
          B[x] = colorTable[(tmpByte >> (7 - x)) & 1];
        }
      }

      return 0;
    }
    }

    assert(0);
    return 0;
  }
  else {
    Color32* colorTable = (Color32*)clrtab;

    switch (bpp) {
    case  8: {
      const uint8* A0 = (const uint8*)A;
      assert(colorTable != 0);

      for (x = 0; x < w; ++x) {
        B0[x] = colorTable[A0[x]];
      }

      return 0;
    }

    case  4: {
      const uchar* A0 = (const uint8*)A;
      assert(colorTable != 0);

      for (x = 0; x < (w >> 1); ++x, B0 += 2) {
        uchar tmpByte = A0[x];
        B0[0] = colorTable[tmpByte >> 4];
        B0[1] = colorTable[tmpByte & 0xF];
      }

      if ((w & 1) != 0) {
        uchar tmpByte = A0[w >> 1]; // is safe
        B0[0] = colorTable[tmpByte >> 4];
      }

      return 0;
    }

    case  1: {
      int borderWidth;
      const uint8* A0 = (const uint8*)A;
      assert(colorTable != 0);

      for (x = 0; x < (w >> 3); ++x, B0 += 8) {
        uchar tmpByte = A0[x];
        B0[0] = colorTable[(tmpByte >> 7)];
        B0[1] = colorTable[(tmpByte >> 6) & 1];
        B0[2] = colorTable[(tmpByte >> 5) & 1];
        B0[3] = colorTable[(tmpByte >> 4) & 1];
        B0[4] = colorTable[(tmpByte >> 3) & 1];
        B0[5] = colorTable[(tmpByte >> 2) & 1];
        B0[6] = colorTable[(tmpByte >> 1) & 1];
        B0[7] = colorTable[tmpByte & 1];
      }

      borderWidth = w & 7;

      if (borderWidth > 0) {
        unsigned int tmpByte = A0[w >> 3]; // is safe

        for (x = 0; x < borderWidth; ++x) {
          B0[x] = colorTable[(tmpByte >> (7 - x)) & 1];
        }
      }

      return 0;
    }
    }
  }