
#undef DPATH_BEG
#undef DPATH_VEC
#undef DPATH_END

typedef struct {
  ImVec2* _Path;
  int _Path_Size;
  bool closed;
} path_t;

/////////////////////////////////////////////////////////////////////////////////////////////////
#define PATH_BEG(n) { ImVec2* _Path_0 = (ImVec2*)myAllocPush(g->_Path, g->_Path_Size, n), *_Path_1 = _Path_0+n;
#define PATH_VEC(pt) (*_Path_0++ = pt)
#define PATH_END() ASSERT(_Path_0==_Path_1); }

void pathClear(path_t* g)
{
  g->_Path_Size = 0;
  g->closed = false;
}
void pathFree(path_t* g)
{
  myFree(g->_Path, g->_Path_Size);
  g->closed = false;
}
void pathLineTo(path_t* g, ImVec2 a)
{
  if (g->_Path_Size > 0) {
    ImVec2* p = g->_Path + g->_Path_Size - 1;
    if (a.x == p->x && a.y == p->y) {
      return ;
    }
  }
  PATH_BEG(1);
  PATH_VEC(a);
  PATH_END();
  return ;
}
int pathReMoveSampPoint(path_t* g)
{
  ImVec2* p = g->_Path;
  int i = 1, j = 0;
  for (; i < g->_Path_Size; ++i) {
    if (p[j].x != p[i].x || p[j].y != p[i].y) {
      p[++j] = p[i];
    }
  }
  if (j > 0 && (p[j].x != p[0].x || p[j].y != p[0].y)) {
    ++j;
  }
  g->_Path_Size = j;
  return j;
}
void pathArcToFast(path_t* g, ImVec2 centre, float radius, int amin, int amax)
{
  int i;
  static ImVec2 circle_vtx[12];
  static bool circle_vtx_builds = false;
  const int circle_vtx_count = countof(circle_vtx);
  if (!circle_vtx_builds) {
    for (i = 0; i < circle_vtx_count; i++) {
      const float a = ((float)i / (float)circle_vtx_count) * 2 * M_PI;
      circle_vtx[i].x = cosf(a);
      circle_vtx[i].y = sinf(a);
    }
    circle_vtx_builds = true;
  }
  if (amin > amax) {
    return;
  }
  if (radius == 0.0f) {
    pathLineTo(g, centre);
  }
  else {
    int a;
    PATH_BEG(amax - amin + 1);
    for (a = amin; a <= amax; a++) {
      ImVec2 c = circle_vtx[a % circle_vtx_count];
      PATH_VEC(fVec2(centre.x + c.x * radius, centre.y + c.y * radius));
    }
    PATH_END();
  }
}
ImVec2 FastSinCos(float a)
{
  static ImVec2 circle_vtx[256];
  static bool circle_vtx_builds = false;
  if (!circle_vtx_builds) {
    int i;
    for (i = 0; i < countof(circle_vtx); i++) {
      const float a = ((float)i / (float)countof(circle_vtx)) * 2 * M_PI;
      circle_vtx[i].x = cosf(a);
      circle_vtx[i].y = sinf(a);
    }
    circle_vtx_builds = true;
  }
  return circle_vtx[(unsigned char)(a * 128.f / M_PI)];
}
void pathArc(path_t* g, ImVec2 centre, float rx, float ry, float amin, float amax)
{
  int i;
  if (rx == 0.0 ||ry==0.0) {
    pathLineTo(g, centre);
  }
  else {
    int num_segments = BOUND(((rx+ry) * 0.5 * fabsf(amax - amin) * 0.4), 8, 64);
    PATH_BEG((num_segments + 1));
    for (i = 0; i <= num_segments; i++) {
      const float a = amin + ((float)i / (float)num_segments) * (amax - amin);
#if 0
      ImVec2 sc = FastSinCos(a);
      PATH_VEC(fVec2(centre.x + sc.x * rx, centre.y + sc.y * ry));
#else
      PATH_VEC(fVec2(centre.x + cos(a) * rx, centre.y + sin(a) * ry));
#endif
    }
    PATH_END();
  }
}
static void PathBezierToCasteljau(path_t* g, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float tess_tol, int level)
{
  float dx = x4 - x1;
  float dy = y4 - y1;
  float d2 = ((x2 - x4) * dy - (y2 - y4) * dx);
  float d3 = ((x3 - x4) * dy - (y3 - y4) * dx);
  d2 = (d2 >= 0) ? d2 : -d2;
  d3 = (d3 >= 0) ? d3 : -d3;
  if ((d2 + d3) * (d2 + d3) < tess_tol * (dx * dx + dy * dy)) {
    pathLineTo(g, fVec2(x4, y4));
  }
  else if (level < 10) {
    float x12 = (x1 + x2) * 0.5f, y12 = (y1 + y2) * 0.5f;
    float x23 = (x2 + x3) * 0.5f, y23 = (y2 + y3) * 0.5f;
    float x34 = (x3 + x4) * 0.5f, y34 = (y3 + y4) * 0.5f;
    float x123 = (x12 + x23) * 0.5f, y123 = (y12 + y23) * 0.5f;
    float x234 = (x23 + x34) * 0.5f, y234 = (y23 + y34) * 0.5f;
    float x1234 = (x123 + x234) * 0.5f, y1234 = (y123 + y234) * 0.5f;
    PathBezierToCasteljau(g, x1, y1, x12, y12, x123, y123, x1234, y1234, tess_tol, level + 1);
    PathBezierToCasteljau(g, x1234, y1234, x234, y234, x34, y34, x4, y4, tess_tol, level + 1);
  }
}
ImVec2 pathback(path_t* g, ImVec2 defPt)
{
  return g->_Path_Size > 0 ? g->_Path[g->_Path_Size - 1] : defPt;
}
void pathBezierCurveTo(path_t* g, ImVec2 p2, ImVec2 p3, ImVec2 p4)
{
  int num_segments = (int)(ImTriangleArea(p2, p3, p4) / 100);
  ImVec2 p1 = pathback(g, p2);
  float CurveTessellationTol = 0.10f;
  num_segments = BOUND(num_segments, 4, 32);
  if (num_segments == 0) {
    // Auto-tessellated
    PathBezierToCasteljau(g, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y, CurveTessellationTol, 0);
  }
  else {
    int i_step;
    float t_step = 1.0f / (float)num_segments;
    PATH_BEG(num_segments);
    for (i_step = 1; i_step <= num_segments; i_step++) {
      float t = t_step * i_step;
      float u = 1.0f - t;
      float w1 = u * u * u;
      float w2 = 3 * u * u * t;
      float w3 = 3 * u * t * t;
      float w4 = t * t * t;
      PATH_VEC(fVec2(w1 * p1.x + w2 * p2.x + w3 * p3.x + w4 * p4.x, w1 * p1.y + w2 * p2.y + w3 * p3.y + w4 * p4.y));
    }
    PATH_END();
  }
}
void pathroundRect(path_t* g, ImVec2 a, ImVec2 b, float rounding, int rounding_corners)
{
  float r = rounding;
  float rx = fabsf(b.x - a.x) * (((rounding_corners & (1 | 2)) == (1 | 2)) || ((rounding_corners & (4 | 8)) == (4 | 8)) ? 0.5f : 1.0f) - 1.0f;
  float ry = fabsf(b.y - a.y) * (((rounding_corners & (1 | 8)) == (1 | 8)) || ((rounding_corners & (2 | 4)) == (2 | 4)) ? 0.5f : 1.0f) - 1.0f;
  r = ImMin(r, rx);
  r = ImMin(r, ry);
  if (r <= 0.0f || rounding_corners == 0) {
    PATH_BEG(4);
    PATH_VEC(a);
    PATH_VEC(fVec2(b.x, a.y));
    PATH_VEC(b);
    PATH_VEC(fVec2(a.x, b.y));
    PATH_END();
  }
  else {
    const float r0 = (rounding_corners & 1) ? r : 0.0f;
    const float r1 = (rounding_corners & 2) ? r : 0.0f;
    const float r2 = (rounding_corners & 4) ? r : 0.0f;
    const float r3 = (rounding_corners & 8) ? r : 0.0f;
    pathArcToFast(g, fVec2(a.x + r0, a.y + r0), r0, 6, 9);
    pathArcToFast(g, fVec2(b.x - r1, a.y + r1), r1, 9, 12);
    pathArcToFast(g, fVec2(b.x - r2, b.y - r2), r2, 0, 3);
    pathArcToFast(g, fVec2(a.x + r3, b.y - r3), r3, 3, 6);
  }
}
void pathQuad(path_t* g, ImVec2 a, ImVec2 b, ImVec2 c, ImVec2 d)
{
  PATH_BEG(4);
  PATH_VEC(a);
  PATH_VEC(b);
  PATH_VEC(c);
  PATH_VEC(d);
  PATH_END();
}
void pathRect(path_t* g, ImVec2 a, ImVec2 c)
{
  ImVec2 b = fVec2(c.x, a.y), d = fVec2(a.x, c.y);
  pathQuad(g, a, b, c, d);
}
void pathTriangle(path_t* g, ImVec2 a, ImVec2 b, ImVec2 c)
{
  PATH_BEG(4);
  PATH_VEC(a);
  PATH_VEC(b);
  PATH_VEC(c);
  PATH_END();
}
void pathBezierCurve(path_t* g, ImVec2 pos0, ImVec2 cp0, ImVec2 cp1, ImVec2 pos1)
{
  pathLineTo(g, pos0);
  pathBezierCurveTo(g, cp0, cp1, pos1);
}
#undef PATH_BEG
#undef PATH_VEC
#undef PATH_END