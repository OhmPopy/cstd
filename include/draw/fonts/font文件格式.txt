font文件格式

2008-03-23 10:23:15|  分类： 编程经验 |举报|字号 订阅
NE格式：http://www.program-transformation.org/Transform/NeFormat

PE格式：http://msdn.microsoft.com/msdnmag/issues/02/02/PE/default.aspx 及 http://msdn.microsoft.com/msdnmag/issues/02/03/pe2/default.aspx

FNT字体文件格式：http://support.microsoft.com/kb/65123

Simon Tatham的主页：http://www.chiark.greenend.org.uk/~sgtatham/fonts/

python版的dewinfont程序：http://www.chiark.greenend.org.uk/~sgtatham/fonts/dewinfont

 

在 dfCharTable, 结构描述个位用于字体文件中字符由 Windows 3.0 字体文件包含标志符号表。 该版本使字体以超过 64K 的大小, Windows x 字体的大小限制。 通过使用 32 位偏移的这是对可能 dfCharTable 中标志符号字符。 

由于 32 - bit 偏移以及他们可能很大, 用于运行 Windows 3.0 版本的系统上使用这些字体带 80386 （或更高） 处理器处理器的 32 位寄存器可访问标志符号字符模式中保护标准或增强 386）。 仅当两个条件为真通常, 设备驱动程序使用 Windows 3.0 版本的字体。 

字体文件具有的窗体 NAME.FNT .FNT 扩展名存储。 以下列表中显示开头光栅和向量版本的 Windows 3.0 字体文件的信息：

FontFmt


为光栅和矢量字体定义为 Microsoft Windows 的字体文件格式。这些格式可以通过某些 GDI 支持模块中的智能文本生成器使用。矢量格式中，尤其是，更频繁地使用 GDI 本身比由支持模块。

光栅和矢量字体文件开头所共有的信息然后继续为每种文件类型与不同的信息。

对于 Windows 3.0 字体文件头包含六个新字段： dFlags，dfAspace，dfBspace，dfCspace，dfColorPointer，和 dfReserved1。在 Windows 3.0 中，不会使用这些字段。为确保与 Windows 的将来版本的兼容性，这些字段应设置为零。

所有的设备驱动程序支持的 Windows 2.x 字体。但是，并非所有的设备驱动程序支持的 Windows 3.0 版本。

Windows 3.0 字体文件包括 dfCharTable，包含了描述字体文件中的字符的位结构中的标志符号表。此版本可使字体超过 64k 的大小，Windows 2.x 字体的大小限制。这可通过使用的 32 位偏移量到 dfCharTable 中的字符标志符号。

由于 32 位偏移量以及它们的大小可能很大，设计运行 Windows 3.0 版的系统上使用这些字体在受保护的 （标准或增强的 386） 模式的 80386 （或更高版本） 处理器、 处理器的 32 位寄存器访问字符标志符号的位置。通常情况下，设备驱动程序使用 Windows 3.0 版本的字体，只有在两种条件均满足时。

字体文件存储在一起。FNT 的窗体名称的扩展名。FNT。光栅和向量的 Windows 3.0 字体文件的版本的信息在开始下面的列表所示：
Field          Description
-----          -----------

dfVersion      2 bytes specifying the version (0200H or 0300H) of
               the file.

dfSize         4 bytes specifying the total size of the file in
               bytes.

dfCopyright    60 bytes specifying copyright information.

dfType         2 bytes specifying the type of font file.

               The low-order byte is exclusively for GDI use. If the
               low-order bit of the WORD is zero, it is a bitmap
               (raster) font file. If the low-order bit is 1, it is a
               vector font file. The second bit is reserved and must
               be zero. If no bits follow in the file and the bits are
               located in memory at a fixed address specified in
               dfBitsOffset, the third bit is set to 1; otherwise, the
               bit is set to 0 (zero). The high-order bit of the low
               byte is set if the font was realized by a device. The
               remaining bits in the low byte are reserved and set to
               zero.

               The high byte is reserved for device use and will
               always be set to zero for GDI-realized standard fonts.
               Physical fonts with the high-order bit of the low byte
               set may use this byte to describe themselves. GDI will
               never inspect the high byte.

dfPoints       2 bytes specifying the nominal point size at which
               this character set looks best.

dfVertRes      2 bytes specifying the nominal vertical resolution
               (dots-per-inch) at which this character set was
               digitized.

dfHorizRes     2 bytes specifying the nominal horizontal resolution
               (dots-per-inch) at which this character set was
               digitized.

dfAscent       2 bytes specifying the distance from the top of a
               character definition cell to the baseline of the
               typographical font. It is useful for aligning the
               baselines of fonts of different heights.

dfInternalLeading
               Specifies the amount of leading inside the bounds set
               by dfPixHeight. Accent marks may occur in this area.
               This may be zero at the designer's option.

dfExternalLeading
               Specifies the amount of extra leading that the designer
               requests the application add between rows. Since this
               area is outside of the font proper, it contains no
               marks and will not be altered by text output calls in
               either the OPAQUE or TRANSPARENT mode. This may be zero
               at the designer's option.

dfItalic       1 (one) byte specifying whether or not the character
               definition data represent an italic font. The low-order
               bit is 1 if the flag is set. All the other bits are
               zero.

dfUnderline    1 byte specifying whether or not the character
               definition data represent an underlined font. The
               low-order bit is 1 if the flag is set. All the other
               bits are 0 (zero).

dfStrikeOut    1 byte specifying whether or not the character
               definition data represent a struckout font. The low-
               order bit is 1 if the flag is set. All the other bits
               are zero.

dfWeight       2 bytes specifying the weight of the characters in the
               character definition data, on a scale of 1 to 1000. A
               dfWeight of 400 specifies a regular weight.

dfCharSet      1 byte specifying the character set defined by this
               font.

dfPixWidth     2 bytes. For vector fonts, specifies the width of the
               grid on which the font was digitized. For raster fonts,
               if dfPixWidth is nonzero, it represents the width for
               all the characters in the bitmap; if it is zero, the
               font has variable width characters whose widths are
               specified in the dfCharTable array.

dfPixHeight    2 bytes specifying the height of the character bitmap
               (raster fonts), or the height of the grid on which a
               vector font was digitized.

dfPitchAndFamily
               Specifies the pitch and font family. The low bit is set
               if the font is variable pitch. The high four bits give
               the family name of the font. Font families describe in
               a general way the look of a font. They are intended for
               specifying fonts when the exact face name desired is
               not available. The families are as follows:

                  Family               Description
                  ------               -----------
                  FF_DONTCARE (0<<4)   Don't care or don't know.
                  FF_ROMAN (1<<4)      Proportionally spaced fonts
                                       with serifs.
                  FF_SWISS (2<<4)      Proportionally spaced fonts
                                       without serifs.
                  FF_MODERN (3<<4)     Fixed-pitch fonts.
                  FF_SCRIPT (4<<4)
                  FF_DECORATIVE (5<<4)


dfAvgWidth     2 bytes specifying the width of characters in the font.
               For fixed-pitch fonts, this is the same as dfPixWidth.
               For variable-pitch fonts, this is the width of the
               character "X."

dfMaxWidth     2 bytes specifying the maximum pixel width of any
               character in the font. For fixed-pitch fonts, this is
               simply dfPixWidth.

dfFirstChar    1 byte specifying the first character code defined by
               this font. Character definitions are stored only for
               the characters actually present in a font. Therefore,
               use this field when calculating indexes into either
               dfBits or dfCharOffset.

dfLastChar     1 byte specifying the last character code defined by
               this font. Note that all the characters with codes
               between dfFirstChar and dfLastChar must be present in
               the font character definitions.

dfDefaultChar  1 byte specifying the character to substitute
               whenever a string contains a character out of the
               range. The character is given relative to dfFirstChar
               so that dfDefaultChar is the actual value of the
               character, less dfFirstChar. The dfDefaultChar should
               indicate a special character that is not a space.

dfBreakChar    1 byte specifying the character that will define word
               breaks. This character defines word breaks for word
               wrapping and word spacing justification. The character
               is given relative to dfFirstChar so that dfBreakChar is
               the actual value of the character, less that of
               dfFirstChar. The dfBreakChar is normally (32 -
               dfFirstChar), which is an ASCII space.

dfWidthBytes   2 bytes specifying the number of bytes in each row of
               the bitmap. This is always even, so that the rows start
               on WORD boundaries. For vector fonts, this field has no
               meaning.

dfDevice       4 bytes specifying the offset in the file to the string
               giving the device name. For a generic font, this value
               is zero.

dfFace         4 bytes specifying the offset in the file to the
               null-terminated string that names the face.

dfBitsPointer  4 bytes specifying the absolute machine address of
               the bitmap. This is set by GDI at load time. The
               dfBitsPointer is guaranteed to be even.

dfBitsOffset   4 bytes specifying the offset in the file to the
               beginning of the bitmap information. If the 04H bit in
               the dfType is set, then dfBitsOffset is an absolute
               address of the bitmap (probably in ROM).

               For raster fonts, dfBitsOffset points to a sequence of
               bytes that make up the bitmap of the font, whose height
               is the height of the font, and whose width is the sum
               of the widths of the characters in the font rounded up
               to the next WORD boundary.

               For vector fonts, it points to a string of bytes or
               words (depending on the size of the grid on which the
               font was digitized) that specify the strokes for each
               character of the font. The dfBitsOffset field must be
               even.

dfReserved     1 byte, not used.

dfFlags        4 bytes specifying the bits flags, which are additional
               flags that define the format of the Glyph bitmap, as
               follows:

               DFF_FIXED            equ  0001h ; font is fixed pitch
               DFF_PROPORTIONAL     equ  0002h ; font is proportional
                                               ; pitch
               DFF_ABCFIXED         equ  0004h ; font is an ABC fixed
                                               ; font
               DFF_ABCPROPORTIONAL  equ  0008h ; font is an ABC pro-
                                               ; portional font
               DFF_1COLOR           equ  0010h ; font is one color
               DFF_16COLOR          equ  0020h ; font is 16 color
               DFF_256COLOR         equ  0040h ; font is 256 color
               DFF_RGBCOLOR         equ  0080h ; font is RGB color

dfAspace       2 bytes specifying the global A space, if any. The
               dfAspace is the distance from the current position to
               the left edge of the bitmap.

dfBspace       2 bytes specifying the global B space, if any. The
               dfBspace is the width of the character.

dfCspace       2 bytes specifying the global C space, if any. The
               dfCspace is the distance from the right edge of the
               bitmap to the new current position. The increment of a
               character is the sum of the three spaces. These apply
               to all glyphs and is the case for DFF_ABCFIXED.

dfColorPointer
               4 bytes specifying the offset to the color table for
               color fonts, if any. The format of the bits is similar
               to a DIB, but without the header. That is, the
               characters are not split up into disjoint bytes.
               Instead, they are left intact. If no color table is
               needed, this entry is NULL.
               [NOTE: This information is different from that in the
               hard-copy Developer's Notes and reflects a correction.]

dfReserved1    16 bytes, not used.
               [NOTE: This information is different from that in the
               hard-copy Developer's Notes and reflects a correction.]

dfCharTable    For raster fonts, the CharTable is an array of entries
               each consisting of two 2-byte WORDs for Windows 2.x and
               three 2-byte WORDs for Windows 3.0. The first WORD of
               each entry is the character width. The second WORD of
               each entry is the byte offset from the beginning of the
               FONTINFO structure to the character bitmap. For Windows
               3.0, the second and third WORDs are used for the
               offset.

               There is one extra entry at the end of this table that
               describes an absolute-space character. This entry
               corresponds to a character that is guaranteed to be
               blank; this character is not part of the normal
               character set.

               The number of entries in the table is calculated as
               ((dfLastChar - dfFirstChar) + 2). This includes a
               spare, the sentinel offset mentioned in the following
               paragraph.

               For fixed-pitch vector fonts, each 2-byte entry in this
               array specifies the offset from the start of the bitmap
               to the beginning of the string of stroke specification
               units for the character. The number of bytes or WORDs
               to be used for a particular character is calculated by
               subtracting its entry from the next one, so that there
               is a sentinel at the end of the array of values.

               For proportionally spaced vector fonts, each 4-byte
               entry is divided into two 2-byte fields. The first
               field gives the starting offset from the start of the
               bitmap of the character strokes. The second field gives
               the pixel width of the character.

<facename>     An ASCII character string specifying the name of the
               font face. The size of this field is the length of the
               string plus a NULL terminator.

<devicename>   An ASCII character string specifying the name of the
               device if this font file is for a specific device. The
               size of this field is the length of the string plus a
               NULL terminator.

<bitmaps>      This field contains the character bitmap definitions.
               Each character is stored as a contiguous set of bytes.
               (In the old font format, this was not the case.)

               The first byte contains the first 8 bits of the first
               scanline (that is, the top line of the character). The
               second byte contains the first 8 bits of the second
               scanline. This continues until a first "column" is
               completely defined.

               The following byte contains the next 8 bits of the
               first scanline, padded with zeros on the right if
               necessary (and so on, down through the second
               "column"). If the glyph is quite narrow, each scanline
               is covered by 1 byte, with bits set to zero as
               necessary for padding. If the glyph is very wide, a
               third or even fourth set of bytes can be present.

                  NOTE: The character bitmaps must be stored
                  contiguously and arranged in ascending order.

               The following is a single-character example, in which
               are given the bytes for a 12 x 14 pixel character, as
               shown here schematically.

                  ............
                  .....**.....
                  ....*..*....
                  ...*....*...
                  ..*......*..
                  ..*......*..
                  ..*......*..
                  ..********..
                  ..*......*..
                  ..*......*..
                  ..*......*..
                  ............
                  ............
                  ............

               The bytes are given here in two sets, because the
               character is less than 17 pixels wide.

                  00 06 09 10 20 20 20 3F 20 20 20 00 00 00
                  00 00 00 80 40 40 40 C0 40 40 40 00 00 00

               Note that in the second set of bytes, the second digit
               of each is always zero. It would correspond to the 13th
               through 16th pixels on the right side of the character,
               if they were present.

DfCharTable 的 Windows 2.x 版具有 GlyphEntry 结构具有以下格式：
GlyphEntry    struc
geWidth       dw     ?    ; width of character bitmap in pixels
geOffset      dw     ?    ; pointer to the bits
GlyphEntry    ends
				
DfCharTable 的 Windows 3.0 版本，取决于标志符号位图的格式。

注意： 在 Windows 3.0 中支持的唯一格式将 DFF_FIXED 和 DFF_PROPORTIONAL。

DFF_FIXED
DFF_PROPORTIONAL
GlyphEntry    struc
geWidth       dw     ?    ; width of character bitmap in pixels
geOffset      dd     ?    ; pointer to the bits
GlyphEntry    ends
				
DFF_ABCFIXED
DFF_ABCPROPORTIONAL
GlyphEntry    struc
geWidth       dw     ?   ; width of character bitmap in pixels
geOffset      dd     ?   ; pointer to the bits
geAspace      dd     ?   ; A space in fractional pixels (16.16)
geBspace      dd     ?   ; B space in fractional pixels (16.16)
geCspace      dw     ?   ; C space in fractional pixels (16.16)
GlyphEntry    ends

小数像素为单位） 来表示为 32 位有符号数字，15 和 16 位之间的隐式二进制点。

ABC 间距下面是与上面的定义相同。

DFF_1COLOR
DFF_16COLOR
DFF_256COLOR
DFF_RGBCOLOR
GlyphEntry    struc
geWidth       dw     ?   ; width of character bitmap in pixels
geOffset      dd     ?   ; pointer to the bits
geHeight      dw     ?   ; height of character bitmap in pixels
geAspace      dd     ?   ; A space in fractional pixels (16.16)
geBspace      dd     ?   ; B space in fractional pixels (16.16)
geCspace      dd     ?   ; C space in fractional pixels (16.16)
GlyphEntry    ends
				
DFF_1COLOR 意味着每个字节的 8 个像素
DFF_16COLOR 意味着 2 个像素，每个字节
DFF_256COLOR 意味着每个字节 1 个像素
DFF_RGBCOLOR 意味着 RGBquads




分数像素表示为 32 位签名数字与一个隐性二进制点之间 15 和 16 位。 这称为 16.16 定点数 （" sixteen dot sixteen ")。 

ABC 距此处与上面定义过程相同。 但是, 此处有特定设置对每个字符。 

DFF_1COLOR 
DFF_16COLOR 
DFF_256COLOR 
DFF_RGBCOLOR 

GlyphEntry    struc  geWidth       dw     ?   ; width of character bitmap in pixels  geOffset      dd     ?   ; pointer to the bits  geHeight      dw     ?   ; height of character bitmap in pixels  geAspace      dd     ?   ; A space in fractional pixels (16.16)  geBspace      dd     ?   ; B space in fractional pixels (16.16)  geCspace      dd     ?   ; C space in fractional pixels (16.16)  GlyphEntry    ends      
DFF_1COLOR 意味着每字节 8 像素 
DFF_16COLOR 意味着两字节每像素 
DFF_256COLOR 意味着 1 像素每字节 
DFF_RGBCOLOR 意味着 RGBquads


/**
* 提取.fon文件中的字体点阵数据，并制作gd中imageloadfont函数可用的字体
*
* @author: legend(legendsky@hotmail.com)
* @copyright   UGiA.CN
* @link: http://www.ugia.cn/?p=124
*
* usage:
*
* <?php
* include('class_fon.php');
*
* $fon = new Fon("consol10.fon");
*
* if ($fon == false)
* {
*     echo $fon->errno . ": " . $fon->errstr;
* }
*/
 
class Fon
{
    var $file   = '';
    var $stream = null;
    var $savepath = '';
 
    var $errno  = 0;
    var $errstr = '';
 
 
    function fon($file = '', $savepath = '')
    {
        if ($file !== '')
        {
            $this->parse($file, $savepath);
        }
    }
 
    function error($errno, $errstr)
    {
        $this->errno = $errno;
        $this->errstr = $errstr;
    }
 
    function parse($file, $savepath)
    {
        if (!$file)
        {
            $this->error(1001, 'Please assign a file!');
            return false;
        }
       
        $this->savepath = $savepath ? str_replace("\\", "/", $savepath) : './';
        $this->savepath .= substr($this->savepath, -1) != '/' ? '/' : '';
 
        if (is_resource($file))
        {
            $this->stream = $file;
        }
        else
        {
            $this->file = $file;
            $this->stream = file_get_contents($file);
        }
 
        if (!$this->stream)
        {
            $this->error(1002, 'Can not open file!');
            return false;
        }
 
        $fonts = $this->parse_fon();
 
        if (!$fonts)
        {
            return false;
        }
       
        if (!is_dir($this->savepath . $fonts[0]['facename']))
        {
            @mkdir($this->savepath . $fonts[0]['facename'], 0700);
        }
 
        foreach ($fonts as $k => $font)
        {
            $filename  = $font['facename'] . sprintf("_%02d", $k);
            $filename .= "_" . $font['width'] . "x" . $font['height'];
            if ($font['italic']) $filename .= "_italic";
            if ($font['underline']) $filename .= "_underline";
            if ($font['strikeout']) $filename .= "_strikeout";
            $filename .= ".fd";
 
            $this->print_font($font, $this->savepath . $font['facename'] . "/" . $filename);
        }
    }
 
    function parse_fon()
    {
        $s = & new Stream($this->stream);
 
        if (substr($this->stream, 0, 2) != 'MZ')
        {
            $this->error(2001, 'MZ signature not found!');
            return false;
        }
       
        $neoff = $s->dword(0x3c); // 标志位offset
 
        if (substr($this->stream, $neoff, 2) == 'NE')
        {
            return $this->parse_ne($neoff);
        }
        else if (substr($this->stream, $neoff, 4) == "PE\0\0")
        {
            return $this->parse_pe($neoff);
        }
       
        $this->error(2002, 'NE or PE signature not found');
        return false;
    }
 
    function parse_ne($neoff)
    {
        $stream = & $this->stream;
        $s = & new Stream($this->stream);
 
        $ret = array();
 
        // Find the resource table.
        $rtable = $neoff + $s->word($neoff + 0x24);
 
        // 32h: A shift count that is used to align the logical sector. This
        // count is log2 of the segment sector size. It is typically 4,
        // although the default count is 9.
        $shift = $s->word($rtable);
 
        // Now loop over the rest of the resource table.
        $p = $rtable + 2;
        while (1)
        {
            $rtype = $s->word($p);
           
            // end of resource table
            if ($rtype == 0)
            {
                break;
            }
           
            $count = $s->word($p + 2);           
            // type, count, 4 bytes reserved
            $p += 8;
           
            for ($i = 0; $i < $count; $i ++)
            {
                $start = $s->word($p) << $shift;
                $size = $s->word($p + 2) << $shift;
               
                if ($start < 0 || $size < 0 || $start + $size > strlen($this->stream))
                {
                    $this->error(2003, 'Resource overruns file boundaries');
 
                    return false;
                }
               
                // this is an actual font
                if ($rtype == 0x8008)
                {
                    $font = $this->parse_fnt(substr($this->stream, $start, $size));
                    //echo "font start at $start, size: $size\n";
                    $ret[] = $font;
                }
 
                // start, size, flags, name/id, 4 bytes reserved
                $p += 12;
            }
        }
       
        return $ret;
    }
   
    function print_font($font, $filename)
    {
        $fp  = fopen($filename, "w");
        $gdf = fopen(substr($filename, 0, -2) . 'gdf', "w"); // GD Font
 
        fwrite($fp, "# .fd font description generated by dewinfont(php).\n\n");
        fwrite($fp, "facename $font[facename]\n");
        fwrite($fp, "copyright $font[copyright]\n\n");
        fwrite($fp, "height $font[height]\n");
        fwrite($fp, "ascent $font[ascent]\n");
       
        // gd
        fwrite($gdf, "\0\1\0\0");
        fwrite($gdf, "\0\0\0\0");
        fwrite($gdf, chr($font['width']) . "\0\0\0", 4);
        fwrite($gdf, chr($font['height']) . "\0\0\0", 4);
 
        if ($font['height'] == $font['pointsize']) fwrite($fp, "#");
        fwrite($fp, "pointsize $font[pointsize]\n\n");
 
        if (!$font['italic']) fwrite($fp, "#");       
        fwrite($fp, "italic " . ($font['italic'] ? 'yes' : 'no') . "\n");
 
        if (!$font['underline']) fwrite($fp, "#");
        fwrite($fp, "underline " . ($font['underline'] ? 'yes' : 'no') . "\n");
 
        if (!$font['strikeout']) fwrite($fp, "#");       
        fwrite($fp, "strikeout " . ($font['strikeout'] ? 'yes' : 'no') . "\n");
       
        if ($font['weight'] == 400) fwrite($fp, "#");
        fwrite($fp, "weight $font[weight]\n\n");
 
        if ($font['charset'] == 0) fwrite($fp, "#");
        fwrite($fp, "charset $font[charset]\n\n");     
 
        for ($i = 0; $i < 256; $i ++)
        {
            fwrite($fp, "char $i\nwidth " . $font['chars'][$i]['width'] . "\n");
 
            if ($font['chars'][$i]['width'] != 0)
            {
                for ($j = 0; $j < $font['height']; $j ++)
                {
                    $v = $font['chars'][$i]['data'][$j];
                    $m = 1 << ($font['chars'][$i]['width'] - 1);
                    for ($k = 0; $k < $font['chars'][$i]['width']; $k ++)
                    {
                        if ($v & $m)
                        {
                            fwrite($fp, "M");
                            fwrite($gdf, in_array($i, array(7, 8, 9, 10, 13, 26)) ? "\0" : "\1");
                        }
                        else
                        {
                            fwrite($fp, ".");
                            fwrite($gdf, "\0");
                        }
 
                        $v = $v << 1;
                    }
 
                    fwrite($fp, "\n");
                }
 
                fwrite($fp, "\n");
            }
        }
       
        //fwrite($gdf, "(C)2007 UGiA.CN");
        fclose($gdf);
        fclose($fp);
    }
 
    function parse_fnt($stream)
    {
        $s = & new Stream($stream);
       
        $font = array();
 
        $font['version'] = $s->word(0);
        $font['copyright'] = substr($stream, 6, 60);
        $ftype = $s->word(0x42);
 
        if ($ftype & 1)
        {
            // This font is a vector font
            return;
        }
       
        // face name offset
        $off_facename = $s->dword(0x69);
 
        if ($off_facename < 0 || $off_facename > strlen($stream))
        {
            // Face name not contained within font data
            return;
        }
 
        $font['facename'] = $s->read_str($off_facename);
        $font['pointsize'] = $s->word(0x44);
        $font['ascent'] = $s->word(0x4a);
        $font['width'] = 0; // max width
        $font['height'] = $s->word(0x58);
        $font['italic'] = $s->byte(0x50);
        $font['underline'] = $s->byte(0x51);
        $font['strikeout'] = $s->byte(0x52);
        $font['weight'] = $s->word(0x53);
        $font['charset'] = $s->byte(0x55);
       
        // Read the char table.    
        if ($font['version'] == 0x200)
        {
            $ctstart = 0x76;
            $ctsize = 4;
        }
        else
        {
            $ctstart = 0x94;
            $ctsize = 6;
        }
 
        $maxwidth = 0;
 
        $font['chars'] = array();
 
        for ($i = 0; $i < 256; $i ++)
        {
            $font['chars'][$i]['data'] = array_fill(0, $font['height'], 0);
        }
 
        $firstchar = $s->byte(0x5f);
        $lastchar = $s->byte(0x60);
        #print "$firstchar,$lastchar ";
        for ($i = $firstchar; $i <= $lastchar; $i ++)
        {
            $entry = $ctstart + $ctsize * ($i - $firstchar);
            $w = $s->word($entry);
            $font['chars'][$i]['width'] = $w;
            $font['width'] = $w > $font['width'] ? $w : $font['width'];
           
            if ($ctsize == 4)
            {
                $off = $s->word($entry + 2);
            }
            else
            {
                $off = $s->dword($entry + 2);
            }
           
            $widthbytes = floor(($w + 7) / 8);
            //echo $widthbytes . " ";
            for ($j = 0; $j < $font['height']; $j ++)
            {
                for ($k = 0; $k < $widthbytes; $k ++)
                {
                    $bytepos = $off + $k * $font['height'] + $j;
                   
                    $font['chars'][$i]['data'][$j] = $font['chars'][$i]['data'][$j] << 8;
                    $font['chars'][$i]['data'][$j] = $font['chars'][$i]['data'][$j] | $s->byte($bytepos);
                }
 
                $font['chars'][$i]['data'][$j] = $font['chars'][$i]['data'][$j] >> (8 * $widthbytes - $w);
                //echo $font['chars'][$i]['data'][$j] . " ";
            }          
        }
 
        //print_r($font);
 
        return $font;
    }
}
 
class Stream
{
    var $stream = '';
 
    function stream($stream)
    {
        $this->stream = $stream;
    }
 
    function byte($offset)
    {
        return ord($this->stream{$offset});
    }
 
    function word($offset)
    {
        return $this->byte($offset + 0) + 256 * $this->byte($offset + 1);
    }
 
    function dword($offset)
    {
        return $this->word($offset + 0) | ($this->word($offset + 2) << 16);
    }
 
    function read_str($offset)
    {
        $pos = strpos($this->stream, "\0", $offset);
        if ($pos !== false)
        {
            return substr($this->stream, $offset, $pos - $offset);
        }
 
        return substr($this->stream, $offset);
    }
}

 
