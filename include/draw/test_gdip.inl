#include "test_gdip_fun.inl"
int rand_Next(int bound)
{
  srand((unsigned)time(NULL));
  return rand() / bound;
}

#define TEST_GDIP_FUN_DEF_DEF(TEST_GDIP_FUNDEF) \
  TEST_GDIP_FUNDEF(画笔, NULL) \
  TEST_GDIP_FUNDEF(从画刷中构造画笔, CreatePenFromBrush) \
  TEST_GDIP_FUNDEF(自定义线型, DashStyle_Custom) \
  TEST_GDIP_FUNDEF(画笔的对齐方式, Pen_Align) \
  TEST_GDIP_FUNDEF(画笔的缩放与旋转, Pen_Tranform) \
  TEST_GDIP_FUNDEF(画笔的线帽属性, Pen_LineCap) \
  TEST_GDIP_FUNDEF(画笔的透明度支持, Pen_TransColor) \

// Gdi+演示
#if 0
// 
// txt1 = "画刷";
// ch = tree.InsertItem(txt1, ch0);
// index1 = 0x0200;
// ch1 = tree.InsertItem("单色画刷的使用", ch);
// //简单的单色画刷";
// 1;     //Brush_SolidBrush);
// //填充正叶曲线";
// 2;     //Brush_FillVurve);
// ch1 = tree.InsertItem("影线画刷的使用", ch);
// //影线画刷";
// 3;     //Brush_HatchBrush);
// //枚举所有影线画刷风格";
// 4;     //Brush_EnumAllStyle);
// //设置绘制原点";
// 5;     //Brush_SetRenderingOrigin);
// ch1 = tree.InsertItem("纹理画刷", ch);
// //纹理画刷的基本使用";
// 6;     //Brush_Texture);
// //纹理画刷的排列方式";
// 7;     //Brush_Texture_WrapMode);
// //纹理画刷的变换";
// 8;     //Brush_TextureTransform);
// //查询画刷的变换信息";
// 9;     //Brush_GetTextureMatrix);
// ch1 = tree.InsertItem("线性渐变画刷的使用", ch);
// //线性渐变画刷";
// 10;    //Brush_LinearGradientBrush);
// //渐变画刷的不同填充方式";
// 11;    //Brush_LinearArrange);
// //多色渐变画刷";
// 12;    //Brush_LinearInterpolation);
// //使用渐变画刷的渐变模式";
// 13;    //Brush_LinearGradientMode);
// //调整渐变线偏转角度";
// 14;    //Brush_LinearAngle);
// 自定义线性渐变画刷的渐变过程";
// 15;    //Brush_LinearCustomize);
// 钟形曲线渐变";
// 16;    //Brush_LinearGradientBrush_BellShape);
// 启用Gamma校正";
// 17;    //Brsuh_LinearGradientBrush_UsingGamma);
// ch1 = tree.InsertItem("路径渐变画刷", ch);
// 构造五星";
// 18;    //Brush_PathGradientBrush_Star);
// 构造五星(2)";
// 19;    //Brush_PathGradientBrush_Star2);
// 使用不同的路径渐变画刷";
// 20;    //Brush_Using_MorePathGradientBrush);
// 路径渐变画刷的排列方式";
// 21;    //Brush_PathGradientBrush_WrapMode);
// 更改路径渐变画刷的中心点";
// 22;    //Brush_PathGradientBrush_CenterPoint);
// 使用多色渐变";
// 23;    //Brush_PathGradientBrush_InterpolationColors);
// 更改画刷的焦点缩放比例";
// 24;    //Brsuh_PathGradietBrush_Focus);
// 路径渐变画刷的变换";
// 25;    //Brush_PathGradientBrush_Transform);
// 
// txt1 = "文本与字体";
// index1 = 0x0300;
// 在GDI+中使用字体(&A)";
// 1;     //Font_UsingFontInGDIPlus);
// 获取已安装的字体";
// 2;     //Font_EnumAllFonts);
// 增强型字体选择对话框";
// 3;     //Font_EnhanceFontDialog);
// 设置字体的边缘处理方式";
// 4;     //Font_UsingTextRenderHint);
// 使用私有字体集合";
// 5;     //Font_Privatefontcollection);
// 在私有字体集合中使用多个字体";
// 6;     //Font_Privatefontcollection2);
// 在私有字体集合中检查字体信息的可用性";
// 7;     //Font_IsStyleAvailable);
// 在程序中访问字体(系列)的大小信息";
// 8;     //Font_Size);
// 设置文本输出的基线";
// 9;     //Font_BaseLine);
// 使用GDI+绘制文本";
// 10;    //Font_DrawString);
// 测量文本";
// 11;    //Font_MeasureString);
// 计算指定区域中能够显示的字符总数及行数";
// 12;    //Font_MeasureString2);
// 实现文件的分栏显示";
// 13;    //Font_ColumnTextOut);
// 字符串的去尾";
// 14;    //Font_StirngTrimming);
// 文本输出的剪裁修正";
// 15;    //Font_TextOutClip);
// 测量文本的局部输出区域";
// 16;    //Font_MeasureCharacterRanges);
// 控制文本输出方向";
// 17;    //Font_TextoutDirection);
// 设置文本对齐方式";
// 18;    //Font_TextAlignment);
// 设置文本对齐方式(2)";
// 19;    //Font_TextAlignment2);
// 设置和获取制表符信息";
// 20;    //Font_TextoutUsingTabs);
// 使用制表位进行表格输出";
// 21;    //Font_UsingTabs);
// 快捷键前导字符显示";
// 22;    //Font_TextoutHotkeyPrefix);
// 阴影字特效";
// 23;    //Font_TextoutShadow);
// 使用影线画刷绘制文本";
// 24;    //Font_TextoutHashline);
// 绘制纹理字";
// 25;    //Font_TextoutTexture);
// 使用渐变画刷绘制文本";
// 26;    //Font_TextoutGradient);
// 
// txt1 = "路径和区域";
// index1 = 0x0400;
// 构造路径";
// 1;     //Path_Construct);
// 在路径中添加多条线段";
// 2;     //Path_AddLines);
// 封闭图形";
// 3;     //Path_CloseFigure);
// 路径的填充";
// 4;     //Path_FillPath);
// 添加子路径";
// 5;     //Path_AddSubPath);
// GraphicsPathIterator的基本使用";
// 6;     //Path_GetSubPath);
// 访问路径的点信息";
// 7;     //Path_GetPoints);
// 同时获取端点坐标及类型信息";
// 8;     //Path_PathData);
// 查看路径端点的标记信息";
// 9;     //Path_ViewPointFLAG);
// 标记路径区间";
// 10;    //Path_SubPathRange);
// 路径的展平";
// 11;    //Path_Flatten);
// 路径的扭曲";
// 12;    //Path_Warp);
// 路径的线性变换";
// 13;    //Path_Transform);
// 路径的拓宽";
// 14;    //Path_Widen);
// 路径的拓宽处理原理演示";
// 15;    //Path_WidenDemo);
// 从路径中创建文本区域";
// 16;    //Region_FromPath);
// 区域的运算";
// 17;    //Region_Calculate);
// 获取区域的组成矩形集";
// 18;    //Region_GetRects);
// 
// txt1 = "GDI+的坐标变换";
// index1 = 0x0500;
// 在GDI+使用坐标变换";
// 1;     //Transform);
// 平移变换的实现";
// 2;     //TranslateTransform);
// 旋转图片";
// 3;     //RotateTransform);
// 汽车里程表的绘制";
// 4;     //DrawWatch);
// 缩放变换的使用";
// 5;     //ScaleTransform);
// 矩形对象的缩放";
// 6;     //RectScale);
// 在GDI+中旋转输出文本";
// 7;     //FontRotate);
// 查看矩阵的组成元素";
// 8;     //Matrix_ListElements_1);
// 使用矩阵的前置与后缀";
// 9;     //MatrixPos);
// 逆矩阵在变换中的运用";
// 10;    //Martrix_Invert);
// 使用复合变换";
// 11;    //Matrix_Multiply);
// 使用矩阵批量修改点信息";
// 12;    //Matrix_TransformPoints);
// 使用TransformPoints函数实现路径的变换";
// 13;    //Matrix_TransformPoints2);
// 普通矩阵运算与二维向量的矩阵运算";
// 14;    //Matrix_TransformVectors);
// 使用RotateAt函数";
// 15;    //Matrix_RotateAt);
// 使用不同的投射变换显示图片";
// 16;    //Matrix_Shear);
// 投影字的特效输出";
// 17;    //Matrix_TextoutShear);
// 文字大小渐变输出特效";
// 18;    //Matrix_ChangeFontHeight);
// 
// txt1 = "GDI+的色彩变换";
// index1 = 0x0600;
// 启用色彩变换矩阵";
// 1;     //ColorMatrix_Start);
// 色彩平移运算";
// 2;     //TranslateColor);
// 色彩的缩放运算";
// 3;     //ScaleColor);
// 色彩的三种旋转方式";
// 4;     //RotateColor);
// 色彩的投射变换";
// 5;     //ColorShear);
// 色彩映射的程序实现";
// 6;     //ColorRemap);
// 使用色彩变换矩阵实现色彩输出通道";
// 7;     //SetRGBOutputChannel);
// 
// txt1 = "图像的基本处理";
// index1 = 0x0700;
// 图元文件中的记录与回放";
// 1;     //Metafile);
// 图形的剪裁与缩放";
// 2;     //CroppingAndScaling);
// 使用不同的插值模式控制图形缩放质量";
// 3; //UsingInterpolationMode);
// 绘制镜像图片示例";
// 4;     //RotateFlip);
// 绘制映射图片";
// 5;     //ImageSkewing);
// 立方体贴图";
// 6;     //Cubeimage);
// GDI+中处理缩略图";
// 7;     //ThumbnailImage);
// 分块显示图片";
// 8;     //Clone);
// 图片局部放大(缩小)显示";
// 9;     //Picturescale);
// 
// txt1 = "图像色彩信息的调整";
// index1 = 0x0800;
// 色彩校正的启用与禁用";
// 1;     //ImageAttributesSetNoOp);
// 设置不同的色彩调整对象";
// 2;     //SetColorMatrices);
// 使用色彩配置文件进行色彩校正";
// 3;     //SetOutputChannelColorProfile);
// 修改Gamma值进行图片输出";
// 4;     //Gammaadjust);
// 设置色彩输出通道";
// 5;     //SetOutputChannel);
// 使用关键色";
// 6;     //Colorkey);
// 阈值运用演示程序";
// 7;     //Setthreshold);
// 获取色彩校正调色板";
// 8;     //AdjustedPalette);
// 设置色彩校正的环绕模式和颜色";
// 9;     //SetWrapMode);
// 
// txt1 = "图形的编码与解码";
// index1 = 0x0900;
// 输出编码器信息";
// 1;     //ListAllImageEncoders);
// 输出编码器信息";
// 2;     //ListImageEncoder_Detail);
// 列出系统可用的解码器信息";
// 3;     //ListImageDecoder);
// 查看将位图保存为JPEG时需要设置的参数信息";
// 4;     //GetEncoderParameter);
// 查看所有的编码信息所需的参数列表";
// 5;     //GetAllEncoderParameter);
// 将BMP文件另存为PNG格式的文件";
// 6;     //menuItem17);
// 将BMP文件保存为TIF文件";
// 7;     //SaveBmp2tif);
// 使用不同的压缩质量保存JPEG文件";
// 8;     //SaveBMP2JPG);
// JPEG文件的保存与变换";
// 9;     //TransformingJPEG);
// 保存多帧图片";
// 10;    //MultipleFrameImage);
// 读取多帧图片的子图片";
// 11;    //GetImageFromMultyFrame);
// 获取图像属性列表";
// 12;    //QueryImage);
// 修改图片属性";
// 13;    //SetProp);
// 
// txt1 = "图形特技处理";
// index1 = 0x0A00;
// 淡入浅出";
// 1;     //menuItem2);
// 灰度处理与还原";
// 2;     //GrayScale);
// 底片(负片)滤镜";
// 3;     //Inverse);
// 浮雕及雕刻";
// 4;     //Emboss);
// 油画效果的制作";
// 5;     //OnCanvas);
// 木刻滤镜";
// 6;     //OnWood);
// 强光照射滤镜";
// 7;     //Flashligt);
// 柔化与锐化滤镜";
// 8;     //BlurAndSharpen);
#endif

