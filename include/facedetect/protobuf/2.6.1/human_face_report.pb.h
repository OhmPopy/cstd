// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: human_face_report.proto

#ifndef PROTOBUF_human_5fface_5freport_2eproto__INCLUDED
#define PROTOBUF_human_5fface_5freport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rongyi {
namespace face {
namespace log {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_human_5fface_5freport_2eproto();
void protobuf_AssignDesc_human_5fface_5freport_2eproto();
void protobuf_ShutdownFile_human_5fface_5freport_2eproto();

class UserProfile;
class CapturedUserFace;
class ReportID;
class UserFaceInfo;

enum UserExpression {
  UserExpressionUnknown = 0,
  Happy = 1,
  Afraifd = 2,
  Surprised = 3,
  Sad = 4,
  Angry = 5,
  Serene = 6,
  Depressed = 7,
  UserExpressionOthers = 1000
};
bool UserExpression_IsValid(int value);
const UserExpression UserExpression_MIN = UserExpressionUnknown;
const UserExpression UserExpression_MAX = UserExpressionOthers;
const int UserExpression_ARRAYSIZE = UserExpression_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserExpression_descriptor();
inline const ::std::string& UserExpression_Name(UserExpression value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserExpression_descriptor(), value);
}
inline bool UserExpression_Parse(
    const ::std::string& name, UserExpression* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserExpression>(
    UserExpression_descriptor(), name, value);
}
enum FacePosition {
  FacePositionPositive = 0,
  FacePositionSide = 1,
  FacePositionOthers = 1000
};
bool FacePosition_IsValid(int value);
const FacePosition FacePosition_MIN = FacePositionPositive;
const FacePosition FacePosition_MAX = FacePositionOthers;
const int FacePosition_ARRAYSIZE = FacePosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* FacePosition_descriptor();
inline const ::std::string& FacePosition_Name(FacePosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    FacePosition_descriptor(), value);
}
inline bool FacePosition_Parse(
    const ::std::string& name, FacePosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FacePosition>(
    FacePosition_descriptor(), name, value);
}
enum Gender {
  GENDER_UNKNOWN = 0,
  GENDER_MALE = 1,
  GENDER_FEMALE = 2
};
bool Gender_IsValid(int value);
const Gender Gender_MIN = GENDER_UNKNOWN;
const Gender Gender_MAX = GENDER_FEMALE;
const int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gender_descriptor();
inline const ::std::string& Gender_Name(Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gender_descriptor(), value);
}
inline bool Gender_Parse(
    const ::std::string& name, Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
// ===================================================================

class UserProfile : public ::google::protobuf::Message {
 public:
  UserProfile();
  virtual ~UserProfile();

  UserProfile(const UserProfile& from);

  inline UserProfile& operator=(const UserProfile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserProfile& default_instance();

  void Swap(UserProfile* other);

  // implements Message ----------------------------------------------

  UserProfile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserProfile& from);
  void MergeFrom(const UserProfile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 begin_age = 1;
  inline bool has_begin_age() const;
  inline void clear_begin_age();
  static const int kBeginAgeFieldNumber = 1;
  inline ::google::protobuf::int32 begin_age() const;
  inline void set_begin_age(::google::protobuf::int32 value);

  // optional int32 end_age = 2;
  inline bool has_end_age() const;
  inline void clear_end_age();
  static const int kEndAgeFieldNumber = 2;
  inline ::google::protobuf::int32 end_age() const;
  inline void set_end_age(::google::protobuf::int32 value);

  // optional .rongyi.face.log.Gender gender = 3;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 3;
  inline ::rongyi::face::log::Gender gender() const;
  inline void set_gender(::rongyi::face::log::Gender value);

  // optional bytes face_code = 4;
  inline bool has_face_code() const;
  inline void clear_face_code();
  static const int kFaceCodeFieldNumber = 4;
  inline const ::std::string& face_code() const;
  inline void set_face_code(const ::std::string& value);
  inline void set_face_code(const char* value);
  inline void set_face_code(const void* value, size_t size);
  inline ::std::string* mutable_face_code();
  inline ::std::string* release_face_code();
  inline void set_allocated_face_code(::std::string* face_code);

  // optional .rongyi.face.log.UserExpression expression = 5;
  inline bool has_expression() const;
  inline void clear_expression();
  static const int kExpressionFieldNumber = 5;
  inline ::rongyi::face::log::UserExpression expression() const;
  inline void set_expression(::rongyi::face::log::UserExpression value);

  // optional bool wear_glasses = 6 [default = false];
  inline bool has_wear_glasses() const;
  inline void clear_wear_glasses();
  static const int kWearGlassesFieldNumber = 6;
  inline bool wear_glasses() const;
  inline void set_wear_glasses(bool value);

  // optional double age_confidence = 1001;
  inline bool has_age_confidence() const;
  inline void clear_age_confidence();
  static const int kAgeConfidenceFieldNumber = 1001;
  inline double age_confidence() const;
  inline void set_age_confidence(double value);

  // optional double gender_confidence = 1002;
  inline bool has_gender_confidence() const;
  inline void clear_gender_confidence();
  static const int kGenderConfidenceFieldNumber = 1002;
  inline double gender_confidence() const;
  inline void set_gender_confidence(double value);

  // optional double expression_confidence = 1003;
  inline bool has_expression_confidence() const;
  inline void clear_expression_confidence();
  static const int kExpressionConfidenceFieldNumber = 1003;
  inline double expression_confidence() const;
  inline void set_expression_confidence(double value);

  // @@protoc_insertion_point(class_scope:rongyi.face.log.UserProfile)
 private:
  inline void set_has_begin_age();
  inline void clear_has_begin_age();
  inline void set_has_end_age();
  inline void clear_has_end_age();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_face_code();
  inline void clear_has_face_code();
  inline void set_has_expression();
  inline void clear_has_expression();
  inline void set_has_wear_glasses();
  inline void clear_has_wear_glasses();
  inline void set_has_age_confidence();
  inline void clear_has_age_confidence();
  inline void set_has_gender_confidence();
  inline void clear_has_gender_confidence();
  inline void set_has_expression_confidence();
  inline void clear_has_expression_confidence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 begin_age_;
  ::google::protobuf::int32 end_age_;
  ::std::string* face_code_;
  int gender_;
  int expression_;
  double age_confidence_;
  double gender_confidence_;
  double expression_confidence_;
  bool wear_glasses_;
  friend void  protobuf_AddDesc_human_5fface_5freport_2eproto();
  friend void protobuf_AssignDesc_human_5fface_5freport_2eproto();
  friend void protobuf_ShutdownFile_human_5fface_5freport_2eproto();

  void InitAsDefaultInstance();
  static UserProfile* default_instance_;
};
// -------------------------------------------------------------------

class CapturedUserFace : public ::google::protobuf::Message {
 public:
  CapturedUserFace();
  virtual ~CapturedUserFace();

  CapturedUserFace(const CapturedUserFace& from);

  inline CapturedUserFace& operator=(const CapturedUserFace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CapturedUserFace& default_instance();

  void Swap(CapturedUserFace* other);

  // implements Message ----------------------------------------------

  CapturedUserFace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CapturedUserFace& from);
  void MergeFrom(const CapturedUserFace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rongyi.face.log.UserProfile profile = 1;
  inline bool has_profile() const;
  inline void clear_profile();
  static const int kProfileFieldNumber = 1;
  inline const ::rongyi::face::log::UserProfile& profile() const;
  inline ::rongyi::face::log::UserProfile* mutable_profile();
  inline ::rongyi::face::log::UserProfile* release_profile();
  inline void set_allocated_profile(::rongyi::face::log::UserProfile* profile);

  // optional int64 enter_time = 2;
  inline bool has_enter_time() const;
  inline void clear_enter_time();
  static const int kEnterTimeFieldNumber = 2;
  inline ::google::protobuf::int64 enter_time() const;
  inline void set_enter_time(::google::protobuf::int64 value);

  // optional int64 leave_time = 3;
  inline bool has_leave_time() const;
  inline void clear_leave_time();
  static const int kLeaveTimeFieldNumber = 3;
  inline ::google::protobuf::int64 leave_time() const;
  inline void set_leave_time(::google::protobuf::int64 value);

  // optional .rongyi.face.log.FacePosition position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline ::rongyi::face::log::FacePosition position() const;
  inline void set_position(::rongyi::face::log::FacePosition value);

  // optional bytes face_image = 5;
  inline bool has_face_image() const;
  inline void clear_face_image();
  static const int kFaceImageFieldNumber = 5;
  inline const ::std::string& face_image() const;
  inline void set_face_image(const ::std::string& value);
  inline void set_face_image(const char* value);
  inline void set_face_image(const void* value, size_t size);
  inline ::std::string* mutable_face_image();
  inline ::std::string* release_face_image();
  inline void set_allocated_face_image(::std::string* face_image);

  // optional bytes image_mime_type = 6;
  inline bool has_image_mime_type() const;
  inline void clear_image_mime_type();
  static const int kImageMimeTypeFieldNumber = 6;
  inline const ::std::string& image_mime_type() const;
  inline void set_image_mime_type(const ::std::string& value);
  inline void set_image_mime_type(const char* value);
  inline void set_image_mime_type(const void* value, size_t size);
  inline ::std::string* mutable_image_mime_type();
  inline ::std::string* release_image_mime_type();
  inline void set_allocated_image_mime_type(::std::string* image_mime_type);

  // @@protoc_insertion_point(class_scope:rongyi.face.log.CapturedUserFace)
 private:
  inline void set_has_profile();
  inline void clear_has_profile();
  inline void set_has_enter_time();
  inline void clear_has_enter_time();
  inline void set_has_leave_time();
  inline void clear_has_leave_time();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_face_image();
  inline void clear_has_face_image();
  inline void set_has_image_mime_type();
  inline void clear_has_image_mime_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::rongyi::face::log::UserProfile* profile_;
  ::google::protobuf::int64 enter_time_;
  ::google::protobuf::int64 leave_time_;
  ::std::string* face_image_;
  ::std::string* image_mime_type_;
  int position_;
  friend void  protobuf_AddDesc_human_5fface_5freport_2eproto();
  friend void protobuf_AssignDesc_human_5fface_5freport_2eproto();
  friend void protobuf_ShutdownFile_human_5fface_5freport_2eproto();

  void InitAsDefaultInstance();
  static CapturedUserFace* default_instance_;
};
// -------------------------------------------------------------------

class ReportID : public ::google::protobuf::Message {
 public:
  ReportID();
  virtual ~ReportID();

  ReportID(const ReportID& from);

  inline ReportID& operator=(const ReportID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportID& default_instance();

  void Swap(ReportID* other);

  // implements Message ----------------------------------------------

  ReportID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportID& from);
  void MergeFrom(const ReportID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes terminal_id = 1;
  inline bool has_terminal_id() const;
  inline void clear_terminal_id();
  static const int kTerminalIdFieldNumber = 1;
  inline const ::std::string& terminal_id() const;
  inline void set_terminal_id(const ::std::string& value);
  inline void set_terminal_id(const char* value);
  inline void set_terminal_id(const void* value, size_t size);
  inline ::std::string* mutable_terminal_id();
  inline ::std::string* release_terminal_id();
  inline void set_allocated_terminal_id(::std::string* terminal_id);

  // optional int64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional int64 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int64 index() const;
  inline void set_index(::google::protobuf::int64 value);

  // optional bytes terminal_mac = 4;
  inline bool has_terminal_mac() const;
  inline void clear_terminal_mac();
  static const int kTerminalMacFieldNumber = 4;
  inline const ::std::string& terminal_mac() const;
  inline void set_terminal_mac(const ::std::string& value);
  inline void set_terminal_mac(const char* value);
  inline void set_terminal_mac(const void* value, size_t size);
  inline ::std::string* mutable_terminal_mac();
  inline ::std::string* release_terminal_mac();
  inline void set_allocated_terminal_mac(::std::string* terminal_mac);

  // @@protoc_insertion_point(class_scope:rongyi.face.log.ReportID)
 private:
  inline void set_has_terminal_id();
  inline void clear_has_terminal_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_terminal_mac();
  inline void clear_has_terminal_mac();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* terminal_id_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 index_;
  ::std::string* terminal_mac_;
  friend void  protobuf_AddDesc_human_5fface_5freport_2eproto();
  friend void protobuf_AssignDesc_human_5fface_5freport_2eproto();
  friend void protobuf_ShutdownFile_human_5fface_5freport_2eproto();

  void InitAsDefaultInstance();
  static ReportID* default_instance_;
};
// -------------------------------------------------------------------

class UserFaceInfo : public ::google::protobuf::Message {
 public:
  UserFaceInfo();
  virtual ~UserFaceInfo();

  UserFaceInfo(const UserFaceInfo& from);

  inline UserFaceInfo& operator=(const UserFaceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFaceInfo& default_instance();

  void Swap(UserFaceInfo* other);

  // implements Message ----------------------------------------------

  UserFaceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserFaceInfo& from);
  void MergeFrom(const UserFaceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional bytes mall_id = 3;
  inline bool has_mall_id() const;
  inline void clear_mall_id();
  static const int kMallIdFieldNumber = 3;
  inline const ::std::string& mall_id() const;
  inline void set_mall_id(const ::std::string& value);
  inline void set_mall_id(const char* value);
  inline void set_mall_id(const void* value, size_t size);
  inline ::std::string* mutable_mall_id();
  inline ::std::string* release_mall_id();
  inline void set_allocated_mall_id(::std::string* mall_id);

  // optional bytes terminal_id = 4;
  inline bool has_terminal_id() const;
  inline void clear_terminal_id();
  static const int kTerminalIdFieldNumber = 4;
  inline const ::std::string& terminal_id() const;
  inline void set_terminal_id(const ::std::string& value);
  inline void set_terminal_id(const char* value);
  inline void set_terminal_id(const void* value, size_t size);
  inline ::std::string* mutable_terminal_id();
  inline ::std::string* release_terminal_id();
  inline void set_allocated_terminal_id(::std::string* terminal_id);

  // repeated .rongyi.face.log.CapturedUserFace face = 5;
  inline int face_size() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 5;
  inline const ::rongyi::face::log::CapturedUserFace& face(int index) const;
  inline ::rongyi::face::log::CapturedUserFace* mutable_face(int index);
  inline ::rongyi::face::log::CapturedUserFace* add_face();
  inline const ::google::protobuf::RepeatedPtrField< ::rongyi::face::log::CapturedUserFace >&
      face() const;
  inline ::google::protobuf::RepeatedPtrField< ::rongyi::face::log::CapturedUserFace >*
      mutable_face();

  // optional bytes terminal_mac = 6;
  inline bool has_terminal_mac() const;
  inline void clear_terminal_mac();
  static const int kTerminalMacFieldNumber = 6;
  inline const ::std::string& terminal_mac() const;
  inline void set_terminal_mac(const ::std::string& value);
  inline void set_terminal_mac(const char* value);
  inline void set_terminal_mac(const void* value, size_t size);
  inline ::std::string* mutable_terminal_mac();
  inline ::std::string* release_terminal_mac();
  inline void set_allocated_terminal_mac(::std::string* terminal_mac);

  // @@protoc_insertion_point(class_scope:rongyi.face.log.UserFaceInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_mall_id();
  inline void clear_has_mall_id();
  inline void set_has_terminal_id();
  inline void clear_has_terminal_id();
  inline void set_has_terminal_mac();
  inline void clear_has_terminal_mac();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* mall_id_;
  ::std::string* terminal_id_;
  ::google::protobuf::RepeatedPtrField< ::rongyi::face::log::CapturedUserFace > face_;
  ::std::string* terminal_mac_;
  friend void  protobuf_AddDesc_human_5fface_5freport_2eproto();
  friend void protobuf_AssignDesc_human_5fface_5freport_2eproto();
  friend void protobuf_ShutdownFile_human_5fface_5freport_2eproto();

  void InitAsDefaultInstance();
  static UserFaceInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// UserProfile

// optional int32 begin_age = 1;
inline bool UserProfile::has_begin_age() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserProfile::set_has_begin_age() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserProfile::clear_has_begin_age() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserProfile::clear_begin_age() {
  begin_age_ = 0;
  clear_has_begin_age();
}
inline ::google::protobuf::int32 UserProfile::begin_age() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserProfile.begin_age)
  return begin_age_;
}
inline void UserProfile::set_begin_age(::google::protobuf::int32 value) {
  set_has_begin_age();
  begin_age_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserProfile.begin_age)
}

// optional int32 end_age = 2;
inline bool UserProfile::has_end_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserProfile::set_has_end_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserProfile::clear_has_end_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserProfile::clear_end_age() {
  end_age_ = 0;
  clear_has_end_age();
}
inline ::google::protobuf::int32 UserProfile::end_age() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserProfile.end_age)
  return end_age_;
}
inline void UserProfile::set_end_age(::google::protobuf::int32 value) {
  set_has_end_age();
  end_age_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserProfile.end_age)
}

// optional .rongyi.face.log.Gender gender = 3;
inline bool UserProfile::has_gender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserProfile::set_has_gender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserProfile::clear_has_gender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserProfile::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::rongyi::face::log::Gender UserProfile::gender() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserProfile.gender)
  return static_cast< ::rongyi::face::log::Gender >(gender_);
}
inline void UserProfile::set_gender(::rongyi::face::log::Gender value) {
  assert(::rongyi::face::log::Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserProfile.gender)
}

// optional bytes face_code = 4;
inline bool UserProfile::has_face_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserProfile::set_has_face_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserProfile::clear_has_face_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserProfile::clear_face_code() {
  if (face_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    face_code_->clear();
  }
  clear_has_face_code();
}
inline const ::std::string& UserProfile::face_code() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserProfile.face_code)
  return *face_code_;
}
inline void UserProfile::set_face_code(const ::std::string& value) {
  set_has_face_code();
  if (face_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    face_code_ = new ::std::string;
  }
  face_code_->assign(value);
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserProfile.face_code)
}
inline void UserProfile::set_face_code(const char* value) {
  set_has_face_code();
  if (face_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    face_code_ = new ::std::string;
  }
  face_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:rongyi.face.log.UserProfile.face_code)
}
inline void UserProfile::set_face_code(const void* value, size_t size) {
  set_has_face_code();
  if (face_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    face_code_ = new ::std::string;
  }
  face_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rongyi.face.log.UserProfile.face_code)
}
inline ::std::string* UserProfile::mutable_face_code() {
  set_has_face_code();
  if (face_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    face_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rongyi.face.log.UserProfile.face_code)
  return face_code_;
}
inline ::std::string* UserProfile::release_face_code() {
  clear_has_face_code();
  if (face_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = face_code_;
    face_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserProfile::set_allocated_face_code(::std::string* face_code) {
  if (face_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete face_code_;
  }
  if (face_code) {
    set_has_face_code();
    face_code_ = face_code;
  } else {
    clear_has_face_code();
    face_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rongyi.face.log.UserProfile.face_code)
}

// optional .rongyi.face.log.UserExpression expression = 5;
inline bool UserProfile::has_expression() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserProfile::set_has_expression() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserProfile::clear_has_expression() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserProfile::clear_expression() {
  expression_ = 0;
  clear_has_expression();
}
inline ::rongyi::face::log::UserExpression UserProfile::expression() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserProfile.expression)
  return static_cast< ::rongyi::face::log::UserExpression >(expression_);
}
inline void UserProfile::set_expression(::rongyi::face::log::UserExpression value) {
  assert(::rongyi::face::log::UserExpression_IsValid(value));
  set_has_expression();
  expression_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserProfile.expression)
}

// optional bool wear_glasses = 6 [default = false];
inline bool UserProfile::has_wear_glasses() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserProfile::set_has_wear_glasses() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserProfile::clear_has_wear_glasses() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserProfile::clear_wear_glasses() {
  wear_glasses_ = false;
  clear_has_wear_glasses();
}
inline bool UserProfile::wear_glasses() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserProfile.wear_glasses)
  return wear_glasses_;
}
inline void UserProfile::set_wear_glasses(bool value) {
  set_has_wear_glasses();
  wear_glasses_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserProfile.wear_glasses)
}

// optional double age_confidence = 1001;
inline bool UserProfile::has_age_confidence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserProfile::set_has_age_confidence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserProfile::clear_has_age_confidence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserProfile::clear_age_confidence() {
  age_confidence_ = 0;
  clear_has_age_confidence();
}
inline double UserProfile::age_confidence() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserProfile.age_confidence)
  return age_confidence_;
}
inline void UserProfile::set_age_confidence(double value) {
  set_has_age_confidence();
  age_confidence_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserProfile.age_confidence)
}

// optional double gender_confidence = 1002;
inline bool UserProfile::has_gender_confidence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserProfile::set_has_gender_confidence() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserProfile::clear_has_gender_confidence() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserProfile::clear_gender_confidence() {
  gender_confidence_ = 0;
  clear_has_gender_confidence();
}
inline double UserProfile::gender_confidence() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserProfile.gender_confidence)
  return gender_confidence_;
}
inline void UserProfile::set_gender_confidence(double value) {
  set_has_gender_confidence();
  gender_confidence_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserProfile.gender_confidence)
}

// optional double expression_confidence = 1003;
inline bool UserProfile::has_expression_confidence() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserProfile::set_has_expression_confidence() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserProfile::clear_has_expression_confidence() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserProfile::clear_expression_confidence() {
  expression_confidence_ = 0;
  clear_has_expression_confidence();
}
inline double UserProfile::expression_confidence() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserProfile.expression_confidence)
  return expression_confidence_;
}
inline void UserProfile::set_expression_confidence(double value) {
  set_has_expression_confidence();
  expression_confidence_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserProfile.expression_confidence)
}

// -------------------------------------------------------------------

// CapturedUserFace

// optional .rongyi.face.log.UserProfile profile = 1;
inline bool CapturedUserFace::has_profile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CapturedUserFace::set_has_profile() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CapturedUserFace::clear_has_profile() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CapturedUserFace::clear_profile() {
  if (profile_ != NULL) profile_->::rongyi::face::log::UserProfile::Clear();
  clear_has_profile();
}
inline const ::rongyi::face::log::UserProfile& CapturedUserFace::profile() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.CapturedUserFace.profile)
  return profile_ != NULL ? *profile_ : *default_instance_->profile_;
}
inline ::rongyi::face::log::UserProfile* CapturedUserFace::mutable_profile() {
  set_has_profile();
  if (profile_ == NULL) profile_ = new ::rongyi::face::log::UserProfile;
  // @@protoc_insertion_point(field_mutable:rongyi.face.log.CapturedUserFace.profile)
  return profile_;
}
inline ::rongyi::face::log::UserProfile* CapturedUserFace::release_profile() {
  clear_has_profile();
  ::rongyi::face::log::UserProfile* temp = profile_;
  profile_ = NULL;
  return temp;
}
inline void CapturedUserFace::set_allocated_profile(::rongyi::face::log::UserProfile* profile) {
  delete profile_;
  profile_ = profile;
  if (profile) {
    set_has_profile();
  } else {
    clear_has_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:rongyi.face.log.CapturedUserFace.profile)
}

// optional int64 enter_time = 2;
inline bool CapturedUserFace::has_enter_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CapturedUserFace::set_has_enter_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CapturedUserFace::clear_has_enter_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CapturedUserFace::clear_enter_time() {
  enter_time_ = GOOGLE_LONGLONG(0);
  clear_has_enter_time();
}
inline ::google::protobuf::int64 CapturedUserFace::enter_time() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.CapturedUserFace.enter_time)
  return enter_time_;
}
inline void CapturedUserFace::set_enter_time(::google::protobuf::int64 value) {
  set_has_enter_time();
  enter_time_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.CapturedUserFace.enter_time)
}

// optional int64 leave_time = 3;
inline bool CapturedUserFace::has_leave_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CapturedUserFace::set_has_leave_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CapturedUserFace::clear_has_leave_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CapturedUserFace::clear_leave_time() {
  leave_time_ = GOOGLE_LONGLONG(0);
  clear_has_leave_time();
}
inline ::google::protobuf::int64 CapturedUserFace::leave_time() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.CapturedUserFace.leave_time)
  return leave_time_;
}
inline void CapturedUserFace::set_leave_time(::google::protobuf::int64 value) {
  set_has_leave_time();
  leave_time_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.CapturedUserFace.leave_time)
}

// optional .rongyi.face.log.FacePosition position = 4;
inline bool CapturedUserFace::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CapturedUserFace::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CapturedUserFace::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CapturedUserFace::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::rongyi::face::log::FacePosition CapturedUserFace::position() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.CapturedUserFace.position)
  return static_cast< ::rongyi::face::log::FacePosition >(position_);
}
inline void CapturedUserFace::set_position(::rongyi::face::log::FacePosition value) {
  assert(::rongyi::face::log::FacePosition_IsValid(value));
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.CapturedUserFace.position)
}

// optional bytes face_image = 5;
inline bool CapturedUserFace::has_face_image() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CapturedUserFace::set_has_face_image() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CapturedUserFace::clear_has_face_image() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CapturedUserFace::clear_face_image() {
  if (face_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    face_image_->clear();
  }
  clear_has_face_image();
}
inline const ::std::string& CapturedUserFace::face_image() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.CapturedUserFace.face_image)
  return *face_image_;
}
inline void CapturedUserFace::set_face_image(const ::std::string& value) {
  set_has_face_image();
  if (face_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    face_image_ = new ::std::string;
  }
  face_image_->assign(value);
  // @@protoc_insertion_point(field_set:rongyi.face.log.CapturedUserFace.face_image)
}
inline void CapturedUserFace::set_face_image(const char* value) {
  set_has_face_image();
  if (face_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    face_image_ = new ::std::string;
  }
  face_image_->assign(value);
  // @@protoc_insertion_point(field_set_char:rongyi.face.log.CapturedUserFace.face_image)
}
inline void CapturedUserFace::set_face_image(const void* value, size_t size) {
  set_has_face_image();
  if (face_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    face_image_ = new ::std::string;
  }
  face_image_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rongyi.face.log.CapturedUserFace.face_image)
}
inline ::std::string* CapturedUserFace::mutable_face_image() {
  set_has_face_image();
  if (face_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    face_image_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rongyi.face.log.CapturedUserFace.face_image)
  return face_image_;
}
inline ::std::string* CapturedUserFace::release_face_image() {
  clear_has_face_image();
  if (face_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = face_image_;
    face_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CapturedUserFace::set_allocated_face_image(::std::string* face_image) {
  if (face_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete face_image_;
  }
  if (face_image) {
    set_has_face_image();
    face_image_ = face_image;
  } else {
    clear_has_face_image();
    face_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rongyi.face.log.CapturedUserFace.face_image)
}

// optional bytes image_mime_type = 6;
inline bool CapturedUserFace::has_image_mime_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CapturedUserFace::set_has_image_mime_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CapturedUserFace::clear_has_image_mime_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CapturedUserFace::clear_image_mime_type() {
  if (image_mime_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_mime_type_->clear();
  }
  clear_has_image_mime_type();
}
inline const ::std::string& CapturedUserFace::image_mime_type() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.CapturedUserFace.image_mime_type)
  return *image_mime_type_;
}
inline void CapturedUserFace::set_image_mime_type(const ::std::string& value) {
  set_has_image_mime_type();
  if (image_mime_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_mime_type_ = new ::std::string;
  }
  image_mime_type_->assign(value);
  // @@protoc_insertion_point(field_set:rongyi.face.log.CapturedUserFace.image_mime_type)
}
inline void CapturedUserFace::set_image_mime_type(const char* value) {
  set_has_image_mime_type();
  if (image_mime_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_mime_type_ = new ::std::string;
  }
  image_mime_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:rongyi.face.log.CapturedUserFace.image_mime_type)
}
inline void CapturedUserFace::set_image_mime_type(const void* value, size_t size) {
  set_has_image_mime_type();
  if (image_mime_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_mime_type_ = new ::std::string;
  }
  image_mime_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rongyi.face.log.CapturedUserFace.image_mime_type)
}
inline ::std::string* CapturedUserFace::mutable_image_mime_type() {
  set_has_image_mime_type();
  if (image_mime_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_mime_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rongyi.face.log.CapturedUserFace.image_mime_type)
  return image_mime_type_;
}
inline ::std::string* CapturedUserFace::release_image_mime_type() {
  clear_has_image_mime_type();
  if (image_mime_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_mime_type_;
    image_mime_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CapturedUserFace::set_allocated_image_mime_type(::std::string* image_mime_type) {
  if (image_mime_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_mime_type_;
  }
  if (image_mime_type) {
    set_has_image_mime_type();
    image_mime_type_ = image_mime_type;
  } else {
    clear_has_image_mime_type();
    image_mime_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rongyi.face.log.CapturedUserFace.image_mime_type)
}

// -------------------------------------------------------------------

// ReportID

// optional bytes terminal_id = 1;
inline bool ReportID::has_terminal_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportID::set_has_terminal_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportID::clear_has_terminal_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportID::clear_terminal_id() {
  if (terminal_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_id_->clear();
  }
  clear_has_terminal_id();
}
inline const ::std::string& ReportID::terminal_id() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.ReportID.terminal_id)
  return *terminal_id_;
}
inline void ReportID::set_terminal_id(const ::std::string& value) {
  set_has_terminal_id();
  if (terminal_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_id_ = new ::std::string;
  }
  terminal_id_->assign(value);
  // @@protoc_insertion_point(field_set:rongyi.face.log.ReportID.terminal_id)
}
inline void ReportID::set_terminal_id(const char* value) {
  set_has_terminal_id();
  if (terminal_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_id_ = new ::std::string;
  }
  terminal_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:rongyi.face.log.ReportID.terminal_id)
}
inline void ReportID::set_terminal_id(const void* value, size_t size) {
  set_has_terminal_id();
  if (terminal_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_id_ = new ::std::string;
  }
  terminal_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rongyi.face.log.ReportID.terminal_id)
}
inline ::std::string* ReportID::mutable_terminal_id() {
  set_has_terminal_id();
  if (terminal_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rongyi.face.log.ReportID.terminal_id)
  return terminal_id_;
}
inline ::std::string* ReportID::release_terminal_id() {
  clear_has_terminal_id();
  if (terminal_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = terminal_id_;
    terminal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportID::set_allocated_terminal_id(::std::string* terminal_id) {
  if (terminal_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete terminal_id_;
  }
  if (terminal_id) {
    set_has_terminal_id();
    terminal_id_ = terminal_id;
  } else {
    clear_has_terminal_id();
    terminal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rongyi.face.log.ReportID.terminal_id)
}

// optional int64 timestamp = 2;
inline bool ReportID::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportID::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportID::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportID::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 ReportID::timestamp() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.ReportID.timestamp)
  return timestamp_;
}
inline void ReportID::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.ReportID.timestamp)
}

// optional int64 index = 3;
inline bool ReportID::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportID::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportID::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportID::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::int64 ReportID::index() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.ReportID.index)
  return index_;
}
inline void ReportID::set_index(::google::protobuf::int64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.ReportID.index)
}

// optional bytes terminal_mac = 4;
inline bool ReportID::has_terminal_mac() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportID::set_has_terminal_mac() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportID::clear_has_terminal_mac() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportID::clear_terminal_mac() {
  if (terminal_mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_mac_->clear();
  }
  clear_has_terminal_mac();
}
inline const ::std::string& ReportID::terminal_mac() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.ReportID.terminal_mac)
  return *terminal_mac_;
}
inline void ReportID::set_terminal_mac(const ::std::string& value) {
  set_has_terminal_mac();
  if (terminal_mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_mac_ = new ::std::string;
  }
  terminal_mac_->assign(value);
  // @@protoc_insertion_point(field_set:rongyi.face.log.ReportID.terminal_mac)
}
inline void ReportID::set_terminal_mac(const char* value) {
  set_has_terminal_mac();
  if (terminal_mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_mac_ = new ::std::string;
  }
  terminal_mac_->assign(value);
  // @@protoc_insertion_point(field_set_char:rongyi.face.log.ReportID.terminal_mac)
}
inline void ReportID::set_terminal_mac(const void* value, size_t size) {
  set_has_terminal_mac();
  if (terminal_mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_mac_ = new ::std::string;
  }
  terminal_mac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rongyi.face.log.ReportID.terminal_mac)
}
inline ::std::string* ReportID::mutable_terminal_mac() {
  set_has_terminal_mac();
  if (terminal_mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_mac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rongyi.face.log.ReportID.terminal_mac)
  return terminal_mac_;
}
inline ::std::string* ReportID::release_terminal_mac() {
  clear_has_terminal_mac();
  if (terminal_mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = terminal_mac_;
    terminal_mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportID::set_allocated_terminal_mac(::std::string* terminal_mac) {
  if (terminal_mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete terminal_mac_;
  }
  if (terminal_mac) {
    set_has_terminal_mac();
    terminal_mac_ = terminal_mac;
  } else {
    clear_has_terminal_mac();
    terminal_mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rongyi.face.log.ReportID.terminal_mac)
}

// -------------------------------------------------------------------

// UserFaceInfo

// required bytes id = 1;
inline bool UserFaceInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFaceInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFaceInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFaceInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& UserFaceInfo::id() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserFaceInfo.id)
  return *id_;
}
inline void UserFaceInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserFaceInfo.id)
}
inline void UserFaceInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:rongyi.face.log.UserFaceInfo.id)
}
inline void UserFaceInfo::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rongyi.face.log.UserFaceInfo.id)
}
inline ::std::string* UserFaceInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rongyi.face.log.UserFaceInfo.id)
  return id_;
}
inline ::std::string* UserFaceInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserFaceInfo::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rongyi.face.log.UserFaceInfo.id)
}

// optional int64 timestamp = 2;
inline bool UserFaceInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserFaceInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserFaceInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserFaceInfo::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserFaceInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserFaceInfo.timestamp)
  return timestamp_;
}
inline void UserFaceInfo::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserFaceInfo.timestamp)
}

// optional bytes mall_id = 3;
inline bool UserFaceInfo::has_mall_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserFaceInfo::set_has_mall_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserFaceInfo::clear_has_mall_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserFaceInfo::clear_mall_id() {
  if (mall_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mall_id_->clear();
  }
  clear_has_mall_id();
}
inline const ::std::string& UserFaceInfo::mall_id() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserFaceInfo.mall_id)
  return *mall_id_;
}
inline void UserFaceInfo::set_mall_id(const ::std::string& value) {
  set_has_mall_id();
  if (mall_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mall_id_ = new ::std::string;
  }
  mall_id_->assign(value);
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserFaceInfo.mall_id)
}
inline void UserFaceInfo::set_mall_id(const char* value) {
  set_has_mall_id();
  if (mall_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mall_id_ = new ::std::string;
  }
  mall_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:rongyi.face.log.UserFaceInfo.mall_id)
}
inline void UserFaceInfo::set_mall_id(const void* value, size_t size) {
  set_has_mall_id();
  if (mall_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mall_id_ = new ::std::string;
  }
  mall_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rongyi.face.log.UserFaceInfo.mall_id)
}
inline ::std::string* UserFaceInfo::mutable_mall_id() {
  set_has_mall_id();
  if (mall_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mall_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rongyi.face.log.UserFaceInfo.mall_id)
  return mall_id_;
}
inline ::std::string* UserFaceInfo::release_mall_id() {
  clear_has_mall_id();
  if (mall_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mall_id_;
    mall_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserFaceInfo::set_allocated_mall_id(::std::string* mall_id) {
  if (mall_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mall_id_;
  }
  if (mall_id) {
    set_has_mall_id();
    mall_id_ = mall_id;
  } else {
    clear_has_mall_id();
    mall_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rongyi.face.log.UserFaceInfo.mall_id)
}

// optional bytes terminal_id = 4;
inline bool UserFaceInfo::has_terminal_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserFaceInfo::set_has_terminal_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserFaceInfo::clear_has_terminal_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserFaceInfo::clear_terminal_id() {
  if (terminal_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_id_->clear();
  }
  clear_has_terminal_id();
}
inline const ::std::string& UserFaceInfo::terminal_id() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserFaceInfo.terminal_id)
  return *terminal_id_;
}
inline void UserFaceInfo::set_terminal_id(const ::std::string& value) {
  set_has_terminal_id();
  if (terminal_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_id_ = new ::std::string;
  }
  terminal_id_->assign(value);
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserFaceInfo.terminal_id)
}
inline void UserFaceInfo::set_terminal_id(const char* value) {
  set_has_terminal_id();
  if (terminal_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_id_ = new ::std::string;
  }
  terminal_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:rongyi.face.log.UserFaceInfo.terminal_id)
}
inline void UserFaceInfo::set_terminal_id(const void* value, size_t size) {
  set_has_terminal_id();
  if (terminal_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_id_ = new ::std::string;
  }
  terminal_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rongyi.face.log.UserFaceInfo.terminal_id)
}
inline ::std::string* UserFaceInfo::mutable_terminal_id() {
  set_has_terminal_id();
  if (terminal_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rongyi.face.log.UserFaceInfo.terminal_id)
  return terminal_id_;
}
inline ::std::string* UserFaceInfo::release_terminal_id() {
  clear_has_terminal_id();
  if (terminal_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = terminal_id_;
    terminal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserFaceInfo::set_allocated_terminal_id(::std::string* terminal_id) {
  if (terminal_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete terminal_id_;
  }
  if (terminal_id) {
    set_has_terminal_id();
    terminal_id_ = terminal_id;
  } else {
    clear_has_terminal_id();
    terminal_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rongyi.face.log.UserFaceInfo.terminal_id)
}

// repeated .rongyi.face.log.CapturedUserFace face = 5;
inline int UserFaceInfo::face_size() const {
  return face_.size();
}
inline void UserFaceInfo::clear_face() {
  face_.Clear();
}
inline const ::rongyi::face::log::CapturedUserFace& UserFaceInfo::face(int index) const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserFaceInfo.face)
  return face_.Get(index);
}
inline ::rongyi::face::log::CapturedUserFace* UserFaceInfo::mutable_face(int index) {
  // @@protoc_insertion_point(field_mutable:rongyi.face.log.UserFaceInfo.face)
  return face_.Mutable(index);
}
inline ::rongyi::face::log::CapturedUserFace* UserFaceInfo::add_face() {
  // @@protoc_insertion_point(field_add:rongyi.face.log.UserFaceInfo.face)
  return face_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rongyi::face::log::CapturedUserFace >&
UserFaceInfo::face() const {
  // @@protoc_insertion_point(field_list:rongyi.face.log.UserFaceInfo.face)
  return face_;
}
inline ::google::protobuf::RepeatedPtrField< ::rongyi::face::log::CapturedUserFace >*
UserFaceInfo::mutable_face() {
  // @@protoc_insertion_point(field_mutable_list:rongyi.face.log.UserFaceInfo.face)
  return &face_;
}

// optional bytes terminal_mac = 6;
inline bool UserFaceInfo::has_terminal_mac() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserFaceInfo::set_has_terminal_mac() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserFaceInfo::clear_has_terminal_mac() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserFaceInfo::clear_terminal_mac() {
  if (terminal_mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_mac_->clear();
  }
  clear_has_terminal_mac();
}
inline const ::std::string& UserFaceInfo::terminal_mac() const {
  // @@protoc_insertion_point(field_get:rongyi.face.log.UserFaceInfo.terminal_mac)
  return *terminal_mac_;
}
inline void UserFaceInfo::set_terminal_mac(const ::std::string& value) {
  set_has_terminal_mac();
  if (terminal_mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_mac_ = new ::std::string;
  }
  terminal_mac_->assign(value);
  // @@protoc_insertion_point(field_set:rongyi.face.log.UserFaceInfo.terminal_mac)
}
inline void UserFaceInfo::set_terminal_mac(const char* value) {
  set_has_terminal_mac();
  if (terminal_mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_mac_ = new ::std::string;
  }
  terminal_mac_->assign(value);
  // @@protoc_insertion_point(field_set_char:rongyi.face.log.UserFaceInfo.terminal_mac)
}
inline void UserFaceInfo::set_terminal_mac(const void* value, size_t size) {
  set_has_terminal_mac();
  if (terminal_mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_mac_ = new ::std::string;
  }
  terminal_mac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rongyi.face.log.UserFaceInfo.terminal_mac)
}
inline ::std::string* UserFaceInfo::mutable_terminal_mac() {
  set_has_terminal_mac();
  if (terminal_mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    terminal_mac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rongyi.face.log.UserFaceInfo.terminal_mac)
  return terminal_mac_;
}
inline ::std::string* UserFaceInfo::release_terminal_mac() {
  clear_has_terminal_mac();
  if (terminal_mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = terminal_mac_;
    terminal_mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserFaceInfo::set_allocated_terminal_mac(::std::string* terminal_mac) {
  if (terminal_mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete terminal_mac_;
  }
  if (terminal_mac) {
    set_has_terminal_mac();
    terminal_mac_ = terminal_mac;
  } else {
    clear_has_terminal_mac();
    terminal_mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rongyi.face.log.UserFaceInfo.terminal_mac)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace log
}  // namespace face
}  // namespace rongyi

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rongyi::face::log::UserExpression> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rongyi::face::log::UserExpression>() {
  return ::rongyi::face::log::UserExpression_descriptor();
}
template <> struct is_proto_enum< ::rongyi::face::log::FacePosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rongyi::face::log::FacePosition>() {
  return ::rongyi::face::log::FacePosition_descriptor();
}
template <> struct is_proto_enum< ::rongyi::face::log::Gender> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rongyi::face::log::Gender>() {
  return ::rongyi::face::log::Gender_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_human_5fface_5freport_2eproto__INCLUDED
