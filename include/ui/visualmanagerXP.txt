
//
// Construction/Destruction
//
CBCGPVisualManagerXP::CBCGPVisualManagerXP(BOOL bIsTemporary) :
  CBCGPVisualManager(bIsTemporary)
{
  s->m_bConnectMenuToParent = TRUE;
  s->m_nVertMargin = 4;
  s->m_nHorzMargin = 4;
  s->m_nGroupVertOffset = 4;
  s->m_nGroupCaptionHeight = 0;
  s->m_nGroupCaptionHorzOffset = 0;
  s->m_nGroupCaptionVertOffset = 0;
  s->m_nTasksHorzOffset = 12;
  s->m_nTasksIconHorzOffset = 5;
  s->m_nTasksIconVertOffset = 4;
  s->m_bActiveCaptions = FALSE;
  s->m_bMenuFlatLook = TRUE;
  s->m_bShadowHighlightedImage = TRUE;
  s->m_bEmbossDisabledImage = FALSE;
  s->m_bFadeInactiveImage = TRUE;
  s->m_bLook2000 = TRUE;
  s->m_nMenuShadowDepth = 4;
  s->m_nMenuBorderSize = 1;
  s->m_bShdowDroppedDownMenuButton = TRUE;
  s->m_bOfficeXPStyleMenus = TRUE;
  s->m_bDrawLastTabLine = TRUE;
  globalData.UpdateSysColors();
  OnUpdateSystemColors();
}
void CBCGPVisualManagerXP::OnUpdateSystemColors()
{
  CBCGPVisualManager::OnUpdateSystemColors();
  s->m_clrBtnBkgnd.DeleteObject();
  s->m_clrMenuRarelyUsed.DeleteObject();
  s->m_clrMenuLight.DeleteObject();
  s->m_clrHighlight.DeleteObject();
  s->m_clrHighlightDn.DeleteObject();
  s->m_clrHighlightChecked.DeleteObject();
  s->m_clrFloatToolBarBorder.DeleteObject();
  s->m_penSeparator.DeleteObject();
  s->m_clrTabBack.DeleteObject();
  COLORREF clrTabBack;
  COLORREF clrFloatToolBarBorder;

  if (globalData.m_nBitsPerPixel > 8 && !globalData.IsHighContastMode()) {
    COLORREF clrWindow = GetWindowColor();
    COLORREF clrFace = globalData.clrBtnFace;
    s->m_clrMenuLight = _RGB(
        (219 * GetRValue(clrWindow) + 36 * GetRValue(clrFace)) / 255,
        (219 * GetGValue(clrWindow) + 36 * GetGValue(clrFace)) / 255,
        (219 * GetBValue(clrWindow) + 36 * GetBValue(clrFace)) / 255);
    double H, S, L;
    RGBtoHSL(clrFace, &H, &S, &L);
    double S1;
    double L1;

    if (S < 0.1) {
      L1 = MIN(1., L + (1. - L) * .5);
      S1 = S == 0 ? 0 : MIN(1., S + .1);
    }
    else {
      L1 = MIN(1., 0.5 * L + 0.5);
      S1 = MIN(1., S * 2);
    }

    clrTabBack = HLStoRGB_ONE(H, L1, S1);
    s->m_clrBtnBkgnd = _RGB(
        (40 * GetRValue(clrWindow) + 215 * GetRValue(clrFace)) / 255,
        (40 * GetGValue(clrWindow) + 215 * GetGValue(clrFace)) / 255,
        (40 * GetBValue(clrWindow) + 215 * GetBValue(clrFace)) / 255);
    s->m_clrMenuRarelyUsed = PixelAlpha(
        s->m_clrBtnBkgnd, 94);
    s->m_clrInactiveTabText = PixelAlpha(clrFace, 55);
    COLORREF clrHL = globalData.clrHilite;
    RGBtoHSL(clrHL, &H, &S, &L);
    COLORREF clrMix = _RGB(
        (77 * GetRValue(clrHL) + 178 * GetRValue(s->m_clrMenuLight)) / 255,
        (77 * GetGValue(clrHL) + 178 * GetGValue(s->m_clrMenuLight)) / 255,
        (77 * GetBValue(clrHL) + 178 * GetBValue(s->m_clrMenuLight)) / 255);

    if (L > .8) { // The highlight color is very light
      s->m_clrHighlight = PixelAlpha(clrMix, 91);
      s->m_clrHighlightDn = PixelAlpha(clrMix, 98);
      s->m_clrMenuItemBorder = PixelAlpha(globalData.clrHilite, 84);
    }
    else {
      s->m_clrHighlight = PixelAlpha(clrMix, 102);
      s->m_clrHighlightDn = PixelAlpha(s->m_clrHighlight, 87);
      s->m_clrMenuItemBorder = globalData.clrHilite;
    }

    s->m_clrHighlightChecked = PixelAlpha(_RGB(
        (GetRValue(clrHL) + 5 * GetRValue(s->m_clrMenuLight)) / 6,
        (GetGValue(clrHL) + 5 * GetGValue(s->m_clrMenuLight)) / 6,
        (GetBValue(clrHL) + 5 * GetBValue(s->m_clrMenuLight)) / 6),
        100);
    s->m_clrSeparator = PixelAlpha(
        globalData.clrBtnFace, .86, .86, .86);
    s->m_clrPaneBorder = globalData.clrBtnShadow;
    s->m_clrMenuBorder = PixelAlpha(
        clrFace, 55);
    clrFloatToolBarBorder = PixelAlpha(
        globalData.clrBtnShadow, .85, .85, .85);
    s->m_clrGripper = PixelAlpha(
        globalData.clrBtnShadow, 110);
  }
  else {
    s->m_clrMenuLight = globalData.clrWindow;
    s->m_clrBtnBkgnd = globalData.clrBtnFace;

    if (globalData.m_bIsBlackHighContrast) {
      s->m_clrHighlightChecked = s->m_clrHighlightDn = s->m_clrHighlight = globalData.clrHilite;
      s->m_clrMenuRarelyUsed = globalData.clrBtnFace;
    }
    else {
      s->m_clrHighlightDn = s->m_clrHighlight = globalData.clrBtnFace;
      s->m_clrHighlightChecked = globalData.clrWindow;
      s->m_clrMenuRarelyUsed = globalData.clrBtnLight;
    }

    clrTabBack = globalData.clrBtnFace;
    s->m_clrInactiveTabText = globalData.clrBtnDkShadow;
    s->m_clrSeparator = globalData.clrBtnShadow;
    s->m_clrGripper = globalData.clrBtnShadow;
    s->m_clrPaneBorder = globalData.clrBtnShadow;
    s->m_clrMenuBorder = globalData.clrBtnDkShadow;
    clrFloatToolBarBorder = globalData.clrBtnShadow;
    s->m_clrMenuItemBorder = globalData.IsHighContastMode() ?
        globalData.clrBtnDkShadow : globalData.clrHilite;
  }

  s->m_clrBtnBkgnd.CreateSolidBrush(s->m_clrBtnBkgnd);
  s->m_clrMenuRarelyUsed.CreateSolidBrush(s->m_clrMenuRarelyUsed);
  s->m_clrMenuLight.CreateSolidBrush(s->m_clrMenuLight);
  s->m_clrHighlight.CreateSolidBrush(s->m_clrHighlight);
  s->m_clrHighlightDn.CreateSolidBrush(s->m_clrHighlightDn);
  s->m_clrHighlightChecked.CreateSolidBrush(s->m_clrHighlightChecked);
  s->m_clrTabBack.CreateSolidBrush(clrTabBack);
  s->m_penSeparator.CreatePen = (s->m_clrSeparator);
  s->m_clrFloatToolBarBorder.CreateSolidBrush(clrFloatToolBarBorder);
  s->m_clrPressedButtonBorder = 0; // Used in derived classes
  s->m_penMenuItemBorder.DeleteObject();
  s->m_penMenuItemBorder.CreatePen = (s->m_clrMenuItemBorder);
  s->m_clrTaskPaneHotText = globalData.clrHotText;
}
void CBCGPVisualManagerXP::OnDrawBarGripper(HDDC hDC, RECT rectGripper, BOOL bHorz,
    CBCGPBaseControlBar* pBar)
{
  ASSERT(hDC);

  if (pBar != NULL && IsDialogControl) {
    CBCGPVisualManager::OnDrawBarGripper(hDC, rectGripper, bHorz, pBar);
    return;
  }

  if (s->m_clrGripperHorz == NULL) {
    CreateGripperBrush();
  }

  BOOL bSideBar = pBar != NULL && pBar->IsKindOf(RUNTIME_CLASS(CBCGPDockingControlBar));
  BOOL bMenuBar = pBar != NULL && pBar->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar));
  RECT rectFill = rectGripper;

  if (!bSideBar) {
    if (bHorz) {
      int xCenter = rectFill CenterPoint(&).x;
      rectFill.left = xCenter - 1;
      rectFill.right = xCenter + 2;
      rectFill DeflateRect(&, 0, 5);
    }
    else {
      int yCenter = rectFill CenterPoint(&).y;
      rectFill.top = yCenter - 1;
      rectFill.bottom = yCenter + 2;
      rectFill DeflateRect(&, 5, 0);
    }
  }
  else {
    if (bHorz) {
      rectFill DeflateRect(&, 4, 0);
    }
    else {
      rectFill DeflateRect(&, 4, 0);
    }

    bHorz = !bHorz;
  }

  COLORREF clrTextOld = hDC->SetTextColor(s->m_clrGripper);
  COLORREF clrBkOld = hDC->SetBkColor(bSideBar || bMenuBar ?
      globalData.clrBtnFace : s->m_clrBtnBkgnd);
  draw_fillrectR(hDC, &rectFill, bHorz ? &s->m_clrGripperHorz : &s->m_clrGripperVert);

  if (bSideBar) {
    //------------------
    // Draw bar caption:
    //------------------
    int nOldBkMode = hDC->SetBkMode(OPAQUE);
    hDC->SetTextColor(globalData.clrBtnText);
    const CFont& font = CBCGPMenuBar::GetMenuFont(bHorz);
    CFont* pOldFont = _clr = ((CFont*) &font);
    const char* strCaption;
    pBar->GetWindowText(strCaption);
    strCaption = _T(" ") + strCaption + _T(" ");
    RECT rectText = rectGripper;
    UINT uiTextFormat = 0;
    TEXTMETRIC tm;
    hDC->GetTextMetrics(&tm);
    POINT ptTextOffset(0, 0);

    if (bHorz) {
      ptTextOffset.y = (rectGripper RCH(&) - tm.tmHeight - 1) / 2;
    }
    else {
      ptTextOffset.x = (rectGripper RCW(&) - tm.tmHeight + 1) / 2;
    }

    if (bHorz) {
      rectText.top += ptTextOffset.y;
      draw_textR(hDC, strCaption, &rectText, uiTextFormat);
    }
    else {
      rectText.left = rectText.right - ptTextOffset.x;
      rectText.top = rectGripper.top + ptTextOffset.y;
      rectText.bottom = rectGripper.top + 3 * ptTextOffset.y;
      uiTextFormat |= DT_NOCLIP;
      draw_textR(hDC, strCaption, &rectText, uiTextFormat);
    }

    _clr = (pOldFont);
    hDC->SetBkMode(nOldBkMode);
  }


  hDC->SetBkColor(clrBkOld);
}
void CBCGPVisualManagerXP::OnDrawMenuBorder(HDDC hDC, CBCGPPopupMenu* pMenu, RECT rect)
{
  ASSERT(hDC);
  ASSERT(pMenu);
  const BOOL bRTL = pMenu->GetExStyle() & WS_EX_LAYOUTRTL;
  draw_3drect_inR(hDC, &rect, s->m_clrMenuBorder, s->m_clrMenuBorder);
  DeflateRect(&rect, 1, 1);
  draw_3drect_inR(hDC, &rect, s->m_clrMenuLight, s->m_clrMenuLight);
  RECT rectLeft(1, 1, 2, rect.bottom - 1);
  draw_fillrectR(hDC, &rectLeft, &s->m_clrBtnBkgnd);
  //------------------------------------------------
  // Quick Customize Office XP like draw popup menu
  //------------------------------------------------
  CBCGPPopupMenu* pParentPopup = pMenu->GetParentPopupMenu();

  if (pParentPopup != NULL) {
    if (pParentPopup->IsQuickCustomize() && !bRTL) {
      CBCGPToolbarMenuButton* pParentBtn = pMenu->GetParentButton();

      if ((pParentBtn != NULL) && (pParentBtn->IsQuickMode())) {
        CBCGPPopupMenu* pParent = (CBCGPPopupMenu*)pMenu->GetParentPopupMenu();
        RECT rcParent;
        pParent->GetWindowRect(rcParent);
        RECT rcCurrent;
        pMenu->GetWindowRect(rcCurrent);
        CBCGPToolbarMenuButton* pBtn = pMenu->GetMenuItem(0);
        RECT rcButton = pBtn->Rect();
        RECT rectBorder;
        rectBorder.SetRectEmpty();

        if (rcParent.left > rcCurrent.left) {
          if (rcParent.top <= rcCurrent.top) {
            rectBorder.SetRect(
                rect.right - 1,
                rect.top,
                rect.right + 1,
                rcButton.bottom);
          }
          else {
            // up
            rectBorder.SetRect(
                rect.right - 1,
                rect.bottom - rcButton RCH(&),
                rect.right + 1,
                rect.bottom);
          }
        }
        else {
          if (rcParent.top <= rcCurrent.top) {
            rectBorder.SetRect(
                rect.left - 1,
                rect.top,
                rect.left + 1,
                rcButton.bottom);
          }
          else {
            // up
            rectBorder.SetRect(
                rect.left - 1,
                rect.bottom - rcButton RCH(&),
                rect.left + 1,
                rect.bottom);
          }
        }

        if (!rectBorder.IsRectEmpty()) {
          draw_fillrectR(hDC, &rectBorder, &s->m_clrBtnBkgnd);
        }
      }
    }
  }

  if (!CBCGPToolBar::IsCustomizeMode()) {
    //-------------------------------------
    // "Connect" menu to the parent button:
    //-------------------------------------
    CBCGPToolbarMenuButton* pParentMenuBtn = pMenu->GetParentButton();

    if (s->m_bConnectMenuToParent &&
        pParentMenuBtn != NULL && pMenu->GetParentPopupMenu() == NULL &&
        pParentMenuBtn->IsBorder()) {
      RECT rectConnect;
      rectConnect.SetRectEmpty();
      RECT rectParent = pParentMenuBtn->Rect();
      CWnd* pWnd = pParentMenuBtn->GetParentWnd();
      pWnd->ClientToScreen(rectParent);
      pMenu->ScreenToClient(&rectParent);

      switch (pMenu->GetDropDirection()) {
      case CBCGPPopupMenu::DROP_DIRECTION_BOTTOM:
        rectConnect = RECT(rectParent.left + 1, rect.top - 1, rectParent.right - 1, rect.top);

        if (rectConnect RCW(&) > RCW(&rect) + 2) {
          return;
        }

        break;

      case CBCGPPopupMenu::DROP_DIRECTION_TOP:
        rectConnect = RECT(rectParent.left + 1, rect.bottom, rectParent.right - 1, rect.bottom + 1);

        if (rectConnect RCW(&) > RCW(&rect) + 2) {
          return;
        }

        break;

      case CBCGPPopupMenu::DROP_DIRECTION_RIGHT:
        rectConnect = RECT(rect.left - 1, rectParent.top + 1, rect.left, rectParent.bottom - 1);

        if (rectConnect RCH(&) > RCH(&rect) + 2) {
          return;
        }

        break;

      case CBCGPPopupMenu::DROP_DIRECTION_LEFT:
        rectConnect = RECT(rect.right, rectParent.top + 1, rect.right + 1, rectParent.bottom - 1);

        if (rectConnect RCH(&) > RCH(&rect) + 2) {
          return;
        }

        break;
      }

      RECT rectBorder = rect;
      InflateRect(&rectBorder, 1, 1);
      rectConnect.IntersectRect(&rectConnect, &rectBorder);
      rectParent InflateRect(&, 1, 1);
      rectConnect.IntersectRect(&rectConnect, &rectParent);
      draw_fillrectR(hDC, &rectConnect, &s->m_clrBtnBkgnd);
    }
  }
}
void CBCGPVisualManagerXP::OnDrawMenuShadow(HDDC pPaintDC, RECT  rectClient, RECT  rectExclude,
    int nDepth,  int iMinBrightness,  int iMaxBrightness,
    CBitmap* pBmpSaveBottom,  CBitmap* pBmpSaveRight, BOOL bRTL)
{
  ASSERT(pPaintDC);
  ASSERT(pBmpSaveBottom);
  ASSERT(pBmpSaveRight);

  if (rectExclude.IsRectNull()) {
    //------------------------
    // Simple draw the shadow:
    //------------------------
    CBCGPDrawManager dm(*pPaintDC);
    DrawShadow(hDC, rectClient, nDepth, iMinBrightness, iMaxBrightness,
        pBmpSaveBottom, pBmpSaveRight, s->m_clrMenuShadowBase,
        !bRTL);
  }
  else {
    //--------------------------------------------
    // Copy screen content into the memory bitmap:
    //--------------------------------------------
    CDC dcMem;

    if (!dcMem.CreateCompatibleDC(pPaintDC)) {
      ASSERT(FALSE);
      return;
    }

    //--------------------------------------------
    // Gets the whole menu and changes the shadow.
    //--------------------------------------------
    RECT rectBmp(0, 0, rectClient RCW(&), rectClient RCH(&));
    int cx = rectBmp RCW(&) + nDepth;
    int cy = rectBmp RCH(&) + nDepth;
    CBitmap bmpMem;

    if (!bmpMem.CreateCompatibleBitmap(pPaintDC, cx, cy)) {
      ASSERT(FALSE);
      return;
    }

    CBitmap* pOldBmp = dcMem.SelectObject(&bmpMem);
    ASSERT(pOldBmp != NULL);
    dcMem.BitBlt(0, 0, cx, cy, pPaintDC, rectClient.left, rectClient.top, SRCCOPY);
    //-----------------
    // Draw the shadow:
    //-----------------
    CBCGPDrawManager dm(dcMem);
    DrawShadow(hDC, rectBmp, nDepth, iMinBrightness, iMaxBrightness,
        pBmpSaveBottom, pBmpSaveRight, s->m_clrMenuShadowBase,
        !bRTL);
    //------------------------------------------
    // Do not cover rectExclude with the shadow:
    //------------------------------------------
    dcMem.BitBlt(rectExclude.left - rectClient.left, rectExclude.top - rectClient.top,
        rectExclude RCW(&), rectExclude RCH(&),
        pPaintDC, rectExclude.left, rectExclude.top, SRCCOPY);
    //-----------------------------------------
    // Copy shadowed bitmap back to the screen:
    //-----------------------------------------
    pPaintDC->BitBlt(rectClient.left, rectClient.top, cx, cy, &dcMem, 0, 0, SRCCOPY);
    dcMem.SelectObject(pOldBmp);
  }
}
void CBCGPVisualManagerXP::OnDrawBarBorder(HDDC hDC, CBCGPBaseControlBar* pBar, RECT& rect)
{
  ASSERT(hDC);

  if (IsDialogControl) {
    CBCGPVisualManager::OnDrawBarBorder(hDC, pBar, rect);
    return;
  }

  DWORD dwBarStyle = pBar->GetBarStyle();

  if (!(dwBarStyle & CBRS_BORDER_ANY)) {
    return;
  }

  COLORREF clrBckOld = clrBkColor;   // FillSolidRect changes it
  COLORREF clrFill = IsOnGlass ? _RGB(0, 0, 0) : globalData.clrBtnFace;

  if (dwBarStyle & CBRS_BORDER_LEFT) {
    draw_fillrectR(hDC, 0, 0, 1, RCH(&rect) - 1, clrFill);
  }

  if (dwBarStyle & CBRS_BORDER_TOP) {
    draw_fillrectR(hDC, 0, 0, RCW(&rect) - 1 , 1, clrFill);
  }

  if (dwBarStyle & CBRS_BORDER_RIGHT)
    draw_fillrectR(hDC, &rect.right, 0/*RGL~:1*/, -1,
        RCH(&rect)/*RGL-: - 1*/, clrFill);

  if (dwBarStyle & CBRS_BORDER_BOTTOM) {
    draw_fillrectR(hDC, 0, rect.bottom, RCW(&rect) - 1, -1, clrFill);
  }

  if (dwBarStyle & CBRS_BORDER_LEFT) {
    ++rect.left;
  }

  if (dwBarStyle & CBRS_BORDER_TOP) {
    ++rect.top;
  }

  if (dwBarStyle & CBRS_BORDER_RIGHT) {
    --rect.right;
  }

  if (dwBarStyle & CBRS_BORDER_BOTTOM) {
    --rect.bottom;
  }

  // Restore Bk color:
  hDC->SetBkColor(clrBckOld);
}
void CBCGPVisualManagerXP::OnFillBarBackground(HDDC hDC, CBCGPBaseControlBar* pBar,
    RECT rectClient, RECT rectClip,
    BOOL /*bNCArea*/)
{
  ASSERT(hDC);

  if (IsOnGlass) {
    draw_fillrectR(hDC, &rectClient, _RGB(0, 0, 0));
    return;
  }

  if (DYNAMIC_DOWNCAST(CReBar, pBar) != NULL ||
      DYNAMIC_DOWNCAST(CReBar, pBar->GetParent())) {
    FillRebarPane(hDC, pBar, rectClient);
    return;
  }

  if (rectClip.IsRectEmpty()) {
    rectClip = rectClient;
  }

  CRuntimeClass* pBarClass = pBar->GetRuntimeClass();

  if (pBarClass == NULL || pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPMenuBar))) {
    CBCGPVisualManager::OnFillBarBackground(hDC, pBar, rectClient, rectClip);
    return;
  }

  if (pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPOutlookBarPane))) {
    CBCGPOutlookBarPane* pOlBar = DYNAMIC_DOWNCAST(CBCGPOutlookBarPane, pBar);
    ASSERT(pOlBar);

    if (pOlBar->IsBackgroundTexture()) {
      CBCGPVisualManager::OnFillBarBackground(hDC, pBar, rectClient, rectClip);
      return;
    }
  }

  if (pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPColorBar))) {
    if (IsDialogControl) {
      CBCGPVisualManager::OnFillBarBackground(hDC, pBar, rectClient, rectClip);
    }
    else {
      draw_fillrectR(hDC, &rectClip,
          ((CBCGPColorBar*) pBar)->IsTearOff() ?
          &s->m_clrBtnBkgnd : &s->m_clrMenuLight);
    }

    return;
  }

  if (pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPCalculator))) {
    if (IsDialogControl) {
      CBCGPVisualManager::OnFillBarBackground(hDC, pBar, rectClient, rectClip);
    }
    else {
      draw_fillrectR(hDC, &rectClip, &s->m_clrMenuLight);
    }

    return;
  }

  if (pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPCalendarBar))) {
    draw_fillrectR(hDC, &rectClip, &s->m_clrMenuLight);
    RECT rectImages = rectClient;
    rectImages.right = rectImages.left + CBCGPToolBar::GetMenuImageSize().cx +
        2 * GetMenuImageMargin() + 1;
    return;
  }

  if (pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPPopupMenuBar))) {
    draw_fillrectR(hDC, &rectClip, &s->m_clrMenuLight);
    CBCGPPopupMenuBar* pMenuBar = DYNAMIC_DOWNCAST(CBCGPPopupMenuBar, pBar);

    if (!pMenuBar->s->m_bDisableSideBarInXPMode) {
      RECT rectImages = rectClient;
      rectImages.right = rectImages.left + pMenuBar->GetGutterWidth();
      rectImages DeflateRect(&, 0, 1);
      draw_fillrectR(hDC, &rectImages, &s->m_clrBtnBkgnd);
    }

    return;
  }

  if (pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPToolBar))) {
    if (IsDialogControl) {
      CBCGPVisualManager::OnFillBarBackground(hDC, pBar, rectClient, rectClip);
    }
    else {
      draw_fillrectR(hDC, &rectClip, &s->m_clrBtnBkgnd);
    }

    return;
  }

  if (pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPAutoHideDockBar))) {
    draw_fillrectR(hDC, &rectClip, &s->m_clrTabBack);
    return;
  }

  CBCGPVisualManager::OnFillBarBackground(hDC, pBar, rectClient, rectClip);
}
void CBCGPVisualManagerXP::OnDrawSeparator(HDDC hDC, CBCGPBaseControlBar* pBar,
    RECT rect, BOOL bHorz)
{
  ASSERT(hDC);

  if (IsDialogControl) {
    CBCGPVisualManager::OnDrawSeparator(hDC, pBar, rect, bHorz);
    return;
  }

  RECT rectSeparator = rect;
  int x1, x2;
  int y1, y2;

  if (bHorz) {
    x1 = x2 = (rect.left + rect.right) / 2;
    y1 = rect.top;
    y2 = rect.bottom - 1;
  }
  else {
    y1 = y2 = (rect.top + rect.bottom) / 2;
    x1 = rect.left;
    x2 = rect.right;
    BOOL bIsRibbon = FALSE;

    if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar)) &&
        !bIsRibbon &&
        !pBar->IsKindOf(RUNTIME_CLASS(CBCGPColorBar)) &&
        !pBar->IsKindOf(RUNTIME_CLASS(CBCGPCalculator)) &&
        !pBar->IsKindOf(RUNTIME_CLASS(CBCGPCalendarBar))) {
      x1 = rect.left + CBCGPToolBar::GetMenuImageSize().cx +
          GetMenuImageMargin() + 1;
      RECT rectBar;
      pBar->GetClientRect(rectBar);

      if (rectBar.right - x2 < 50) { // Last item in row
        x2 = rectBar.right;
      }

      if (((CBCGPPopupMenuBar*) pBar)->s->m_bDisableSideBarInXPMode) {
        x1 = 0;
      }

      //---------------------------------
      //  Maybe Quick Customize separator
      //---------------------------------
      if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar))) {
        CWnd* pWnd = pBar->GetParent();

        if (pWnd != NULL && pWnd->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenu))) {
          CBCGPPopupMenu* pMenu = (CBCGPPopupMenu*)pWnd;

          if (pMenu->IsCustomizePane()) {
            x1 = rect.left + 2 * CBCGPToolBar::GetMenuImageSize().cx +
                3 * GetMenuImageMargin() + 2;
          }
        }
      }
    }
  }

  if (bIsDrawOnGlass) {

    draw_line(hDC, x1, y1, x2, y2, s->m_clrSeparator);
  }
  else {
    COLORREF _clr = (&s->m_penSeparator);
    TMoveTo(hDC, x1, y1);
    _LineTo(hDC, x2, y2);

  }
}
void CBCGPVisualManagerXP::OnDrawButtonBorder(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, int state)
{
  ASSERT(hDC);


  if (state != ButtonsIsPressed && state != ButtonsIsHighlighted) {
    ASSERT((pButton->s->m_nStyle & UIS_CHECKED) == 0);
    return;
  }

  COLORREF clrBorder = s->m_clrMenuItemBorder;
  CBCGPToolbarMenuButton* pMenuButton =
      DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);
  BOOL bIsMenuButton = pMenuButton != NULL;
  BOOL bIsPopupMenu = bIsMenuButton &&
      pMenuButton->GetParentWnd() != NULL &&
      pMenuButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar));
  BOOL bIsPressedBorder = !bIsPopupMenu;

  if (bIsMenuButton && !bIsPopupMenu &&
      pMenuButton->IsDroppedDown()) {
    bIsPressedBorder = FALSE;
    CBCGPPopupMenu* pPopupMenu = pMenuButton->GetPopupMenu();

    if (pPopupMenu != NULL &&
        (pPopupMenu->IsWindowVisible() || pPopupMenu->IsShown())) {
      clrBorder = s->m_clrMenuBorder;
      ExtendMenuButton(pMenuButton, rect);
      BOOL bRTL = pPopupMenu->GetExStyle() & WS_EX_LAYOUTRTL;

      if (s->m_bShdowDroppedDownMenuButton && !bRTL &&
          CBCGPMenuBar::IsMenuShadows() &&
          !CBCGPToolBar::IsCustomizeMode() &&
          globalData.m_nBitsPerPixel > 8 &&
          !globalData.IsHighContastMode() &&
          !pPopupMenu->IsRightAlign()) {

        DrawShadow(hDC, rect, s->m_nMenuShadowDepth, 100, 75, NULL, NULL,
            s->m_clrMenuShadowBase);
      }
    }
  }

  const BOOL bIsChecked = (pButton->s->m_nStyle & UIS_CHECKED);

  switch (state) {
  case ButtonsIsPressed:
    if (bIsPressedBorder && s->m_clrPressedButtonBorder != 0 &&
        !bIsChecked &&
        RCW(&rect) > 5 & RCH(&rect) > 5) {
      clrBorder = s->m_clrPressedButtonBorder;
    }

  case ButtonsIsHighlighted:
    if (bIsPopupMenu && bIsChecked) {
      if (pButton->s->m_nStyle & UIS_MARKED) {
        clrBorder = s->m_clrPressedButtonBorder;
      }

      rect.bottom ++;
    }

    if (bIsDrawOnGlass) {

      DrawRect(hDC, rect, 0, clrBorder);
    }
    else {
      draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
    }
  }
}
void CBCGPVisualManagerXP::OnFillButtonInterior(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state)
{
  ASSERT(hDC);


  if (state != ButtonsIsPressed && state != ButtonsIsHighlighted) {
    return;
  }

  if (CBCGPToolBar::IsCustomizeMode() &&
      !CBCGPToolBar::IsAltCustomizeMode() && !pButton->IsLocked()) {
    return;
  }

  CBCGPToolbarMenuButton* pMenuButton =
      DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);
  BOOL bIsMenuButton = pMenuButton != NULL;
  BOOL bIsPopupMenu = bIsMenuButton &&
      pMenuButton->GetParentWnd() != NULL &&
      pMenuButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar));

  if (!bIsPopupMenu && !s->m_bEnableToolbarButtonFill) {
    return;
  }

  COLORREF  pBrush = ((pButton->s->m_nStyle & UIS_PUSHED) && !bIsPopupMenu) ?
      &s->m_clrHighlightDn : &s->m_clrHighlight;

  if (bIsMenuButton && !bIsPopupMenu && pMenuButton->IsDroppedDown()) {
    ExtendMenuButton(pMenuButton, rect);
    pBrush = &s->m_clrBtnBkgnd;
  }

  if (pButton->s->m_nStyle & UIS_CHECKED) {
    pBrush = (state == ButtonsIsHighlighted) ?
        &s->m_clrHighlightDn : &s->m_clrHighlightChecked;
  }

  if (bIsMenuButton && (pButton->s->m_nStyle & UIS_DISABLED)) {
    pBrush = &s->m_clrMenuLight;
  }

  switch (state) {
  case ButtonsIsPressed:
  case ButtonsIsHighlighted:
    if ((pButton->s->m_nStyle & UIS_CHECKED) == 0) {
      DeflateRect(&rect, 1, 1);
    }

    OnFillHighlightedArea(hDC, rect, pBrush, pButton);
  }
}
void CBCGPVisualManagerXP::OnHighlightMenuItem(HDDC hDC, CBCGPToolbarMenuButton* pButton,
    RECT rect, COLORREF clrText)
{
  ASSERT(hDC);

  COLORREF  pBrush = (pButton->s->m_nStyle & UIS_DISABLED) ?
      &s->m_clrMenuLight : &s->m_clrHighlight;
  DeflateRect(&rect, 1, 0);
  OnFillHighlightedArea(hDC, rect, pBrush, pButton);
  draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  clrText = GetHighlightedMenuItemTextColor(pButton);
}
COLORREF CBCGPVisualManagerXP::GetHighlightedMenuItemTextColor(CBCGPToolbarMenuButton* pButton)
{


  if (pButton->s->m_nStyle & UIS_DISABLED) {
    return globalData.clrGrayedText;
  }

  if (GetRValue(s->m_clrHighlight) > 128 &&
      GetGValue(s->m_clrHighlight) > 128 &&
      GetBValue(s->m_clrHighlight) > 128) {
    return _RGB(0, 0, 0);
  }
  else {
    return _RGB(255, 255, 255);
  }
}
void CBCGPVisualManagerXP::OnHighlightQuickCustomizeMenuButton(HDDC hDC,
    RECT rect)
{
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &s->m_clrBtnBkgnd);
  draw_3drect_inR(hDC, &rect, s->m_clrMenuBorder, s->m_clrMenuBorder);
}
void CBCGPVisualManagerXP::OnHighlightRarelyUsedMenuItems(HDDC hDC, RECT rectRarelyUsed)
{
  ASSERT(hDC);
  rectRarelyUsed.left --;
  rectRarelyUsed.right = rectRarelyUsed.left + CBCGPToolBar::GetMenuImageSize().cx +
      2 * GetMenuImageMargin() + 2;
  draw_fillrectR(hDC, &rectRarelyUsed, &s->m_clrMenuRarelyUsed);
}
void CBCGPVisualManagerXP::OnDrawTab(HDDC hDC, RECT rectTab,
    int iTab, BOOL bIsActive, const CBCGPBaseTabWnd* pTabWnd)
{
#define TEXT_MARGIN       4
#define IMAGE_MARGIN      4
  ASSERT(pTabWnd);
  ASSERT(hDC);

  if (pTabWnd->IsFlatTab() || IsOneNoteStyle ||
      pTabWnd->IsColored() || IsVS2005Style ||
      pTabWnd->IsLeftRightRounded()) {
    CBCGPVisualManager::OnDrawTab(hDC, rectTab, iTab, bIsActive, pTabWnd);
    return;
  }

  COLORREF  clrDark;
  COLORREF  clrBlack;
  COLORREF  clrHighlight;
  COLORREF  clrFace;
  COLORREF  clrDarkShadow;
  COLORREF  clrLight;
  COLORREF    pbrFace = NULL;
  COLORREF    pbrBlack = NULL;
  GetTabFrameColors(
      pTabWnd, clrDark, clrBlack, clrHighlight, clrFace, clrDarkShadow, clrLight,
      pbrFace, pbrBlack);
  COLORREF penGray = (clrDark);
  COLORREF penDkGray = (clrBlack);
  COLORREF penHiLight = (clrHighlight);
  COLORREF _clr = (penGray);

  if (iTab != pTabWnd->GetActiveTab() - 1) {
    if (iTab < pTabWnd->GetVisibleTabsNum() - 1 || s->m_bDrawLastTabLine) {
      TMoveTo(hDC, rectTab.right, rectTab.top + 3);
      _LineTo(hDC, rectTab.right, rectTab.bottom - 3);
    }
  }

  if (bIsActive) {
    if (LOCATION_BOTTOM) {
      RECT rectFace = rectTab;
      rectFace.top--;
      OnFillTab(hDC, rectFace, pbrFace, iTab, bIsActive, pTabWnd);
      _clr = (penDkGray);
      TMoveTo(hDC, rectTab.right, rectTab.top);
      _LineTo(hDC, rectTab.right, rectTab.bottom);
      _LineTo(hDC, rectTab.left, rectTab.bottom);
      _clr = (penHiLight);
      _LineTo(hDC, rectTab.left, rectTab.top - 2);
    }
    else {
      COLORREF penLight = (s->m_clrMenuLight);
      RECT rectFace = rectTab;
      rectFace.bottom++;
      rectFace.left++;
      OnFillTab(hDC, rectFace, pbrFace, iTab, bIsActive, pTabWnd);
      _clr = (penDkGray);
      TMoveTo(hDC, rectTab.right, rectTab.bottom);
      _LineTo(hDC, rectTab.right, rectTab.top);
      _clr = (penHiLight);
      _LineTo(hDC, rectTab.right, rectTab.top);
      _LineTo(hDC, rectTab.left, rectTab.top);
      _LineTo(hDC, rectTab.left, rectTab.bottom);
    }
  }


  COLORREF clrText;

  if (pTabWnd->IsDialogControl()) {
    clrText = globalData.clrBtnText;
  }
  else {
    clrText = bIsActive ? globalData.clrBtnText : s->m_clrInactiveTabText;
  }

  OnDrawTabContent(hDC, rectTab, iTab, bIsActive, pTabWnd, clrText);
}
void CBCGPVisualManagerXP::OnFillTab(HDDC hDC, RECT rectFill, COLORREF  pbrFill,
    int iTab, BOOL bIsActive,
    const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(hDC);
  ASSERT(pbrFill);
  ASSERT(pTabWnd);

  if (pTabWnd->GetTabBkColor(iTab) != 0 && !bIsActive) {
    COLORREF br = (pTabWnd->GetTabBkColor(iTab));
    draw_fillrectR(hDC, &rectFill, br);
    return;
  }

  if (IsOneNoteStyle || IsVS2005Style ||
      pTabWnd->IsLeftRightRounded()) {
    CBCGPVisualManager::OnFillTab(hDC, rectFill, pbrFill,
        iTab, bIsActive, pTabWnd);
  }
  else if (bIsActive) {
    draw_fillrectR(hDC, &rectFill, pbrFill);
  }
}
void CBCGPVisualManagerXP::OnEraseTabsArea(HDDC hDC, RECT rect,
    const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(hDC);
  ASSERT(pTabWnd);

  if (pTabWnd->IsFlatTab()) {
    CBCGPVisualManager::OnEraseTabsArea(hDC, rect, pTabWnd);
    return;
  }

  if (pTabWnd->IsDialogControl()) {
    if (pTabWnd->IsVisualManagerStyle()) {
      OnFillDialog(hDC, pTabWnd->GetParent(), rect);
    }
    else {
      draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
    }

    return;
  }

  draw_fillrectR(hDC, &rect, &s->m_clrTabBack);
}
COLORREF CBCGPVisualManagerXP::OnDrawControlBarCaption(HDDC hDC, CBCGPDockingControlBar* /*pBar*/,
    BOOL bActive, RECT rectCaption, RECT /*rectButtons*/)
{
  ASSERT(hDC);
  COLORREF pen(PS_SOLID, 1,
      bActive ? globalData.clrBtnLight : globalData.clrBtnShadow);
  COLORREF _clr = (pen);
  COLORREF  pOldBrush = (COLORREF) _clr = (
      bActive ? globalData.clrActiveCaption : globalData.clrBtnFace);

  if (bActive) {
    rectCaption InflateRect(&, 1, 1);
  }

  hDC->RoundRect(rectCaption, cPOINT(2, 2));
  _clr = (pOldBrush);

  // get the text color
  COLORREF clrCptnText = bActive ?
      globalData.clrCaptionText :
      globalData.clrBtnText;
  return clrCptnText;
}
void CBCGPVisualManagerXP::OnDrawCaptionButton(HDDC hDC, CBCGPCaptionButton* pButton,
    BOOL bActive,
    BOOL bHorz, BOOL bMaximized, BOOL bDisabled,
    int nImageID /*= -1*/)
{
  ASSERT(hDC);
  ASSERT(pButton != NULL);
  RECT rc = rect;

  if (bPushed && bFocused && !bDisabled) {
    OnFillHighlightedArea(hDC, rc, &s->m_clrHighlightDn, NULL);
    bActive = TRUE;
  }
  else if (bPushed || bFocused) {
    if (!bDisabled) {
      OnFillHighlightedArea(hDC, rc, &s->m_clrHighlight, NULL);
    }

    bActive = FALSE;
  }

  int id =  - 1;

  if (nImageID != -1) {
    id = nImageID;
  }
  else {
    id = pButton->GetIconID(bHorz, bMaximized);
  }

  if (id !=  - 1) {
    SIZE sizeImage = CBCGPMenuImages::Size();
    POINT ptImage(rc.left + (rc RCW(&) - sizeImage.cx) / 2,
        rc.top + (rc RCH(&) - sizeImage.cy) / 2);
    OnDrawCaptionButtonIcon(hDC, pButton, id, bActive, bDisabled, ptImage);
  }

  if ((bPushed || bFocused) && !bDisabled) {
    COLORREF clrDark = globalData.clrBtnDkShadow;
    draw_3drect_inR(hDC, &rc, clrDark, clrDark);
  }
}
void CBCGPVisualManagerXP::OnDrawCaptionButtonIcon(HDDC hDC,
    CBCGPCaptionButton* pButton,
    int id,
    BOOL bActive, BOOL bDisabled,
    POINT ptImage)
{
  ASSERT(hDC);

  int imageState;

  if (bDisabled) {
    imageState = ImageGray;
  }
  else if (bFocused || bPushed) {
    COLORREF clrBack = bPushed ? s->m_clrHighlightDn : s->m_clrHighlight;

    if (GetRValue(clrBack) <= 192 &&
        GetGValue(clrBack) <= 192 &&
        GetBValue(clrBack) <= 192) {
      imageState = ImageWhite;
    }
    else {
      imageState = ImageBlack;
    }
  }
  else if (pButton->s->m_clrForeground == 0) {
    imageState = bActive ? ImageWhite : ImageBlack;
  }
  else {
    if (GetRValue(pButton->s->m_clrForeground) > 192 &&
        GetGValue(pButton->s->m_clrForeground) > 192 &&
        GetBValue(pButton->s->m_clrForeground) > 192) {
      imageState = ImageWhite;
    }
    else {
      imageState = ImageBlack;
    }
  }

  DrawMenuImages(hDC, id, ptImage, imageState);
}
COLORREF CBCGPVisualManagerXP::OnFillCommandsListBackground(HDDC hDC, RECT rect, BOOL bIsSelected)
{
  ASSERT(hDC);
  COLORREF clrText = globalData.clrBtnText;
  int iImageWidth = CBCGPToolBar::GetMenuImageSize().cx + GetMenuImageMargin();

  if (bIsSelected) {
    if (s->m_bEnableToolbarButtonFill) {
      rect.left = 0;
    }

    OnFillHighlightedArea(hDC, rect, &s->m_clrHighlight, NULL);
    draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);

    // Now, we should define a menu text color...
    if (GetRValue(s->m_clrHighlight) > 128 &&
        GetGValue(s->m_clrHighlight) > 128 &&
        GetBValue(s->m_clrHighlight) > 128) {
      clrText = _RGB(0, 0, 0);
    }
    else {
      clrText = _RGB(255, 255, 255);
    }
  }
  else {
    draw_fillrectR(hDC, &rect, &s->m_clrMenuLight);
    RECT rectImages = rect;
    rectImages.right = rectImages.left + iImageWidth + MENU_IMAGE_MARGIN;
    draw_fillrectR(hDC, &rectImages, &s->m_clrBtnBkgnd);
    clrText = globalData.clrBtnText;
  }

  return clrText;
}
void CBCGPVisualManagerXP::OnDrawMenuArrowOnCustomizeList(HDDC hDC,
    RECT rectCommand, BOOL /*bSelected*/)
{
  ASSERT(hDC);
  RECT rectTriangle = rectCommand;
  rectTriangle.left = rectTriangle.right - MENUIMAGESSIZECX;
  int state = ImageBlack;
  COLORREF clrPen = _RGB(0, 0, 0);

  if (GetRValue(s->m_clrHighlight) < 128 ||
      GetGValue(s->m_clrHighlight) < 128 ||
      GetBValue(s->m_clrHighlight) < 128) {
    state = ImageWhite;
    clrPen = _RGB(255, 255, 255);
  }

  DrawMenuImages(hDC, IdArowRightLarge, rectTriangle, state);
  COLORREF penLine = (clrPen);
  COLORREF _clr = (penLine);
  TMoveTo(hDC, rectTriangle.left - 1, rectCommand.top + 2);
  _LineTo(hDC, rectTriangle.left - 1, rectCommand.bottom - 2);

}
void CBCGPVisualManagerXP::OnDrawTearOffCaption(HDDC hDC, RECT rect, BOOL bIsActive)
{
  const int iBorderSize = 1;
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &s->m_clrMenuLight);
  DeflateRect(&rect, iBorderSize, iBorderSize);
  OnFillHighlightedArea(hDC, rect, bIsActive ? &s->m_clrHighlight : &s->m_clrBtnBkgnd,
      NULL);
  // Draw gripper:
  int nGripperWidth = MAX(20, CBCGPToolBar::GetMenuImageSize().cx * 2);
  RECT rectGripper = rect;
  rectGripper DeflateRect(&, (rectGripper RCW(&) - nGripperWidth) / 2, 1);

  if (s->m_clrGripperHorz == NULL) {
    CreateGripperBrush();
  }

  COLORREF clrTextOld = hDC->SetTextColor(bIsActive ?
      globalData.clrBtnDkShadow : globalData.clrBtnShadow);
  COLORREF clrBkOld = hDC->SetBkColor(
      bIsActive ? s->m_clrHighlight : s->m_clrBtnBkgnd);

  if (bIsActive) {
    rectGripper DeflateRect(&, 0, 1);
  }

  draw_fillrectR(hDC, &rectGripper, &s->m_clrGripperHorz);

  hDC->SetBkColor(clrBkOld);

  if (bIsActive) {
    draw_3drect_inR(hDC, &rect, globalData.clrBtnDkShadow, globalData.clrBtnDkShadow);
  }
}
void CBCGPVisualManagerXP::OnDrawMenuResizeBar(HDDC hDC, RECT rect, int nResizeFlags)
{
  ASSERT(hDC);
  const int iBorderSize = 1;
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &s->m_clrMenuLight);
  DeflateRect(&rect, iBorderSize, iBorderSize);
  OnFillHighlightedArea(hDC, rect, &s->m_clrBtnBkgnd, NULL);
  RECT rectGripper = rect;

  if (nResizeFlags == (int) CBCGPPopupMenu::MENU_RESIZE_BOTTOs->m_RIGHT ||
      nResizeFlags == (int) CBCGPPopupMenu::MENU_RESIZE_TOP_RIGHT) {
    rectGripper.left = rectGripper.right - rectGripper RCH(&);
  }
  else {
    rectGripper.left = rectGripper CenterPoint(&).x - rectGripper RCH(&) / 2;
    rectGripper.right = rectGripper.left + rectGripper RCH(&);
  }

  rectGripper DeflateRect(&, 2, 2);

  if (s->m_clrGripperHorz == NULL) {
    CreateGripperBrush();
  }

  COLORREF clrTextOld = hDC->SetTextColor(globalData.clrBtnShadow);
  COLORREF clrBkOld = hDC->SetBkColor(s->m_clrBtnBkgnd);
  draw_fillrectR(hDC, &rectGripper, &s->m_clrGripperHorz);

  hDC->SetBkColor(clrBkOld);
}
void CBCGPVisualManagerXP::OnDrawMenuScrollButton(HDDC hDC, RECT rect, BOOL bIsScrollDown,
    BOOL bIsHighlited, BOOL /*bIsPressed*/,
    BOOL /*bIsDisabled*/)
{
  ASSERT(hDC);
  rect.top --;
  draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
  DrawMenuImages(hDC, bIsScrollDown ? IdArowDown : IdArowUp, rect);

  if (bIsHighlited) {
    COLORREF pen = (globalData.clrBtnShadow);
    COLORREF _clr = (pen);
    COLORREF  pOldBrush = (COLORREF) hDC->SelectStockObject(NULL_BRUSH);
    DeflateRect(&rect, 1, 1);
    hDC->RoundRect(rect, cPOINT(2, 2));
    _clr = (pOldBrush);

  }
}
void CBCGPVisualManagerXP::CreateGripperBrush()
{
  ASSERT(s->m_clrGripperHorz == NULL);
  ASSERT(s->m_clrGripperVert == NULL);
  WORD horzHatchBits[8] = { 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00 };
  CBitmap bmpGripperHorz;
  bmpGripperHorz.CreateBitmap(8, 8, 1, 1, horzHatchBits);
  s->m_clrGripperHorz.CreatePatternBrush(&bmpGripperHorz);
  WORD vertHatchBits[8] = { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA };
  CBitmap bmpGripperVert;
  bmpGripperVert.CreateBitmap(8, 8, 1, 1, vertHatchBits);
  s->m_clrGripperVert.CreatePatternBrush(&bmpGripperVert);
}
void CBCGPVisualManagerXP::ExtendMenuButton(CBCGPToolbarMenuButton* pMenuButton,
    RECT& rect)
{
  ASSERT(pMenuButton);
  CBCGPPopupMenu* pPopupMenu = pMenuButton->GetPopupMenu();

  if (pPopupMenu == NULL || pPopupMenu->GetSafeHwnd() == NULL) {
    return;
  }

  RECT rectMenu;
  pPopupMenu->GetWindowRect(rectMenu);

  if (DYNAMIC_DOWNCAST(CCustomizeButton, pMenuButton) != NULL) {
    CBCGPBaseControlBar* pParentBar = DYNAMIC_DOWNCAST(
        CBCGPBaseControlBar, pMenuButton->GetParentWnd());

    if (pParentBar != NULL) {
      RECT rectScreen = rect;
      pParentBar->ClientToScreen(&rectScreen);

      if (pParentBar->IsHorizontal()) {
        rectScreen.top = rectMenu.top;
        rectScreen.bottom = rectMenu.bottom;
      }
      else {
        rectScreen.left = rectMenu.left;
        rectScreen.right = rectMenu.right;
        rectScreen.bottom++;
      }

      RECT rectInter;

      if (!rectInter.IntersectRect(rectScreen, rectMenu)) {
        return;
      }
    }
  }

  int nGrow = 4;

  switch (pPopupMenu->GetDropDirection()) {
  case CBCGPPopupMenu::DROP_DIRECTION_BOTTOM:
    if (rectMenu RCW(&) < RCW(&rect)) {
      nGrow = 1;
    }

    rect.bottom += nGrow;
    break;

  case CBCGPPopupMenu::DROP_DIRECTION_TOP:
    if (rectMenu RCW(&) < RCW(&rect)) {
      nGrow = 1;
    }

    rect.top -= nGrow;
    break;

  case CBCGPPopupMenu::DROP_DIRECTION_RIGHT:
    if (rectMenu RCH(&) < RCH(&rect)) {
      nGrow = 1;
    }

    rect.right += nGrow;
    break;

  case CBCGPPopupMenu::DROP_DIRECTION_LEFT:
    if (rectMenu RCH(&) < RCH(&rect)) {
      nGrow = 1;
    }

    rect.left -= nGrow;
    break;
  }
}
void CBCGPVisualManagerXP::OnDrawMenuSystemButton(HDDC hDC, RECT rect, UINT uiSystemCommand,
    UINT nStyle, BOOL bHighlight)
{
  ASSERT(hDC);
  BOOL bIsDisabled = (nStyle & UIS_DISABLED);
  BOOL bIsPressed = (nStyle & UIS_PUSHED);
  int imageID;

  switch (uiSystemCommand) {
  case SC_CLOSE:
    imageID = IdClose;
    break;

  case SC_MINIMIZE:
    imageID = IdMinimize;
    break;

  case SC_RESTORE:
    imageID = IdRestore;
    break;

  default:
    return;
  }

  if (bHighlight && !bIsDisabled) {
    OnFillHighlightedArea(hDC, rect,
        bIsPressed ? &s->m_clrHighlightDn : &s->m_clrHighlight, NULL);
    COLORREF clrBorder = s->m_clrMenuItemBorder;
    draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
  }

  DrawMenuImages(hDC, imageID, rect,
      bIsDisabled ? ImageGray : bHighlight ?
      ImageWhite : ImageBlack);
}
void CBCGPVisualManagerXP::OnDrawStatusBarPaneBorder(HDDC hDC, CBCGPStatusBar* /*pBar*/,
    RECT rectPane, UINT /*uiID*/, UINT nStyle)
{
  if (!(nStyle & UIS_NOBORDERS)) {
    if (nStyle & UIS_POPOUT) {

      HighlightRect(hDC, rectPane);
    }

    // Draw pane border:
    draw_3drect_inR(hDC, &rectPane, s->m_clrPaneBorder, s->m_clrPaneBorder);
  }
}
void CBCGPVisualManagerXP::OnDrawComboDropButton(HDDC hDC, RECT rect,
    BOOL bDisabled,
    BOOL bIsDropped,
    BOOL bIsHighlighted,
    CBCGPToolbarComboBoxButton* /*pButton*/)
{
  ASSERT(hDC);
  COLORREF clrText = globalData.clrWindowText;

  if (bIsDropped || bIsHighlighted) {
    OnFillHighlightedArea(hDC, rect,
        bIsDropped ? &s->m_clrHighlightDn : &s->m_clrHighlight,
        NULL);

    if (bIsDrawOnGlass) {

      draw_line(hDC, rect.left, rect.top, rect.left, rect.bottom, s->m_clrMenuItemBorder);
    }
    else {
      COLORREF _clr = (&s->m_penMenuItemBorder);
      TMoveTo(hDC, rect.left, rect.top);
      _LineTo(hDC, rect.left, rect.bottom);

    }
  }
  else {
    draw_fillrectR(hDC, &rect, globalData.clrBtnFace);

    if (bIsDrawOnGlass) {

      DrawRect(hDC, rect, 0, globalData.clrWindow);
    }
    else {
      draw_3drect_inR(hDC, &rect, globalData.clrBtnWindow, globalData.clrBtnWindow);
    }
  }

  DrawMenuImages(hDC, IdArowDown, rect,
      bDisabled ? ImageGray : (bIsDropped && bIsHighlighted) ?
      ImageWhite : ImageBlack);
  hDC->SetTextColor(clrText);
}
void CBCGPVisualManagerXP::OnDrawComboBorder(HDDC hDC, RECT rect,
    BOOL /*bDisabled*/,
    BOOL bIsDropped,
    BOOL bIsHighlighted,
    CBCGPToolbarComboBoxButton* /*pButton*/)
{
  if (bIsHighlighted || bIsDropped) {
    DeflateRect(&rect, 1, 1);

    if (bIsDrawOnGlass) {

      DrawRect(hDC, rect, 0, s->m_clrMenuItemBorder);
    }
    else {
      draw_3drect_inR(hDC, &rect,  s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
    }
  }
}
void CBCGPVisualManagerXP::OnDrawTabCloseButton(HDDC hDC, RECT rect,
    const CBCGPBaseTabWnd* /*pTabWnd*/,
    BOOL bIsHighlighted,
    BOOL bIsPressed,
    BOOL /*bIsDisabled*/)
{
  if (bIsHighlighted) {
    OnFillHighlightedArea(hDC, rect, bIsPressed ? &s->m_clrHighlightDn : &s->m_clrHighlight, NULL);
  }

  DrawMenuImages(hDC, IdClose, rect, ImageBlack);

  if (bIsHighlighted) {
    draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }
}
void CBCGPVisualManagerXP::OnEraseTabsButton(HDDC hDC, RECT rect,
    CBCGPButton* pButton,
    CBCGPBaseTabWnd* pWndTab)
{
  ASSERT(hDC);

  ASSERT(pWndTab);

  if (pWndTab->IsFlatTab()) {
    COLORREF  pBrush = IsPressed ?
        &s->m_clrHighlightDn : IsHighlighted ? &s->m_clrHighlight : globalData.clrBtnFace;
    draw_fillrectR(hDC, &rect, pBrush);
    OnFillHighlightedArea(hDC, rect, pBrush, NULL);
  }
  else if (pWndTab->IsDialogControl()) {
    if (pWndTab->IsVisualManagerStyle()) {
      OnFillDialog(hDC, pWndTab->GetParent(), rect);
    }
    else {
      draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
    }
  }
  else {
    draw_fillrectR(hDC, &rect, &s->m_clrTabBack);
  }
}
void CBCGPVisualManagerXP::OnDrawTabsButtonBorder(HDDC hDC, RECT& rect,
    CBCGPButton* pButton, UINT /*uiState*/,
    CBCGPBaseTabWnd* pWndTab)
{
  ASSERT(hDC);

  ASSERT(pWndTab);

  if (pWndTab->IsFlatTab()) {
    if (pButton->IsPushed() || IsHighlighted) {
      COLORREF clrDark = globalData.clrBtnDkShadow;
      draw_3drect_inR(hDC, &rect, clrDark, clrDark);
    }
  }
  else {
    if (pButton->IsPushed() || IsHighlighted) {
      if (IsPressed) {
        draw_3drect_inR(hDC, &rect, globalData.clrBtnDkShadow, s->m_clrGripper);
      }
      else {
        draw_3drect_inR(hDC, &rect, s->m_clrGripper, globalData.clrBtnDkShadow);
      }
    }
  }
}
COLORREF CBCGPVisualManagerXP::OnFillMiniFrameCaption(HDDC hDC,
    RECT rectCaption,
    BOOL bActive)
{
  ASSERT(hDC);
  BOOL bIsToolBar = FALSE;
  BOOL bIsTasksPane = FALSE;

  if (DYNAMIC_DOWNCAST(CBCGPBaseToolBar, pFrameWnd->GetControlBar()) != NULL) {
    bActive = FALSE;
    bIsToolBar = TRUE;
  }

  if (bIsToolBar) {
    draw_fillrectR(hDC, &rectCaption, &s->m_clrFloatToolBarBorder);
    return globalData.clrCaptionText;
  }
  else if (bIsTasksPane) {
    draw_fillrectR(hDC, &rectCaption, globalData.clrBtnFace);
    return globalData.clrBtnText;
  }

  draw_fillrectR(hDC, &rectCaption,
      bActive ? globalData.clrActiveCaption : globalData.clrInactiveCaption);
  // get the text color
  return globalData.clrCaptionText;
}
void CBCGPVisualManagerXP::OnDrawMiniFrameBorder(
    HDDC hDC,
    RECT rectBorder, RECT rectBorderSize)
{
  ASSERT(hDC);
  BOOL bIsTasksPane = FALSE;

  if (bIsTasksPane) {
    COLORREF  pOldBrush = _clr = (&s->m_clrFloatToolBarBorder);
    ASSERT(pOldBrush != NULL);
    TPatBlt(hDC, rectBorder.left, rectBorder.top, rectBorderSize.left, rectBorder RCH(&), PATCOPY);
    TPatBlt(hDC, rectBorder.left, rectBorder.top, rectBorder RCW(&), rectBorderSize.top, PATCOPY);
    TPatBlt(hDC, rectBorder.right - rectBorderSize.right, rectBorder.top, rectBorderSize.right, rectBorder RCH(&), PATCOPY);
    TPatBlt(hDC, rectBorder.left, rectBorder.bottom - rectBorderSize.bottom, rectBorder RCW(&), rectBorderSize.bottom, PATCOPY);
    rectBorderSize DeflateRect(&, 2, 2);
    DeflateRect(&rectBorder, 2, 2);
    _clr = (bIsTasksPane ? globalData.clrLight : globalData.clrBtnFace);
    TPatBlt(hDC, rectBorder.left, rectBorder.top + 1, rectBorderSize.left, rectBorder RCH(&) - 2, PATCOPY);
    TPatBlt(hDC, rectBorder.left + 1, rectBorder.top, rectBorder RCW(&) - 2, rectBorderSize.top, PATCOPY);
    TPatBlt(hDC, rectBorder.right - rectBorderSize.right, rectBorder.top + 1, rectBorderSize.right, rectBorder RCH(&) - 2, PATCOPY);
    TPatBlt(hDC, rectBorder.left + 1, rectBorder.bottom - rectBorderSize.bottom, rectBorder RCW(&) - 2, rectBorderSize.bottom, PATCOPY);
    _clr = (pOldBrush);
  }
  else {
    CBCGPVisualManager::OnDrawMiniFrameBorder(hDC, pFrameWnd, rectBorder, rectBorderSize);
  }
}
void CBCGPVisualManagerXP::OnDrawFloatingToolbarBorder(
    HDDC hDC,
    RECT rectBorder, RECT rectBorderSize)
{
  ASSERT(hDC);
  COLORREF  pOldBrush = _clr = (&s->m_clrFloatToolBarBorder);
  ASSERT(pOldBrush != NULL);
  TPatBlt(hDC, rectBorder.left, rectBorder.top, rectBorderSize.left, rectBorder RCH(&), PATCOPY);
  TPatBlt(hDC, rectBorder.left, rectBorder.top, rectBorder RCW(&), rectBorderSize.top, PATCOPY);
  TPatBlt(hDC, rectBorder.right - rectBorderSize.right, rectBorder.top, rectBorderSize.right, rectBorder RCH(&), PATCOPY);
  TPatBlt(hDC, rectBorder.left, rectBorder.bottom - rectBorderSize.bottom, rectBorder RCW(&), rectBorderSize.bottom, PATCOPY);
  rectBorderSize DeflateRect(&, 2, 2);
  DeflateRect(&rectBorder, 2, 2);
  _clr = (globalData.clrBtnFace);
  TPatBlt(hDC, rectBorder.left, rectBorder.top + 1, rectBorderSize.left, rectBorder RCH(&) - 2, PATCOPY);
  TPatBlt(hDC, rectBorder.left + 1, rectBorder.top, rectBorder RCW(&) - 2, rectBorderSize.top, PATCOPY);
  TPatBlt(hDC, rectBorder.right - rectBorderSize.right, rectBorder.top + 1, rectBorderSize.right, rectBorder RCH(&) - 2, PATCOPY);
  TPatBlt(hDC, rectBorder.left + 1, rectBorder.bottom - rectBorderSize.bottom, rectBorder RCW(&) - 2, rectBorderSize.bottom, PATCOPY);
  _clr = (pOldBrush);
}
COLORREF CBCGPVisualManagerXP::GetToolbarButtonTextColor(CBCGPToolbarButton* pButton,
    CBCGPVisualManager::int state)
{


  if (!globalData.IsHighContastMode()) {
    BOOL bDisabled = (CBCGPToolBar::IsCustomizeMode() && !pButton->IsEditable()) ||
        (!CBCGPToolBar::IsCustomizeMode() && (pButton->s->m_nStyle & UIS_DISABLED));

    if (pButton->IsKindOf(RUNTIME_CLASS(CBCGPOutlookButton))) {
      if (bDisabled) {
        return globalData.clrGrayedText;
      }

      return globalData.IsHighContastMode() ?
          globalData.clrWindowText : globalData.clrBtnText;
    }

    if (state == ButtonsIsHighlighted &&
        (pButton->s->m_nStyle & (UIS_PUSHED | UIS_CHECKED))) {
      return globalData.clrTextHilite;
    }
  }

  return  CBCGPVisualManager::GetToolbarButtonTextColor(pButton, state);
}
BOOL CBCGPVisualManagerXP::IsToolBarButtonDefaultBackground(CBCGPToolbarButton* pButton,
    CBCGPVisualManager::int state)
{

  BOOL bIsChecked = pButton->s->m_nStyle & (UIS_CHECKED | UIS_INDETERMINATE);
  return !bIsChecked && state != ButtonsIsHighlighted && state != ButtonsIsPressed;
}
void CBCGPVisualManagerXP::OnDrawEditBorder(HDDC hDC, RECT rect,
    BOOL bDisabled,
    BOOL bIsHighlighted,
    CBCGPToolbarEditBoxButton* pButton)
{
  if (!CBCGPToolbarEditBoxButton::IsFlatMode()) {
    CBCGPVisualManager::OnDrawEditBorder(hDC, rect, bDisabled, bIsHighlighted, pButton);
    return;
  }

  if (bIsHighlighted) {
    draw_3drect_inR(hDC, &rect,  s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }
}
void CBCGPVisualManagerXP::OnDrawTasksGroupCaption(HDDC hDC,
    BOOL bIsHighlighted, BOOL bIsSelected, BOOL bCanCollapse)
{
  ASSERT(hDC);
  BOOL bIsToolBox = FALSE;
  RECT rectGroup = rect;

  if (bIsToolBox) {
    RECT rectFill = rectGroup;
    rectFill DeflateRect(&, 1, 0, 1, 1);
    COLORREF brFill(globalData.IsHighContastMode() ?
        globalData.clrWindow : globalData.clrBtnShadow);
    draw_fillrectR(hDC, &rectFill, brFill);

    if (bCanCollapse) {
      //--------------------
      // Draw expanding box:
      //--------------------
      int nBoxSize = 9;
      int nBoxOffset = 6;

      if (GetRibbonImageScale() != 1.) {
        nBoxSize = (int)(.5 + nBoxSize * GetRibbonImageScale());
      }

      RECT rectButton = rectFill;
      rectButton.left += nBoxOffset;
      rectButton.right = rectButton.left + nBoxSize;
      rectButton.top = rectButton CenterPoint(&).y - nBoxSize / 2;
      rectButton.bottom = rectButton.top + nBoxSize;
      draw_fillrectR(hDC, &rectButton, globalData.clrBtnFace);
      OnDrawExpandingBox(hDC, rectButton, !bIsCollapsed,
          globalData.clrBtnText);
      rectGroup.left = rectButton.right + nBoxOffset;
      bCanCollapse = FALSE;
    }
  }

  // ------------------------------
  // Draw group caption (Office XP)
  // ------------------------------
  // ---------------------------
  // Draw an icon if it presents
  // ---------------------------
  BOOL bShowIcon = (hIcon != NULL
      && sizeIcon.cx < rectGroup RCW(&) - rectGroup RCH(&));

  if (bShowIcon) {
    OnDrawTasksGroupIcon(hDC, pGroup, 5, bIsHighlighted, bIsSelected, bCanCollapse);
  }

  // -----------------------
  // Draw group caption text
  // -----------------------
  CFont* pFontOld = _clr = (globalData.fontBold);
  COLORREF clrTextOld = globalData.clrWindowText;

  if (bIsToolBox && !globalData.IsHighContastMode()) {
    hDC->SetTextColor(globalData.clrWindow);
  }
  else {
    if (bCanCollapse && bIsHighlighted) {
      clrTextOld = hDC->SetTextColor(clrTextHot == 0 ?
          globalData.clrWindowText : clrTextHot);
    }
    else {
      clrTextOld = hDC->SetTextColor(clrText == 0 ?
          globalData.clrWindowText : clrText);
    }
  }

  int nBkModeOld = hDC->SetBkMode(TRANSPARENT);
  int nTaskPaneHOffset = pPage->s->m_pTaskPane->GetGroupCaptionHorzOffset();
  int nTaskPaneVOffset = pPage->s->m_pTaskPane->GetGroupCaptionVertOffset();
  int nCaptionHOffset = (nTaskPaneHOffset != -1 ? nTaskPaneHOffset : s->m_nGroupCaptionHorzOffset);
  RECT rectText = rectGroup;
  rectText.left += (bShowIcon ? sizeIcon.cx + 5 : nCaptionHOffset);
  rectText.top += (nTaskPaneVOffset != -1 ? nTaskPaneVOffset : s->m_nGroupCaptionVertOffset);
  rectText.right = MAX(rectText.left,
      rectText.right - (bCanCollapse ? rectGroup RCH(&) : nCaptionHOffset));
  draw_textR(hDC, strName, rectText, DT_SINGLELINE | DT_VCENTER);
  hDC->SetBkMode(nBkModeOld);
  _clr = (pFontOld);


  // -------------------------
  // Draw group caption button
  // -------------------------
  if (bCanCollapse && !strName.IsEmpty()) {
    SIZE sizeButton = CBCGPMenuImages::Size();
    RECT rectButton = rectGroup;
    rectButton.left = MAX(rectButton.left, rectButton.right - sizeButton.cx);
    rectButton.top = MAX(rectButton.top, rectButton.bottom - sizeButton.cy);

    if (rectButton RCW(&) >= sizeButton.cx & RCH(&rectButton) >= sizeButton.cy) {
      if (bIsHighlighted) {
        // Draw button frame
        COLORREF  pPenOld = (COLORREF) _clr = (globalData.clrHilite);
        COLORREF  pBrushOld = (COLORREF) _clr = (&s->m_clrHighlight);
        COLORREF clrBckOld = clrBkColor;
        hDC->Rectangle(&rectButton);
        hDC->SetBkColor(clrBckOld);
        _clr = (pPenOld);
        _clr = (pBrushOld);
      }

      if (!bIsCollapsed) {
        DrawMenuImages(hDC, IdArowUp, rectButton.TopLeft());
      }
      else {
        DrawMenuImages(hDC, IdArowDown, rectButton.TopLeft());
      }
    }
  }
}
void CBCGPVisualManagerXP::OnFillTasksGroupInterior(HDDC hDC, RECT rect, BOOL /*bSpecial*/)
{
  ASSERT(hDC);
  // Draw underline
  COLORREF  pPenOld = (COLORREF) _clr = (globalData.clrBtnShadow);
  TMoveTo(hDC, rect.left, rect.top);
  _LineTo(hDC, rect.right, rect.top);
  _clr = (pPenOld);
}
void CBCGPVisualManagerXP::OnDrawTasksGroupAreaBorder(HDDC /*hDC*/, RECT /*rect*/,
    BOOL /*bSpecial*/, BOOL /*bNoTitle*/)
{
}
void CBCGPVisualManagerXP::OnDrawTask(HDDC hDC, CBCGPTask* pTask, CImageList* pIcons, BOOL bIsHighlighted, BOOL /*bIsSelected*/)
{
  ASSERT(hDC);
  ASSERT(pIcons);
  ASSERT(pTask != NULL);
  RECT rectText = rect;

  if (bIsSeparator) {
    COLORREF  pPenOld = (COLORREF) _clr = (globalData.clrBtnShadow);
    TMoveTo(hDC, rectText.left, CenterPoint(&rectText).y);
    _LineTo(hDC, rectText.right, CenterPoint(&rectText).y);
    _clr = (pPenOld);
    return;
  }

  // ---------
  // Draw icon
  // ---------
  SIZE sizeIcon(0, 0);
  ::ImageList_GetIconSize(pIcons->m_hImageList, (int*) &sizeIcon.cx, (int*) &sizeIcon.cy);

  if (nIcon >= 0 && sizeIcon.cx > 0) {
    pIcons->Draw(hDC, nIcon, rectText.TopLeft(), ILD_TRANSPARENT);
  }

  int nTaskPaneOffset = pPage->s->m_pTaskPane->GetTasksIconHorzOffset();
  rectText.left += sizeIcon.cx + (nTaskPaneOffset != -1 ? nTaskPaneOffset : s->m_nTasksIconHorzOffset);
  // ---------
  // Draw text
  // ---------
  BOOL bIsLabel = (uiCommandID == 0);
  CFont* pFontOld = NULL;
  COLORREF clrTextOld = globalData.clrWindowText;

  if (bIsLabel) {
    pFontOld = _clr = (
        bIsBold ? globalData.fontBold : globalData.fontRegular);
    hDC->SetTextColor(clrText == 0 ?
        globalData.clrWindowText : clrText);
  }
  else if (!bEnabled) {
    hDC->SetTextColor(globalData.clrGrayedText);
    pFontOld = _clr = (globalData.fontRegular);
  }
  else if (bIsHighlighted) {
    hDC->SetTextColor(clrTextHot == 0 ?
        s->m_clrTaskPaneHotText : clrTextHot);
    pFontOld = _clr = (globalData.fontUnderline);
  }
  else {
    hDC->SetTextColor(clrText == 0 ?
        globalData.clrWindowText : clrText);
    pFontOld = _clr = (globalData.fontRegular);
  }

  int nBkModeOld = hDC->SetBkMode(TRANSPARENT);
  CBCGPTasksPane* pTaskPane = pPage->s->m_pTaskPane;
  ASSERT(pTaskPane);
  BOOL bMultiline = bIsLabel ?
      pTaskPane->IsWrapLabelsEnabled() : pTaskPane->IsWrapTasksEnabled();

  if (bMultiline) {
    draw_textR(hDC, strName, rectText, DT_WORDBREAK);
  }
  else {
    const char* strText = strName;
    strText.Remove(_T('\n'));
    strText.Remove(_T('\r'));
    draw_textR(hDC, strText, rectText, DT_SINGLELINE | DT_VCENTER | DT_END_ELLIPSIS);
  }

  hDC->SetBkMode(nBkModeOld);
  _clr = (pFontOld);

}
void CBCGPVisualManagerXP::OnDrawScrollButtons(HDDC hDC, RECT  rect, const int nBorderSize,
    int iImage, BOOL bHilited)
{
  ASSERT(hDC);
  RECT rectFill = rect;
  rectFill.top -= nBorderSize;
  draw_fillrectR(hDC, &rectFill, globalData.clrWindow);

  if (bHilited) {
    draw_fillrectR(hDC, &rect, &s->m_clrHighlight);
    draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }

  DrawMenuImages(hDC,  iImage, rect);
}
void CBCGPVisualManagerXP::OnDrawSpinButtons(HDDC hDC, RECT rectSpin,
    int nState, BOOL bOrientation, CBCGPSpinButtonCtrl* pSpinCtrl)
{
  ASSERT(hDC);
  RECT rect[2];
  rect[0] = rect[1] = rectSpin;

  if (!bOrientation) {
    rect[0] DeflateRect(&, 0, 0, 0, RCH(&rect[0]) / 2);
    rect[1].top = rect[0].bottom ;
  }
  else {
    rect[0] DeflateRect(&, 0, 0, rect[0] RCW(&) / 2, 0);
    rect[1].left = rect[0].right ;
  }

  int id[2][2] = {{IdArowUp, IdArowDown}, {IdArowLeft, IdArowRight}};
  int idxPressed = (nState & (SPIN_PRESSEDUP | SPIN_PRESSEDDOWN)) - 1;
  int idxHighlighted = -1;

  if (nState & SPIN_HIGHLIGHTEDUP) {
    idxHighlighted = 0;
  }
  else if (nState & SPIN_HIGHLIGHTEDDOWN) {
    idxHighlighted = 1;
  }

  BOOL bDisabled = nState & SPIN_DISABLED;

  for (int i = 0; i < 2; i ++) {
    if (idxPressed == i || idxHighlighted == i) {
      OnFillHighlightedArea(hDC, rect[i],
          (idxPressed == i) ? &s->m_clrHighlightDn : &s->m_clrHighlight, NULL);
    }
    else {
      OnFillSpinButton(hDC, pSpinCtrl, rect[i], bDisabled);
    }

    DrawMenuImages(hDC, id[bOrientation ? 1 : 0][i], rect[i],
        bDisabled ? ImageGray : ImageBlack);
  }

  if (idxHighlighted >= 0) {
    RECT rectHot = rect[idxHighlighted];

    if (bIsDrawOnGlass) {

      DrawRect(hDC, rectHot, 0, s->m_clrMenuItemBorder);
    }
    else {
      draw_3drect_inR(hDC, &rectHot, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
    }
  }
}
void CBCGPVisualManagerXP::OnFillSpinButton(HDDC hDC, RECT rect, BOOL bDisabled)
{
  if (bIsDrawOnGlass) {

    DrawRect(hDC, rect,
        bDisabled ? globalData.clrBtnFace,
        globalData.clrBtnHilite);
  }
  else {
    draw_fillrectR(hDC, &rect, bDisabled ? globalData.clrBtnFace);
    draw_3drect_inR(hDC, &rect, globalData.clrBtnHilite, globalData.clrBtnHilite);
  }
}
void CBCGPVisualManagerXP::OnFillHighlightedArea(HDDC hDC, RECT rect,
    COLORREF  pBrush, CBCGPToolbarButton* /*pButton*/)
{
  ASSERT(hDC);
  ASSERT(pBrush);

  if (bIsDrawOnGlass) {
    LOGBRUSH br;
    pBrush->GetLogBrush(br);

    DrawRect(hDC, rect, br.lbColor, 0);
  }
  else {
    draw_fillrectR(hDC, &rect, pBrush);
  }
}
void CBCGPVisualManagerXP::OnDrawSplitterBorder(HDDC hDC,  RECT rect)
{
  ASSERT(hDC);
  draw_3drect_inR(hDC, &rect, globalData.clrBtnShadow, globalData.clrBtnShadow);
  InflateRect(&rect, -CX_BORDER, -CY_BORDER);
  draw_3drect_inR(hDC, &rect, globalData.clrBtnFace, globalData.clrBtnFace);
}
void CBCGPVisualManagerXP::OnDrawSplitterBox(HDDC hDC,  RECT& rect)
{
  ASSERT(hDC);
  draw_3drect_inR(hDC, &rect, globalData.clrBtnFace, globalData.clrBtnFace);
}
BOOL CBCGPVisualManagerXP::OnDrawCalculatorButton(HDDC hDC,
    RECT rect, CBCGPToolbarButton* /*pButton*/,
    CBCGPVisualManager::int state,
    int /*cmd*/ /* CBCGPCalculator::CalculatorCommands */,
    CBCGPCalculator* /*pCalculator*/)
{
  ASSERT(hDC);

  switch (state) {
  case ButtonsIsPressed:
    draw_fillrectR(hDC, &rect, &s->m_clrHighlightDn);
    hDC->SetTextColor(globalData.clrWindow);
    break;

  case ButtonsIsHighlighted:
    draw_fillrectR(hDC, &rect, &s->m_clrHighlight);
    break;
  }

  draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  return TRUE;
}
BOOL CBCGPVisualManagerXP::OnDrawCalculatorDisplay(HDDC hDC, RECT rect,
    const char* /*strText*/, BOOL /*bMem*/,
    CBCGPCalculator* /*pCalculator*/)
{
  draw_fillrectR(hDC, &rect, globalData.clrWindow);
  draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  return TRUE;
}
BOOL CBCGPVisualManagerXP::OnDrawBrowseButton(HDDC hDC, RECT rect,
    CBCGPEdit* /*pEdit*/, CBCGPVisualManager::int state, COLORREF /*clrText*/)
{
  ASSERT(hDC);
  RECT rectFrame = rect;
  rectFrame InflateRect(&, 0, 1, 1, 1);

  switch (state) {
  case ButtonsIsPressed:
    draw_fillrectR(hDC, &rect, &s->m_clrHighlightDn);
    draw_3drect_inR(hDC, &rectFrame, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
    hDC->SetTextColor(globalData.clrWindow);
    break;

  case ButtonsIsHighlighted:
    draw_fillrectR(hDC, &rect, &s->m_clrHighlight);
    draw_3drect_inR(hDC, &rectFrame, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
    break;

  default:
    draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
    draw_3drect_inR(hDC, &rect, globalData.clrBtnHilite, globalData.clrBtnHilite);
    break;
  }

  return TRUE;
}
COLORREF CBCGPVisualManagerXP::GetWindowColor()
{
  return globalData.clrWindow;
}
COLORREF CBCGPVisualManagerXP::GetAutoHideButtonTextColor(CBCGPAutoHideButton* /*pButton*/)
{
  return globalData.clrBtnDkShadow;
}
void CBCGPVisualManagerXP::OnDrawAppBarBorder(
    HDDC hDC, CBCGPAppBarWnd* /*pAppBarWnd*/,
    RECT rectBorder, RECT rectBorderSize)
{
  ASSERT(hDC);
  COLORREF  pOldBrush = _clr = (&s->m_clrFloatToolBarBorder);
  ASSERT(pOldBrush != NULL);
  TPatBlt(hDC, rectBorder.left, rectBorder.top, rectBorderSize.left, rectBorder RCH(&), PATCOPY);
  TPatBlt(hDC, rectBorder.left, rectBorder.top, rectBorder RCW(&), rectBorderSize.top, PATCOPY);
  TPatBlt(hDC, rectBorder.right - rectBorderSize.right, rectBorder.top, rectBorderSize.right, rectBorder RCH(&), PATCOPY);
  TPatBlt(hDC, rectBorder.left, rectBorder.bottom - rectBorderSize.bottom, rectBorder RCW(&), rectBorderSize.bottom, PATCOPY);
  rectBorderSize DeflateRect(&, 2, 2);
  DeflateRect(&rectBorder, 2, 2);
  _clr = (globalData.clrLight);
  TPatBlt(hDC, rectBorder.left, rectBorder.top + 1, rectBorderSize.left, rectBorder RCH(&) - 2, PATCOPY);
  TPatBlt(hDC, rectBorder.left + 1, rectBorder.top, rectBorder RCW(&) - 2, rectBorderSize.top, PATCOPY);
  TPatBlt(hDC, rectBorder.right - rectBorderSize.right, rectBorder.top + 1, rectBorderSize.right, rectBorder RCH(&) - 2, PATCOPY);
  TPatBlt(hDC, rectBorder.left + 1, rectBorder.bottom - rectBorderSize.bottom, rectBorder RCW(&) - 2, rectBorderSize.bottom, PATCOPY);
  _clr = (pOldBrush);
}
void CBCGPVisualManagerXP::GetSmartDockingBaseMarkerColors(
    COLORREF clrBaseGroupBackground,
    COLORREF clrBaseGroupBorder)
{
  clrBaseGroupBackground = s->m_clrBtnBkgnd;
  clrBaseGroupBorder = s->m_clrMenuBorder;
}
void CBCGPVisualManagerXP::OnDrawButtonSeparator(HDDC hDC,
    CBCGPToolbarButton* /*pButton*/, RECT rect, CBCGPVisualManager::int /*state*/,
    BOOL bHorz)
{
  COLORREF _clr = (&s->m_penMenuItemBorder);

  if (bHorz) {
    TMoveTo(hDC, rect.left, rect.top);
    _LineTo(hDC, rect.left, rect.bottom);
  }
  else {
    TMoveTo(hDC, rect.left, rect.top);
    _LineTo(hDC, rect.right, rect.top);
  }


}
void CBCGPVisualManagerXP::OnDrawPopupWindowBorder(HDDC hDC, RECT rect)
{
  ASSERT(hDC);
  draw_3drect_inR(hDC, &rect, s->m_clrMenuBorder, s->m_clrMenuBorder);
  DeflateRect(&rect, 1, 1);
  draw_3drect_inR(hDC, &rect, s->m_clrMenuLight, s->m_clrMenuLight);
}
COLORREF  CBCGPVisualManagerXP::OnDrawPopupWindowCaption(HDDC hDC, RECT rectCaption)
{
  ASSERT(hDC);
  draw_fillrectR(hDC, &rectCaption, &s->m_clrHighlight);
  // get the text color
  return globalData.clrBtnText;
}
void CBCGPVisualManagerXP::OnErasePopupWindowButton(HDDC hDC, RECT rc)
{
  ASSERT(hDC);


  if (IsPressed) {
    COLORREF br = (s->m_clrHighlightDn);
    draw_fillrectR(hDC, && rc, br);
    return;
  }
  else if (IsHighlighted || pButton->IsPushed()) {
    COLORREF br = (s->m_clrHighlight);
    draw_fillrectR(hDC, && rc, br);
    return;
  }

  RECT rectParent;
  pButton->GetParent()->GetClientRect(rectParent);
  pButton->GetParent()->MapWindowPoints(pButton, rectParent);
  OnFillPopupWindowBackground(hDC, rectParent);
}
void CBCGPVisualManagerXP::OnDrawPopupWindowButtonBorder(HDDC hDC, RECT rc)
{
  ASSERT(hDC);


  if (IsHighlighted || pButton->IsPushed() ||
      IsCaptionButton) {
    draw_3drect_inR(hDC, &rc, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }
}
void CBCGPVisualManagerXP::OnFillPopupWindowBackground(HDDC hDC, RECT rect)
{
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &s->m_clrMenuLight);
}
COLORREF CBCGPVisualManagerXP::OnFillPlannerCaption(HDDC hDC, CBCGPPlannerView* pView,
    RECT rect, BOOL bIsToday, BOOL bIsSelected, BOOL bNoBorder/* = FALSE*/, BOOL bHorz/* = TRUE*/)
{
  ASSERT(hDC);

  if (bIsToday) {
    DeflateRect(&rect, 1, 1);
    draw_fillrectR(hDC, &rect, &s->m_clrHighlight);
    COLORREF pen = (s->m_clrMenuItemBorder);
    COLORREF _clr = (pen);
    TMoveTo(hDC, rect.left, rect.bottom);
    _LineTo(hDC, rect.right, rect.bottom);

    return globalData.clrBtnText;
  }

  return CBCGPVisualManager::OnFillPlannerCaption(hDC, pView, rect, bIsToday,
      bIsSelected, bNoBorder, bHorz);
}
void CBCGPVisualManagerXP::OnDrawPlannerTimeLine(HDDC hDC, RECT rect)
{
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &s->m_clrHighlight);
  COLORREF _clr = (&s->m_penSeparator);
  TMoveTo(hDC, rect.left, rect.bottom);
  _LineTo(hDC, rect.right, rect.bottom);

}
void CBCGPVisualManagerXP::GetCalendarColors(const CBCGPCalendar* pCalendar,
    CBCGPCalendarColors& colors)
{
  CBCGPVisualManager::GetCalendarColors(pCalendar, colors);
  colors->clrSelected = s->m_clrHighlight;
}
COLORREF CBCGPVisualManagerXP::GetPropListGroupColor()
{
  ASSERT(pPropList);

  if (globalData.m_nBitsPerPixel <= 8) {
    return CBCGPVisualManager::GetPropListGroupColor(pPropList);
  }

  return PixelAlpha(
      pPropList->DrawControlBarColors() ?
      globalData.clrBtnFace, 94);
}
COLORREF CBCGPVisualManagerXP::GetPropListGroupTextColor()
{
  ASSERT(pPropList);
  return pPropList->DrawControlBarColors() ?
      globalData.clrBtnShadow;
}
COLORREF CBCGPVisualManagerXP::OnFillRibbonButton(
    HDDC hDC,
)
{
  ASSERT(hDC);


  if (pButton->IsDefaultPanelButton() && !IsQATMode) {
    return 0;
  }

  RECT rect = rect;
  const BOOL bIsMenuMode = IsMenuMode && !pButton->IsPaletteIcon();
  const BOOL bIsHighlighted =
      ((IsHighlighted || IsDroppedDown) &&
          !IsDisabled) || IsFocused;

  if (IsRibbonEdit) {
    COLORREF clrBorder = globalData.clrBtnShadow;
    RECT rectCommand = pButton->GetCommandRect();

    if (pButton->GetLocationInGroup() != CBCGPBaseRibbonElement::RibbonElementNotInGroup) {
      rectCommand.right++;
    }

    if (bIsDrawOnGlass) {

      if (bIsHighlighted) {
        DrawRect(hDC, rect, globalData.clrWindow, clrBorder);
      }
      else {
        DrawRect(hDC, rect, globalData.clrBtnFace, clrBorder);
      }
    }
    else {
      if (bIsHighlighted) {
        draw_fillrectR(hDC, &rectCommand, globalData.clrWindow);
      }
      else {
        draw_fillrectR(hDC, &rectCommand, globalData.clrBtnFace);

        HighlightRect(hDC, rectCommand);
      }

      draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
    }

    return 0;
  }

  if (!IsChecked && !bIsHighlighted) {
    return 0;
  }

  if (IsChecked && bIsMenuMode && !bIsHighlighted) {
    return 0;
  }

  RECT rectMenu = pButton->GetMenuRect();

  if (pButton->GetLocationInGroup() != CBCGPBaseRibbonElement::RibbonElementNotInGroup) {
    DeflateRect(&rect, 1, 1);
  }

  RECT rectCommand(0, 0, 0, 0);

  if (!rectMenu.IsRectEmpty()) {
    rectCommand = pButton->GetCommandRect();

    if (pButton->GetLocationInGroup() != CBCGPBaseRibbonElement::RibbonElementNotInGroup) {
      rectMenu DeflateRect(&, 0, 1, 1, 1);
      rectCommand DeflateRect(&, 1, 1, 0, 1);
    }
  }

  if (!rectMenu.IsRectEmpty() && bIsHighlighted) {
    if (pButton->IsCommandAreaHighlighted()) {
      OnFillHighlightedArea(hDC, rectCommand,
          (IsPressed || IsDroppedDown) && !bIsMenuMode ?
          &s->m_clrHighlightDn : &s->m_clrHighlight, NULL);
    }
    else {
      OnFillHighlightedArea(hDC, rectCommand,
          &s->m_clrHighlight, NULL);

      HighlightRect(hDC, rectCommand);
    }

    if (pButton->IsMenuAreaHighlighted()) {
      OnFillHighlightedArea(hDC, rectMenu,
          (IsPressed || IsDroppedDown) && !bIsMenuMode ?
          &s->m_clrHighlightDn : &s->m_clrHighlight, NULL);
    }
    else {
      OnFillHighlightedArea(hDC, rectMenu,
          &s->m_clrHighlight, NULL);

      HighlightRect(hDC, rectMenu);
    }
  }
  else {
    COLORREF  pBrush =
        (IsPressed || IsDroppedDown) && !bIsMenuMode ?
        &s->m_clrHighlightDn : &s->m_clrHighlight;
    RECT rectFill = rect;

    if (IsChecked && !bIsMenuMode) {
      pBrush = bIsHighlighted ?
          &s->m_clrHighlightDn : &s->m_clrHighlightChecked;

      if (!bIsHighlighted && !rectCommand.IsRectEmpty()) {
        rectFill = rectCommand;
      }
    }

    OnFillHighlightedArea(hDC, rectFill, pBrush, NULL);
  }

  return 0;
}
void CBCGPVisualManagerXP::OnDrawRibbonCategoryScroll(
    HDDC hDC,
)
{
  ASSERT(hDC);

  RECT rect = pScroll->GetRect();
  rect.bottom--;
  OnFillHighlightedArea(hDC, rect,
      IsHighlighted ? &s->m_clrHighlight : globalData.clrBtnFace, NULL);
  BOOL bIsLeft = pScroll->IsLeftScroll();

  if (globalData.m_bIsRTL) {
    bIsLeft = !bIsLeft;
  }

  DrawMenuImages(hDC,
      bIsLeft ? IdArowLeftLarge : IdArowRightLarge,
      rect);
  draw_3drect_inR(hDC, &rect, globalData.clrBtnShadow, globalData.clrBtnShadow);
}
void CBCGPVisualManagerXP::OnDrawRibbonButtonBorder(
    HDDC hDC,
)
{
  ASSERT(hDC);


  if (pButton->IsDefaultPanelButton() && !IsQATMode) {
    return;
  }

  if (IsRibbonEdit) {
    return;
  }

  const BOOL bIsMenuMode = IsMenuMode;
  const BOOL bIsHighlighted =
      ((IsHighlighted || IsDroppedDown) &&
          !IsDisabled) || IsFocused;

  if (IsChecked && bIsMenuMode && !bIsHighlighted) {
    return;
  }

  RECT rect = rect;
  RECT rectMenu = pButton->GetMenuRect();

  if (pButton->GetLocationInGroup() != CBCGPBaseRibbonElement::RibbonElementNotInGroup) {
    DeflateRect(&rect, 1, 1);
  }

  if ((bIsHighlighted || IsChecked) &&
      (!IsDisabled || IsFocused || IsChecked)) {
    COLORREF clrLine =
        ((IsPressed || IsDroppedDown) && !bIsMenuMode) ?
        s->m_clrPressedButtonBorder : s->m_clrMenuItemBorder;

    if (bIsDrawOnGlass) {

      DrawRect(hDC, rect, 0, s->m_clrMenuItemBorder);
    }
    else {
      draw_3drect_inR(hDC, &rect, clrLine, clrLine);
    }

    if (!rectMenu.IsRectEmpty()) {
      if (pButton->GetLocationInGroup() != CBCGPBaseRibbonElement::RibbonElementNotInGroup) {
        rectMenu DeflateRect(&, 0, 1, 1, 1);
      }

      if (bIsDrawOnGlass) {

        if (IsMenuOnBottom) {
          draw_line(hDC, rectMenu.left, rectMenu.top, rectMenu.right, rectMenu.top, s->m_clrMenuItemBorder);
        }
        else {
          draw_line(hDC, rectMenu.left, rectMenu.top, rectMenu.left, rectMenu.bottom - 1, s->m_clrMenuItemBorder);
        }
      }
      else {
        COLORREF _clr = (&s->m_penMenuItemBorder);

        if (IsMenuOnBottom) {
          TMoveTo(hDC, rectMenu.left, rectMenu.top);
          _LineTo(hDC, rectMenu.right, rectMenu.top);
        }
        else {
          TMoveTo(hDC, rectMenu.left, rectMenu.top);
          _LineTo(hDC, rectMenu.left, rectMenu.bottom);
        }


      }
    }
  }
}
void CBCGPVisualManagerXP::OnDrawRibbonMenuCheckFrame(
    HDDC hDC,

    RECT rect)
{
  ASSERT(hDC);
  OnFillHighlightedArea(hDC, rect, &s->m_clrHighlight, NULL);
  draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
}
void CBCGPVisualManagerXP::OnFillRibbonMenuFrame(
    HDDC hDC,

    RECT rect)
{
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &s->m_clrMenuLight);
}
void CBCGPVisualManagerXP::OnDrawRibbonRecentFilesFrame(
    HDDC hDC,

    RECT rect)
{
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &s->m_clrBtnBkgnd);
  RECT rectSeparator = rect;
  rectSeparator.right = rectSeparator.left + 2;
  draw_3drect_inR(hDC, &rectSeparator, globalData.clrBtnShadow,
      globalData.clrBtnHilite);
}
COLORREF CBCGPVisualManagerXP::OnDrawRibbonStatusBarPane(HDDC hDC, CBCGPRibbonStatusBar* /*pBar*/,
    CBCGPRibbonStatusBarPane* pPane)
{
  ASSERT(hDC);
  ASSERT(pPane);
  RECT rect = pPane->GetRect();

  if (pPane->IsHighlighted()) {
    RECT rectButton = rect;
    rectButton DeflateRect(&, 1, 1);
    OnFillHighlightedArea(hDC, rectButton,
        pPane->IsPressed() ?
        &s->m_clrHighlightDn : &s->m_clrHighlight, NULL);
    draw_3drect_inR(hDC, &rectButton, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }

  RECT rectSeparator = rect;
  rectSeparator DeflateRect(&, 0, 2);
  rectSeparator.left = rectSeparator.right - 1;
  draw_3drect_inR(hDC, &rectSeparator, globalData.clrBtnShadow,
      globalData.clrBtnShadow);

  if (globalData.IsHighContastMode()) {
    return globalData.clrBtnText;
  }

  return 0;
}
void CBCGPVisualManagerXP::GetRibbonSliderColors(CBCGPRibbonSlider* /*pSlider*/,
    BOOL bIsHighlighted,
    BOOL bIsPressed,
    BOOL bIsDisabled,
    COLORREF clrLine,
    COLORREF clrFill)
{
  clrLine = bIsDisabled ? globalData.clrBtnShadow :
      (bIsPressed || bIsHighlighted) ? s->m_clrMenuItemBorder : globalData.clrBtnDkShadow;
  clrFill = bIsPressed && bIsHighlighted ?
      s->m_clrHighlightDn :
      bIsHighlighted ? s->m_clrHighlight : globalData.clrBtnFace;
}
void CBCGPVisualManagerXP::OnDrawRibbonQATSeparator(HDDC hDC,
    CBCGPRibbonSeparator* /*pSeparator*/, RECT rect)
{
  ASSERT(hDC);
  int x = rect CenterPoint(&).x;
  int y1 = rect.top;
  int y2 = rect.bottom - 1;

  if (bIsDrawOnGlass) {

    draw_line(hDC, x, y1, x, y2, s->m_clrSeparator);
  }
  else {
    COLORREF _clr = (&s->m_penSeparator);
    TMoveTo(hDC, x, y1);
    _LineTo(hDC, x, y2);

  }
}
void CBCGPVisualManagerXP::OnDrawRibbonColorPaletteBox(HDDC hDC, CBCGPRibbonColorButton* /*pColorButton*/,
    CBCGPRibbonPaletteIcon* /*pIcon*/,
    COLORREF color, RECT rect, BOOL bDrawTopEdge, BOOL bDrawBottomEdge,
    BOOL bIsHighlighted, BOOL bIsChecked, BOOL /*bIsDisabled*/)
{
  ASSERT(hDC);
  RECT rectFill = rect;
  rectFill DeflateRect(&, 1, 0);

  if (bIsHighlighted || bIsChecked) {
    OnFillHighlightedArea(hDC, rect, &s->m_clrHighlight, NULL);
    rectFill DeflateRect(&, 1, 2);
  }

  if (color != 0) {
    COLORREF br = (color);
    draw_fillrectR(hDC, &rectFill, br);
  }

  COLORREF clrBorder = _RGB(197, 197, 197);

  if (bDrawTopEdge && bDrawBottomEdge) {
    draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
  }
  else {
    COLORREF penBorder = (clrBorder);
    COLORREF _clr = (penBorder);
    TMoveTo(hDC, rect.left, rect.top);
    _LineTo(hDC, rect.left, rect.bottom);
    TMoveTo(hDC, rect.right - 1, rect.top);
    _LineTo(hDC, rect.right - 1, rect.bottom);

    if (bDrawTopEdge) {
      TMoveTo(hDC, rect.left, rect.top);
      _LineTo(hDC, rect.right, rect.top);
    }

    if (bDrawBottomEdge) {
      TMoveTo(hDC, rect.left, rect.bottom - 1);
      _LineTo(hDC, rect.right, rect.bottom - 1);
    }


  }

  if (bIsHighlighted || bIsChecked) {
    clrBorder = bIsChecked ? s->m_clrPressedButtonBorder : s->m_clrMenuItemBorder;
    draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
  }
}
COLORREF CBCGPVisualManagerXP::OnDrawRibbonPanel(
    HDDC hDC,

    RECT rectPanel,
)
{
  ASSERT(hDC);

  COLORREF clrText = globalData.clrBtnText;

  if (IsCollapsed && pPanel->GetDefaultButton().IsFocused()) {
    OnFillHighlightedArea(hDC, rectPanel,
        pPanel->GetDefaultButton().IsDroppedDown() ? &s->m_clrHighlightDn : &s->m_clrHighlight, NULL);

    if (GetRValue(s->m_clrHighlight) > 128 &&
        GetGValue(s->m_clrHighlight) > 128 &&
        GetBValue(s->m_clrHighlight) > 128) {
      clrText = _RGB(0, 0, 0);
    }
    else {
      clrText = _RGB(255, 255, 255);
    }
  }
  else if (IsHighlighted) {

    HighlightRect(hDC, rectPanel);
  }

  draw_3drect_inR(hDC, &rectPanel, globalData.clrBtnHilite, globalData.clrBtnHilite);
  rectPanel OffsetRect(&, -1, -1);
  draw_3drect_inR(hDC, &rectPanel, globalData.clrBtnShadow, globalData.clrBtnShadow);
  return clrText;
}
COLORREF CBCGPVisualManagerXP::OnFillListBoxItem(HDDC hDC, CBCGPListBox* /*pListBox*/, int /*nItem*/, RECT rect, BOOL bIsHighlihted, BOOL bIsSelected)
{
  ASSERT(hDC);
  COLORREF  pBrush = NULL;

  if (bIsSelected) {
    pBrush = !bIsHighlihted ? &s->m_clrHighlightChecked : &s->m_clrHighlightDn;
  }
  else if (bIsHighlihted) {
    pBrush = &s->m_clrHighlight;
  }

  OnFillHighlightedArea(hDC, rect, pBrush, NULL);
  draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  return globalData.clrBtnText;
}
COLORREF CBCGPVisualManagerXP::OnDrawMenuLabel(HDDC hDC, RECT rect)
{
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &s->m_clrBtnBkgnd);
  RECT rectSeparator = rect;
  rectSeparator.top = rectSeparator.bottom - 2;
  draw_3drect_inR(hDC, &rectSeparator, globalData.clrBtnShadow,
      globalData.clrBtnHilite);
  return globalData.clrBtnText;
}
COLORREF CBCGPVisualManagerXP::OnFillCaptionBarButton(HDDC hDC,
    RECT rect, BOOL bIsPressed, BOOL bIsHighlighted,
    BOOL bIsDisabled, BOOL bHasDropDownArrow,
    BOOL bIsSysButton)
{
  if (!pBar->IsMessageBarMode()) {
    return CBCGPVisualManager::OnFillCaptionBarButton(hDC, pBar,
        rect, bIsPressed, bIsHighlighted,
        bIsDisabled, bHasDropDownArrow, bIsSysButton);
  }

  if (bIsDisabled) {
    return 0;
  }

  COLORREF clrText = globalData.clrBtnText;

  if (bIsHighlighted) {
    OnFillHighlightedArea(hDC, rect, &s->m_clrHighlight, NULL);

    if (GetRValue(s->m_clrHighlight) > 128 &&
        GetGValue(s->m_clrHighlight) > 128 &&
        GetBValue(s->m_clrHighlight) > 128) {
      clrText = _RGB(0, 0, 0);
    }
    else {
      clrText = _RGB(255, 255, 255);
    }
  }
  else if (!bIsSysButton) {
    draw_fillrectR(hDC, &rect, &s->m_clrMenuLight);
  }

  return clrText;
}
void CBCGPVisualManagerXP::OnDrawCaptionBarButtonBorder(HDDC hDC,
    RECT rect, BOOL bIsPressed, BOOL bIsHighlighted,
    BOOL bIsDisabled, BOOL bHasDropDownArrow,
    BOOL bIsSysButton)
{
  if (!pBar->IsMessageBarMode()) {
    CBCGPVisualManager::OnDrawCaptionBarButtonBorder(hDC, pBar,
        rect, bIsPressed, bIsHighlighted,
        bIsDisabled, bHasDropDownArrow, bIsSysButton);
    return;
  }

  ASSERT(hDC);

  if (bIsHighlighted) {
    if (bIsSysButton && bIsPressed && s->m_clrPressedButtonBorder != 0) {
      draw_3drect_inR(hDC, &rect, s->m_clrPressedButtonBorder, s->m_clrPressedButtonBorder);
    }
    else {
      draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
    }
  }
  else if (!bIsSysButton) {
    draw_3drect_inR(hDC, &rect, globalData.clrBtnDkShadow, globalData.clrBtnDkShadow);
  }
}
void CBCGPVisualManagerXP::OnDrawCaptionBarInfoArea(HDDC hDC,  RECT rect)
{
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, _GetSysColor(COLOR_INFOBK));
  draw_3drect_inR(hDC, &rect, globalData.clrBtnShadow, globalData.clrBtnShadow);
}
BOOL CBCGPVisualManagerXP::OnDrawPushButton(HDDC hDC, RECT rect, CBCGPButton* pButton, COLORREF clrText)
{
  ASSERT(hDC);


  COLORREF clrFace = globalData.clrBtnFace;
  CBCGPDrawOnGlass dog(pButton->s->m_bOnGlass);

  if (!pButton->IsWindowEnabled()) {
    if (pButton->s->m_bOnGlass) {
      DrawRect(hDC, rect, clrFace, globalData.clrBtnShadow);
    }
    else {
      draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
      draw_3drect_inR(hDC, &rect, globalData.clrBtnShadow, globalData.clrBtnShadow);
    }
  }
  else if (IsPressed || IsCheck) {
    OnFillHighlightedArea(hDC, rect, &s->m_clrHighlightDn, NULL);

    if (pButton->s->m_bOnGlass) {
      DrawRect(hDC, rect, 0, s->m_clrMenuItemBorder);
    }
    else {
      draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
    }

    clrFace = s->m_clrHighlightDn;
  }
  else if (IsHighlighted || CWnd::GetFocus() == pButton) {
    OnFillHighlightedArea(hDC, rect, &s->m_clrHighlight, NULL);

    if (pButton->s->m_bOnGlass) {
      DrawRect(hDC, rect, 0, s->m_clrMenuItemBorder);
    }
    else {
      draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
    }

    clrFace = s->m_clrHighlight;
  }
  else {
    if (pButton->s->m_bOnGlass) {
      DrawRect(hDC, rect, clrFace, globalData.clrBtnDkShadow);
    }
    else {
      draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
      draw_3drect_inR(hDC, &rect, globalData.clrBtnDkShadow, globalData.clrBtnDkShadow);
    }
  }

  if (GetRValue(clrFace) <= 128 ||
      GetGValue(clrFace) <= 128 ||
      GetBValue(clrFace) <= 128) {
    clrText = _RGB(255, 255, 255);
  }

  return TRUE;
}
void CBCGPVisualManagerXP::OnDrawGridHeaderMenuButton(HDDC hDC, RECT rect,
    BOOL bHighlighted, BOOL /*bDisabled*/)
{
  ASSERT(hDC);
  DeflateRect(&rect, 1, 1);

  if (bHighlighted) {
    OnFillHighlightedArea(hDC, rect, &s->m_clrHighlight, NULL);
    draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }
}
BOOL CBCGPVisualManagerXP::OnSetGridColorTheme(BCGP_GRID_COLOR_DATA& theme)
{
  theme.s->m_EvenColors.s->m_clrBackground      = s->m_clrBtnBkgnd;
  theme.s->m_EvenColors.s->m_clrText            = globalData.clrBtnText;
  theme.s->m_OddColors.s->m_clrBackground       = s->m_clrMenuLight;
  theme.s->m_OddColors.s->m_clrText             = globalData.clrBtnText;
  theme.s->m_SelColors.s->m_clrBackground       = s->m_clrHighlight;
  theme.s->m_SelColors.s->m_clrBorder     = s->m_clrMenuItemBorder;

  if (GetRValue(s->m_clrHighlight) > 128 &&
      GetGValue(s->m_clrHighlight) > 128 &&
      GetBValue(s->m_clrHighlight) > 128) {
    theme.s->m_SelColors.s->m_clrText = _RGB(0, 0, 0);
  }
  else {
    theme.s->m_SelColors.s->m_clrText = _RGB(255, 255, 255);
  }

  theme.s->m_GroupColors.s->m_clrBackground     = GetGridLeftOffsetColor(pCtrl);
  theme.s->m_GroupColors.s->m_clrText           = globalData.clrBtnText;
  return TRUE;
}
BOOL CBCGPVisualManager2003::s->m_bUseGlobalTheme = TRUE;
BOOL CBCGPVisualManager2003::s->m_bStatusBarOfficeXPLook = TRUE;
BOOL CBCGPVisualManager2003::s->m_bDefaultWinXPColors = TRUE;
static COLORREF CalculateHourLineColor(COLORREF clrBase, BOOL /*bWorkingHours*/, BOOL bHour)
{
  int nAlpha = bHour ? 85 : 95;
  return PixelAlpha(clrBase, nAlpha);
}
static COLORREF CalculateWorkingColor(COLORREF clrBase)
{
  return clrBase;
}
static COLORREF CalculateNonWorkingColor(COLORREF clrBase)
{
  if (clrBase == _RGB(255, 255, 255)) {
    return globalData.clrBtnFace;
  }

  double H;
  double S;
  double L;
  RGBtoHSL(clrBase, &H, &S, &L);
  return HLStoRGB_ONE(
      S == 1 ? H * .84 : H,
      S == 1 ? L * .95 : L * .84,
      S);
}
//
// Construction/Destruction
//
CBCGPVisualManager2003::CBCGPVisualManager2003()
{
  s->m_WinXPTheme = WinXpTheme_None;
  s->m_bShadowHighlightedImage = FALSE;
  s->m_bFadeInactiveImage = FALSE;
  s->m_nMenuShadowDepth = 3;
  s->m_nVertMargin = 8;
  s->m_nHorzMargin = 8;
  s->m_nGroupVertOffset = 8;
  s->m_nGroupCaptionHeight = 18;
  s->m_nGroupCaptionHorzOffset = 3;
  s->m_nGroupCaptionVertOffset = 3;
  s->m_nTasksHorzOffset = 8;
  s->m_nTasksIconHorzOffset = 5;
  s->m_nTasksIconVertOffset = 4;
  s->m_bActiveCaptions = TRUE;
  OnUpdateSystemColors();
}
void CBCGPVisualManager2003::DrawCustomizeButton(HDDC hDC, RECT rect, BOOL bIsHorz,
    CBCGPVisualManager::int state,
    BOOL bIsCustomize, BOOL bIsMoreButtons)
{
  ASSERT(hDC);
  COLORREF clrDark = state == ButtonsIsRegular ?
      s->m_clrCustomizeButtonGradientDark : s->m_clrHighlightGradientDark;
  COLORREF clrLight = state == ButtonsIsRegular ?
      s->m_clrCustomizeButtonGradientLight : s->m_clrHighlightGradientLight;
#define PTS_NUM 6
  POINT pts[PTS_NUM];

  if (bIsHorz) {
    pts[0] = cPOINT(rect.left, rect.top);
    pts[1] = cPOINT(rect.left + 2, rect.top + 1);
    pts[2] = cPOINT(rect.left + 3, rect.bottom - 3);
    pts[3] = cPOINT(rect.left, rect.bottom);
    pts[4] = cPOINT(rect.right, rect.bottom);
    pts[5] = cPOINT(rect.right, rect.top);
  }
  else {
    pts[0] = cPOINT(rect.left, rect.top);
    pts[1] = cPOINT(rect.left + 3, rect.top + 2);
    pts[2] = cPOINT(rect.right - 3, rect.top + 3);
    pts[3] = cPOINT(rect.right, rect.top);
    pts[4] = cPOINT(rect.right, rect.bottom);
    pts[5] = cPOINT(rect.left, rect.bottom);
  }

  CRgn rgnClip;
  rgnClip.CreatePolygonRgn(pts, PTS_NUM, WINDING);
  hDC->SelectClipRgn(&rgnClip);

  FillGradient(hDC, rect, clrDark, clrLight, bIsHorz);
  //---------------------
  // Draw button content:
  //---------------------
  const int nEllipse = 2;

  if (bIsHorz) {
    DeflateRect(&rect, 0, nEllipse);
    rect.left += nEllipse;
  }
  else {
    DeflateRect(&rect, nEllipse, 0);
    rect.top += nEllipse;
  }

  const int nMargin = GetToolBarCustomizeButtonMargin();
  SIZE sizeImage = CBCGPMenuImages::Size();

  if (CBCGPToolBar::IsLargeIcons()) {
    sizeImage.cx *= 2;
    sizeImage.cy *= 2;
  }

  if (bIsCustomize) {
    //-----------------
    // Draw menu image:
    //-----------------
    RECT rectMenu = rect;

    if (bIsHorz) {
      rectMenu.top = rectMenu.bottom - sizeImage.cy - 2 * nMargin;
    }
    else {
      rectMenu.top++;
      rectMenu.left = rectMenu.right - sizeImage.cx - 2 * nMargin;
    }

    rectMenu DeflateRect(&,
        (rectMenu RCW(&) - sizeImage.cx) / 2,
        (rectMenu RCH(&) - sizeImage.cy) / 2);
    rectMenu OffsetRect(&, 1, 1);
    int id = bIsHorz ?
        IdCustomizeArowDown : IdCustomizeArowLeft;
    DrawMenuImages(hDC, id, rectMenu.TopLeft(),
        ImageWhite, sizeImage);
    rectMenu OffsetRect(&, -1, -1);
    DrawMenuImages(hDC, id, rectMenu.TopLeft(), ImageBlack, sizeImage);
  }

  if (bIsMoreButtons) {
    //-------------------
    // Draw "more" image:
    //-------------------
    RECT rectMore = rect;

    if (bIsHorz) {
      rectMore.bottom = rectMore.top + sizeImage.cy + 2 * nMargin;
    }
    else {
      rectMore.right = rectMore.left + sizeImage.cx + 2 * nMargin;
      rectMore.top++;
    }

    rectMore DeflateRect(&,
        (rectMore RCW(&) - sizeImage.cx) / 2,
        (rectMore RCH(&) - sizeImage.cy) / 2);
    int id =
        bIsHorz ?
        IdCustomizeMoreButtonsHorz :
        IdCustomizeMoreButtonsVert;
    rectMore OffsetRect(&, 1, 1);
    DrawMenuImages(hDC, id, rectMore.TopLeft(), ImageWhite, sizeImage);
    rectMore OffsetRect(&, -1, -1);
    DrawMenuImages(hDC, id, rectMore.TopLeft(), ImageBlack, sizeImage);
  }

  hDC->SelectClipRgn(NULL);
}
BOOL CBCGPVisualManager2003::IsToolbarRoundShape(CBCGPToolBar* pToolBar)
{
  ASSERT(pToolBar);
  return !pToolBar->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar));
}
void CBCGPVisualManager2003::OnFillBarBackground(HDDC hDC, CBCGPBaseControlBar* pBar,
    RECT rectClient, RECT rectClip,
    BOOL bNCArea)
{
  ASSERT(hDC);

  if (IsOnGlass) {
    draw_fillrectR(hDC, &rectClient, _RGB(0, 0, 0));
    return;
  }

  if (DYNAMIC_DOWNCAST(CBCGPReBar, pBar) != NULL ||
      DYNAMIC_DOWNCAST(CBCGPReBar, pBar->GetParent())) {
    FillRebarPane(hDC, pBar, rectClient);
    return;
  }

  CRuntimeClass* pBarClass = pBar->GetRuntimeClass();

  if (globalData.m_nBitsPerPixel <= 8 ||
      globalData.IsHighContastMode() ||
      IsDialogControl ||
      pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPColorBar)) ||
      pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPCalculator)) ||
      pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPCalendarBar))) {
    CBCGPVisualManagerXP::OnFillBarBackground(hDC, pBar, rectClient, rectClip);
    return;
  }

  if (rectClip.IsRectEmpty()) {
    rectClip = rectClient;
  }

  if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPCaptionBar))) {
    CBCGPCaptionBar* pCaptionBar = (CBCGPCaptionBar*) pBar;

    if (pCaptionBar->IsMessageBarMode()) {
      FillGradient(hDC, rectClient,
          s->m_clrBtnGradientDark, s->m_clrBtnGradientLight, FALSE);
    }
    else {
      FillGradient(hDC, rectClient,
          s->m_clrCaptionBarGradientDark, s->m_clrCaptionBarGradientLight, TRUE);
    }

    return;
  }

  if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar))) {
    draw_fillrectR(hDC, &rectClip, &s->m_clrMenuLight);
    CBCGPPopupMenuBar* pMenuBar = DYNAMIC_DOWNCAST(CBCGPPopupMenuBar, pBar);

    if (!pMenuBar->s->m_bDisableSideBarInXPMode) {
      RECT rectImages = rectClient;
      rectImages.right = rectImages.left + pMenuBar->GetGutterWidth();
      rectImages DeflateRect(&, 0, 1);
      FillGradient(hDC, rectImages, s->m_clrToolBarGradientLight, s->m_clrToolBarGradientDark, FALSE,
          35);
    }

    return;
  }

  BOOL bIsHorz = (pBar->GetBarStyle() & CBRS_ORIENT_HORZ);
  BOOL bIsToolBar = pBar->IsKindOf(RUNTIME_CLASS(CBCGPToolBar)) &&
      !pBar->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar));
  BOOL bIsToolBox = FALSE;
  COLORREF clr1 = bIsHorz ? s->m_clrToolBarGradientDark : s->m_clrToolBarGradientVertLight;
  COLORREF clr2 = bIsHorz ? s->m_clrToolBarGradientLight : s->m_clrToolBarGradientVertDark;

  if (bIsToolBox) {
    clr1 = s->m_clrBtnGradientLight;
    clr2 = s->m_clrBtnGradientDark;
    bIsHorz = FALSE;
  }

  if (!bIsToolBar && !bIsToolBox) {
    bIsHorz = FALSE;
    clr1 = s->m_clrBtnGradientDark;
    clr2 = s->m_clrBtnGradientLight;
    rectClient.right = rectClient.left + globalData.m_rectVirtual RCW(&) + 10;
  }

  const int nStartFlatPercentage = bIsToolBar ? 25 : 0;
  BOOL bRoundedCorners = FALSE;

  if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPDropDownToolBar))) {
    bNCArea = FALSE;
  }

  CBCGPToolBar* pToolBar = DYNAMIC_DOWNCAST(CBCGPToolBar, pBar);

  if (bNCArea && pToolBar != NULL && pToolBar->IsDocked() &&
      pToolBar->GetParentDockBar() != NULL &&
      !pToolBar->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar))) {
    bRoundedCorners = TRUE;
    CBCGPBaseControlBar* pParentBar = DYNAMIC_DOWNCAST(CBCGPBaseControlBar,
        pBar->GetParent());

    if (pParentBar != NULL) {
      POINT pt(0, 0);
      pBar->MapWindowPoints(pParentBar, &pt, 1);
      pt = hDC->OffsetWindowOrg(pt.x, pt.y);
      RECT rectParent;
      pParentBar->GetClientRect(rectParent);
      OnFillBarBackground(hDC, pParentBar, rectParent, rectParent);
      hDC->SetWindowOrg(pt.x, pt.y);
    }

    RECT rectFill = rectClient;
    rectFill DeflateRect(&, 1, 0);
    FillGradient(hDC, rectFill, clr1, clr2, bIsHorz, nStartFlatPercentage);
    RECT rectLeft = rectClient;
    rectLeft.top ++;
    rectLeft.right = rectLeft.left + 1;
    FillGradient(hDC, rectLeft, clr1, clr2, bIsHorz);
    RECT rectRight = rectClient;
    rectLeft.top ++;
    rectRight.left = rectRight.right - 1;
    FillGradient(hDC, rectRight, clr1, clr2, bIsHorz);
  }
  else {
    RECT rectFill = rectClient;

    if (bIsToolBar && pBar->IsDocked() && pToolBar->GetParentDockBar() != NULL) {
      ASSERT(pToolBar);
      rectFill.left -= pToolBar->s->m_cxLeftBorder;
      rectFill.right += pToolBar->s->m_cxRightBorder;
      rectFill.top -= pToolBar->s->m_cyTopBorder;
      rectFill.bottom += pToolBar->s->m_cyBottomBorder;
    }

    if (pBar->GetCurrentAlignment() == CBRS_ALIGN_RIGHT &&
        clr1 != clr2) {
      if (DYNAMIC_DOWNCAST(CBCGPDockBar, pBar) != NULL ||
          DYNAMIC_DOWNCAST(CBCGPAutoHideToolBar, pBar) != NULL) {
        CFrameWnd* pMainFrame = BCGCBProGetTopLevelFrame(pBar);

        if (pMainFrame->GetSafeHwnd() != NULL) {
          RECT rectMain;
          pMainFrame->GetClientRect(rectMain);
          pMainFrame->MapWindowPoints(pBar, &rectMain);
          rectFill.top = rectMain.top;
          rectFill.left = rectMain.left;
          rectFill.right = rectFill.left + globalData.m_rectVirtual RCW(&) + 10;
        }
      }
    }

    FillGradient(hDC, rectFill, clr1, clr2, bIsHorz, nStartFlatPercentage);
  }

  if (bNCArea) {
    CCustomizeButton* pCustomizeButton = NULL;
    RECT rectCustomizeBtn;
    rectCustomizeBtn.SetRectEmpty();

    if (pToolBar != NULL && pToolBar->GetCount() > 0) {
      pCustomizeButton = DYNAMIC_DOWNCAST(CCustomizeButton,
          pToolBar->GetButton(pToolBar->GetCount() - 1));

      if (pCustomizeButton != NULL) {
        rectCustomizeBtn = pCustomizeButton->Rect();
      }
    }

    if (bRoundedCorners) {
      //------------------------
      // Draw bottom/right edge:
      //------------------------
      COLORREF _clr = (&s->m_penBottomLine);

      if (bIsHorz) {
        TMoveTo(hDC, rectClient.left + 2, rectClient.bottom - 1);
        _LineTo(hDC, rectClient.right - rectCustomizeBtn RCW(&), rectClient.bottom - 1);
      }
      else {
        TMoveTo(hDC, rectClient.right - 1, rectClient.top + 2);
        _LineTo(hDC, rectClient.right - 1, rectClient.bottom - 2 - rectCustomizeBtn RCH(&));
      }


    }

    if (pToolBar != NULL && pToolBar->GetCount() > 0) {
      if (pCustomizeButton != NULL && !rectCustomizeBtn.IsRectEmpty() &&
          pCustomizeButton->IsPipeStyle()) {
        BOOL bIsRTL = pBar->GetExStyle() & WS_EX_LAYOUTRTL;
        //----------------------------------------
        // Special drawing for "Customize" button:
        //----------------------------------------
        RECT rectWindow;
        pBar->GetWindowRect(rectWindow);
        pBar->ClientToScreen(&rectCustomizeBtn);
        RECT rectButton = rectClient;

        if (pToolBar->IsHorizontal()) {
          if (bIsRTL) {
            int nButtonWidth = rectCustomizeBtn RCW(&);
            nButtonWidth -=
                rectWindow.left - rectCustomizeBtn.left;
            rectButton.left = rectButton.right - nButtonWidth;
          }
          else {
            rectButton.left = rectButton.right - rectCustomizeBtn RCW(&) -
                rectWindow.right + rectCustomizeBtn.right;
          }

          pCustomizeButton->SetExtraSize(
              0,
              rectWindow.bottom - rectCustomizeBtn.bottom);
        }
        else {
          rectButton.top = rectButton.bottom - rectCustomizeBtn RCH(&) -
              rectWindow.bottom + rectCustomizeBtn.bottom;
          pCustomizeButton->SetExtraSize(
              rectWindow.right - rectCustomizeBtn.right,
              0);
        }

        int state = ButtonsIsRegular;

        if (pToolBar->IsButtonHighlighted(pToolBar->GetCount() - 1) ||
            pCustomizeButton->IsDroppedDown()) {
          state = ButtonsIsHighlighted;
        }
        else if (pCustomizeButton->s->m_nStyle & (UIS_PUSHED | UIS_CHECKED)) {
          //-----------------------
          // Pressed in or checked:
          //-----------------------
          state = ButtonsIsPressed;
        }

        DrawCustomizeButton(hDC, rectButton,
            pToolBar->IsHorizontal(), state,
            (int) pCustomizeButton->GetCustomizeCmdId() > 0,
            !pCustomizeButton->GetInvisibleButtons().IsEmpty());
      }
    }
  }
}
void CBCGPVisualManager2003::OnDrawBarBorder(HDDC hDC, CBCGPBaseControlBar* pBar, RECT& rect)
{
  if (IsDialogControl || globalData.m_nBitsPerPixel <= 8 ||
      globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawBarBorder(hDC, pBar, rect);
  }
}
void CBCGPVisualManager2003::OnDrawBarGripper(HDDC hDC, RECT rectGripper, BOOL bHorz,
    CBCGPBaseControlBar* pBar)
{
  ASSERT(hDC);

  if (pBar != NULL && IsDialogControl ||
      globalData.m_nBitsPerPixel <= 8) {
    CBCGPVisualManagerXP::OnDrawBarGripper(hDC, rectGripper, bHorz, pBar);
    return;
  }

  const int nBoxSize = 4;

  if (bHorz) {
    rectGripper.left = rectGripper.right - nBoxSize;
  }
  else {
    rectGripper.top = rectGripper.bottom - nBoxSize;
  }

  CBCGPToolBar* pToolBar = DYNAMIC_DOWNCAST(CBCGPToolBar, pBar);

  if (pToolBar != NULL) {
    if (bHorz) {
      const int nHeight = CBCGPToolBar::IsLargeIcons() ?
          pToolBar->GetRowHeight() : pToolBar->GetButtonSize().cy;
      const int nDelta = MAX(0, (nHeight - pToolBar->GetImageSize().cy) / 2);
      rectGripper DeflateRect(&, 0, nDelta);
    }
    else {
      const int nWidth = CBCGPToolBar::IsLargeIcons() ?
          pToolBar->GetColumnWidth() : pToolBar->GetButtonSize().cx;
      const int nDelta = MAX(0, (nWidth - pToolBar->GetImageSize().cx) / 2);
      rectGripper DeflateRect(&, nDelta, 0);
    }
  }

  const int nBoxesNumber = bHorz ?
      (rectGripper RCH(&) - nBoxSize) / nBoxSize :
      (rectGripper RCW(&) - nBoxSize) / nBoxSize;
  int nOffset = bHorz ?
      (rectGripper RCH(&) - nBoxesNumber * nBoxSize) / 2 :
      (rectGripper RCW(&) - nBoxesNumber * nBoxSize) / 2;

  for (int nBox = 0; nBox < nBoxesNumber; nBox++) {
    int x = bHorz ?
        rectGripper.left :
        rectGripper.left + nOffset;
    int y = bHorz ?
        rectGripper.top + nOffset :
        rectGripper.top;
    draw_fillrectR(hDC, x + 1, y + 1, nBoxSize / 2, nBoxSize / 2,
        globalData.clrBtnHilite);
    draw_fillrectR(hDC, x, y, nBoxSize / 2, nBoxSize / 2,
        s->m_clrGripper);
    nOffset += nBoxSize;
  }
}
void CBCGPVisualManager2003::OnDrawComboBorder(HDDC hDC, RECT rect,
    BOOL bDisabled,
    BOOL bIsDropped,
    BOOL bIsHighlighted,
    CBCGPToolbarComboBoxButton* pButton)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawComboBorder(hDC, rect,
        bDisabled,
        bIsDropped,
        bIsHighlighted,
        pButton);
    return;
  }

  if (bIsHighlighted || bIsDropped || bDisabled) {
    DeflateRect(&rect, 1, 1);
    COLORREF colorBorder = bDisabled ? globalData.clrBtnShadow : s->m_clrMenuItemBorder;

    if (bIsDrawOnGlass) {

      DrawRect(hDC, rect, 0, colorBorder);
    }
    else {
      draw_3drect_inR(hDC, &rect, colorBorder, colorBorder);
    }
  }
}
void CBCGPVisualManager2003::OnFillOutlookPageButton(HDDC hDC, RECT  rect,
    BOOL bIsHighlighted, BOOL bIsPressed,
    COLORREF clrText)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnFillOutlookPageButton(hDC, rect,
        bIsHighlighted, bIsPressed,
        clrText);
    return;
  }

  ASSERT(hDC);
  COLORREF clr1 = s->m_clrBtnGradientDark;
  COLORREF clr2 = s->m_clrBtnGradientLight;

  if (bIsPressed) {
    if (bIsHighlighted) {
      clr1 = s->m_clrHighlightDnGradientDark;
      clr2 = s->m_clrHighlightDnGradientLight;
    }
    else {
      clr1 = s->m_clrHighlightDnGradientLight;
      clr2 = s->m_clrHighlightDnGradientDark;
    }
  }
  else if (bIsHighlighted) {
    clr1 = s->m_clrHighlightGradientDark;
    clr2 = s->m_clrHighlightGradientLight;
  }

  FillGradient(hDC, rect, clr1, clr2, TRUE);
  clrText = globalData.clrBtnText;
}
void CBCGPVisualManager2003::OnDrawOutlookPageButtonBorder(HDDC hDC,
    RECT& rectBtn, BOOL bIsHighlighted, BOOL bIsPressed)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawOutlookPageButtonBorder(hDC,
        rectBtn, bIsHighlighted, bIsPressed);
    return;
  }

  ASSERT(hDC);
  draw_3drect_inR(hDC, &rectBtn, globalData.clrBtnHilite, s->m_clrGripper);
}
void CBCGPVisualManager2003::OnFillButtonInterior(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state)
{
  ASSERT(hDC);

  CCustomizeButton* pCustButton = DYNAMIC_DOWNCAST(CCustomizeButton, pButton);

  if (pCustButton == NULL || !pCustButton->IsPipeStyle() || globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnFillButtonInterior(hDC, pButton, rect, state);
    return;
  }

  CBCGPToolBar* pToolBar = pCustButton->GetParentToolbar();

  if (pToolBar != NULL) {
    ASSERT(pToolBar);
    RECT rectToolbar;
    pToolBar->GetWindowRect(rectToolbar);
    pToolBar->ScreenToClient(rectToolbar);

    if (pToolBar->IsHorizontal()) {
      rect.right = rectToolbar.right;
    }
    else {
      rect.bottom = rectToolbar.bottom;
    }
  }

  SIZE sizeExtra = pCustButton->GetExtraSize();
  InflateRect(&rect, sizeExtra);
  DrawCustomizeButton(hDC, rect, pToolBar->IsHorizontal(), state,
      (int) pCustButton->GetCustomizeCmdId() > 0,
      !pCustButton->GetInvisibleButtons().IsEmpty());
  pCustButton->SetDefaultDraw(FALSE);
}
void CBCGPVisualManager2003::OnDrawButtonBorder(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, int state)
{
  CCustomizeButton* pCustButton = DYNAMIC_DOWNCAST(CCustomizeButton, pButton);

  if (pCustButton == NULL || !pCustButton->IsPipeStyle() || globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawButtonBorder(hDC, pButton, rect, state);
  }

  // Do nothing - the border is already painted in OnFillButtonInterior
}
void CBCGPVisualManager2003::OnDrawSeparator(HDDC hDC, CBCGPBaseControlBar* pBar,
    RECT rect, BOOL bHorz)
{
  if (IsDialogControl ||
      pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar)) ||
      globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawSeparator(hDC, pBar, rect, bHorz);
    return;
  }

  CBCGPToolBar* pToolBar = DYNAMIC_DOWNCAST(CBCGPToolBar, pBar);

  if (pToolBar == NULL) {
    CBCGPVisualManagerXP::OnDrawSeparator(hDC, pBar, rect, bHorz);
    return;
  }

  COLORREF _clr = (&s->m_penSeparator);

  if (bHorz) {
    const int nDelta = MAX(0, (pToolBar->GetButtonSize().cy - pToolBar->GetImageSize().cy) / 2);
    DeflateRect(&rect, 0, nDelta);
    int x = rect.left += RCW(&rect) / 2 - 1;

    if (bIsDrawOnGlass) {

      draw_line(hDC, x, rect.top, x, rect.bottom - 1, s->m_clrSeparator);
      draw_line(hDC, x + 1, rect.top + 1, x + 1, rect.bottom, globalData.clrBtnHilite);
    }
    else {
      TMoveTo(hDC, x, rect.top);
      _LineTo(hDC, x, rect.bottom - 1);
      _clr = (&s->m_penSeparatorLight);
      TMoveTo(hDC, x + 1, rect.top + 1);
      _LineTo(hDC, x + 1, rect.bottom);
    }
  }
  else {
    const int nDelta = MAX(0, (pToolBar->GetButtonSize().cx - pToolBar->GetImageSize().cx) / 2);
    DeflateRect(&rect, nDelta, 0);
    int y = rect.top += RCH(&rect) / 2 - 1;

    if (bIsDrawOnGlass) {

      draw_line(hDC, rect.left, y, rect.right - 1, y, s->m_clrSeparator);
      draw_line(hDC, rect.left + 1, y + 1, rect.right, y + 1, globalData.clrBtnHilite);
    }
    else {
      TMoveTo(hDC, rect.left, y);
      _LineTo(hDC, rect.right - 1, y);
      _clr = (&s->m_penSeparatorLight);
      TMoveTo(hDC, rect.left + 1, y + 1);
      _LineTo(hDC, rect.right, y + 1);
    }
  }


}
void CBCGPVisualManager2003::OnUpdateSystemColors()
{
  CBCGPWinXPThemeManager::UpdateSystemColors();
  BOOL bIsAppThemed = s->m_bUseGlobalTheme || (s->m_pfGetWindowTheme != NULL &&
      (*s->m_pfGetWindowTheme)(AfxGetMainWnd()->GetSafeHwnd()) != NULL);
  s->m_WinXPTheme = bIsAppThemed ? GetStandardWinXPTheme() : WinXpTheme_None;

  if (!s->m_bDefaultWinXPColors && s->m_WinXPTheme != WinXpTheme_None) {
    s->m_WinXPTheme = WinXpTheme_NonStandard;
  }

  s->m_bIsStandardWinXPTheme =
      s->m_WinXPTheme == WinXpTheme_Blue ||
      s->m_WinXPTheme == WinXpTheme_Olive ||
      s->m_WinXPTheme == WinXpTheme_Silver;
  //----------------------
  // Modify global colors:
  //----------------------
  ModifyGlobalColors();
  CBCGPVisualManagerXP::OnUpdateSystemColors();

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    s->m_clrTaskPaneGradientDark  = globalData.clrWindow;
    s->m_clrTaskPaneGradientLight  = globalData.clrWindow;
    s->m_clrTaskPaneGroupCaptionDark  = globalData.clrBtnFace;
    s->m_clrTaskPaneGroupCaptionLight  = globalData.clrBtnFace;
    s->m_clrTaskPaneGroupCaptionSpecDark  = globalData.clrBtnFace;
    s->m_clrTaskPaneGroupCaptionSpecLight  = globalData.clrBtnFace;
    s->m_clrTaskPaneGroupAreaLight  = globalData.clrWindow;
    s->m_clrTaskPaneGroupAreaDark  = globalData.clrWindow;
    s->m_clrTaskPaneGroupAreaSpecLight  = globalData.clrWindow;
    s->m_clrTaskPaneGroupAreaSpecDark  = globalData.clrWindow;
    s->m_clrTaskPaneGroupBorder  = globalData.clrBtnShadow;
    s->m_clrBtnGradientLight = s->m_clrToolBarGradientLight = globalData.clrBtnLight;
    s->m_penTaskPaneGroupBorder.DeleteObject();
    s->m_penTaskPaneGroupBorder.CreatePen = (s->m_clrTaskPaneGroupBorder);
    s->m_penGridExpandBoxLight.DeleteObject();
    s->m_penGridExpandBoxLight.CreatePen = (globalData.clrBtnLight);
    s->m_penGridExpandBoxDark.DeleteObject();
    s->m_penGridExpandBoxDark.CreatePen = (globalData.clrBtnShadow);
    s->m_clrToolbarDisabled = globalData.clrBtnHilite;
    return;
  }

  //--------------------------------------------------
  // Calculate control bars bakground gradient colors:
  //--------------------------------------------------
  COLORREF clrBase = GetBaseThemeColor();

  if (s->m_WinXPTheme == WinXpTheme_Olive) {
    s->m_clrToolBarGradientDark = PixelAlpha(
        clrBase, 120);
    s->m_clrBtnGradientDark = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_3DFACE),
        .87, 1, 3);
    s->m_clrToolBarGradientLight = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_WINDOW),
        1., 2, 1);
    s->m_clrBtnGradientLight = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_WINDOW),
        1.03);
  }
  else if (s->m_WinXPTheme == WinXpTheme_Silver) {
    s->m_clrToolBarGradientDark = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_3DFACE),
        0.75, 2);
    s->m_clrBtnGradientDark = PixelAlpha(
        clrBase, 120);
    s->m_clrToolBarGradientLight = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_3DHIGHLIGHT),
        .98);
    s->m_clrBtnGradientLight = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_WINDOW),
        1.03);
  }
  else if (s->m_WinXPTheme == WinXpTheme_Blue) {
    s->m_clrToolBarGradientDark = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_3DFACE),
        0.93, 2);
    s->m_clrBtnGradientDark = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_3DLIGHT),
        .99, 2, 1);
    s->m_clrToolBarGradientLight = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_WINDOW),
        1.03);
    s->m_clrBtnGradientLight = s->m_clrToolBarGradientLight;
  }
  else {
    s->m_clrToolBarGradientDark = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_3DFACE),
        0.93, 2);
    s->m_clrBtnGradientDark = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_3DLIGHT),
        .99, 2, 1);
    s->m_clrToolBarGradientLight = SmartMixColors(
        clrBase,
        GetThemeColor(s->m_hThemeWindow, COLOR_WINDOW),
        1., 1, 4);
    s->m_clrBtnGradientLight = s->m_clrToolBarGradientLight;
  }

  s->m_clrToolBarGradientVertLight = s->m_clrToolBarGradientLight;
  s->m_clrToolBarGradientVertDark = PixelAlpha(
      s->m_clrToolBarGradientDark, 98);
  COLORREF clrSeparatorDark;
  COLORREF clrPlannerTodayLine;

  //-------------------------------------
  // Calculate highlight gradient colors:
  //-------------------------------------
  if (s->m_bIsStandardWinXPTheme) {
    ASSERT(s->m_pfGetThemeColor != NULL);
    COLORREF clr1, clr2, clr3;

    if (s->m_WinXPTheme == WinXpTheme_Blue && globalData.bIsWindowsVista) {
      clr1 = _RGB(250, 196, 88);
      clr2 = _RGB(250, 196, 88);
      clr3 = _RGB(228, 93, 61);
    }
    else {
      (*s->m_pfGetThemeColor)(s->m_hThemeButton, BP_PUSHBUTTON, 0, TMT_ACCENTCOLORHINT, &clr1);
      (*s->m_pfGetThemeColor)(s->m_hThemeButton, BP_RADIOBUTTON, 0, TMT_ACCENTCOLORHINT, &clr2);
      (*s->m_pfGetThemeColor)(s->m_hThemeWindow, WP_CLOSEBUTTON, 0, TMT_FILLCOLORHINT, &clr3);
    }

    s->m_clrHighlightMenuItem = SmartMixColors(
        clr1,
        clr2,
        1.3, 1, 1);
    s->m_clrHighlightGradientLight = SmartMixColors(
        clr1,
        clr3,
        1.55, 2, 1);
    s->m_clrHighlightGradientDark = SmartMixColors(
        clr1,
        clr2,
        1.03, 2, 1);
    s->m_clrHighlightDnGradientLight = SmartMixColors(
        clr1,
        clr3,
        1.03, 1, 2);
    s->m_clrFloatToolBarBorder.DeleteObject();
    COLORREF clrCustom;
    (*s->m_pfGetThemeColor)(s->m_hThemeButton, BP_RADIOBUTTON, 0, TMT_BORDERCOLORHINT, &clrCustom);
    COLORREF clrToolbarBorder = SmartMixColors(
        clrCustom,
        clrBase,
        0.84, 1, 4);
    s->m_clrFloatToolBarBorder.CreateSolidBrush(clrToolbarBorder);

    if (s->m_WinXPTheme == WinXpTheme_Blue || s->m_WinXPTheme == WinXpTheme_Silver) {
      s->m_clrCustomizeButtonGradientDark = globalData.bIsWindowsVista ? _RGB(7, 57, 142) :
          PixelAlpha(globalData.clrActiveCaption, 60);
      const double k = (s->m_WinXPTheme == WinXpTheme_Blue) ? 1.61 : 1;
      s->m_clrCustomizeButtonGradientLight = SmartMixColors(
          s->m_clrCustomizeButtonGradientDark,
          clrBase, k, 3, 1);
      (*s->m_pfGetThemeColor)(s->m_hThemeButton, BP_PUSHBUTTON, PBS_DEFAULTED, TMT_ACCENTCOLORHINT, &clrCustom);
    }
    else {
      s->m_clrCustomizeButtonGradientDark = SmartMixColors(
          clrCustom,
          clrBase,
          0.63, 1, 3);
      (*s->m_pfGetThemeColor)(s->m_hThemeButton, BP_PUSHBUTTON, PBS_DEFAULTED, TMT_ACCENTCOLORHINT, &clrCustom);
      s->m_clrCustomizeButtonGradientLight = SmartMixColors(
          clrCustom,
          clrBase,
          1.2, 1, 3);
    }

    globalData.clrBtnDkShadow = s->m_clrCustomizeButtonGradientDark;

    if (s->m_WinXPTheme != WinXpTheme_Silver) {
      globalData.clrBtnShadow = SmartMixColors(
          clrCustom,
          clrBase,
          1.4, 1, 3);
    }

    s->m_clrToolBarBottomLine = s->m_WinXPTheme == WinXpTheme_Silver ?
        PixelAlpha(s->m_clrToolBarGradientDark, 80) :
        PixelAlpha(s->m_clrToolBarGradientDark, 50);
    s->m_colorToolBarCornerTop = PixelAlpha(s->m_clrToolBarGradientLight, 92);
    s->m_colorToolBarCornerBottom = PixelAlpha(s->m_clrToolBarGradientDark, 97);
    s->m_clrGripper =
        PixelAlpha(s->m_clrToolBarGradientVertDark, 40);
    clrSeparatorDark =
        PixelAlpha(s->m_clrToolBarGradientVertDark, 81);
    s->m_clrMenuItemBorder = s->m_clrGripper;
    s->m_clrMenuBorder =
        PixelAlpha(clrBase, 80);
    s->m_clrCaptionBarGradientDark = s->m_clrCustomizeButtonGradientDark;
    s->m_clrCaptionBarGradientLight = s->m_clrCustomizeButtonGradientLight;
    s->m_clrPlannerTodayFill = _RGB(249, 203, 95);
    clrPlannerTodayLine = _RGB(187, 85, 3);
    s->m_clrMenuLight = PixelAlpha(
        globalData.clrWindow, .96, .96, .96);
    s->m_clrMenuLight.DeleteObject();
    s->m_clrMenuLight.CreateSolidBrush(s->m_clrMenuLight);
  }
  else {
    s->m_clrHighlightMenuItem = 0;
    s->m_clrHighlightGradientLight = s->m_clrHighlight;
    s->m_clrHighlightGradientDark = s->m_clrHighlightDn;
    s->m_clrHighlightDnGradientLight =
        PixelAlpha(s->m_clrHighlightGradientLight, 120);
    s->m_clrCustomizeButtonGradientDark = globalData.clrBtnShadow;
    s->m_clrCustomizeButtonGradientLight = SmartMixColors(
        s->m_clrCustomizeButtonGradientDark,
        globalData.clrBtnFace, 1, 1, 1);
    s->m_clrToolBarBottomLine = PixelAlpha(s->m_clrToolBarGradientDark, 75);
    s->m_colorToolBarCornerTop = globalData.clrBtnLight;
    s->m_colorToolBarCornerBottom = s->m_clrToolBarGradientDark;
    s->m_clrGripper = globalData.clrBtnShadow;
    clrSeparatorDark = globalData.clrBtnShadow;
    s->m_clrCaptionBarGradientLight = globalData.clrBtnShadow;
    s->m_clrCaptionBarGradientDark = globalData.clrBtnDkShadow;
    s->m_clrPlannerTodayFill = s->m_clrHighlight;
    clrPlannerTodayLine = s->m_clrMenuItemBorder;
  }

  s->m_clrHighlightDnGradientDark = s->m_clrHighlightGradientDark;
  s->m_clrHighlightCheckedGradientLight = s->m_clrHighlightDnGradientDark;
  s->m_clrHighlightCheckedGradientDark =
      PixelAlpha(s->m_clrHighlightDnGradientLight, 120);
  s->m_clrTabBack.DeleteObject();
  s->m_clrTabBack.CreateSolidBrush(s->m_clrToolBarGradientLight);
  s->m_penSeparatorLight.DeleteObject();
  s->m_penSeparatorLight.CreatePen = (globalData.clrBtnHilite);
  s->m_clrTearOffCaption.DeleteObject();
  s->m_clrTearOffCaption.CreateSolidBrush(globalData.clrBtnFace);
  s->m_clrFace.DeleteObject();
  s->m_clrFace.CreateSolidBrush(s->m_clrToolBarGradientLight);
  s->m_penSeparator.DeleteObject();
  s->m_penSeparator.CreatePen = (clrSeparatorDark);
  s->m_clrMenuShadowBase = globalData.clrBtnFace;
  s->m_clrToolbarDisabled = SmartMixColors(
      s->m_clrToolBarGradientDark, s->m_clrToolBarGradientLight, .92);
  s->m_penBottomLine.DeleteObject();
  s->m_penBottomLine.CreatePen = (s->m_clrToolBarBottomLine);

  // --------------------------
  // Calculate TaskPane colors:
  // --------------------------
  if (s->m_bIsStandardWinXPTheme && s->m_hThemeExplorerBar != NULL) {
    ASSERT(s->m_pfGetThemeColor != NULL);
    (*s->m_pfGetThemeColor)(s->m_hThemeExplorerBar, 0, 0, TMT_GRADIENTCOLOR1, &s->m_clrTaskPaneGradientLight);
    (*s->m_pfGetThemeColor)(s->m_hThemeExplorerBar, 0, 0, TMT_GRADIENTCOLOR2, &s->m_clrTaskPaneGradientDark);
    (*s->m_pfGetThemeColor)(s->m_hThemeExplorerBar, EBP_NORMALGROUPBACKGROUND, 0, TMT_FILLCOLOR, &s->m_clrTaskPaneGroupCaptionDark);
    (*s->m_pfGetThemeColor)(s->m_hThemeExplorerBar, EBP_SPECIALGROUPHEAD, 0, TMT_FILLCOLOR, &s->m_clrTaskPaneGroupCaptionSpecDark);
    s->m_clrTaskPaneGroupCaptionSpecLight = s->m_clrTaskPaneGroupCaptionDark;
    (*s->m_pfGetThemeColor)(s->m_hThemeExplorerBar, EBP_NORMALGROUPBACKGROUND, 0, TMT_FILLCOLOR, &s->m_clrTaskPaneGroupAreaLight);
    s->m_clrTaskPaneGroupAreaDark = s->m_clrTaskPaneGroupAreaLight;
    (*s->m_pfGetThemeColor)(s->m_hThemeExplorerBar, EBP_SPECIALGROUPBACKGROUND, 0, TMT_FILLCOLORHINT, &s->m_clrTaskPaneGroupAreaSpecLight);
    s->m_clrTaskPaneGroupAreaSpecDark = s->m_clrTaskPaneGroupAreaSpecLight;
    (*s->m_pfGetThemeColor)(s->m_hThemeExplorerBar, EBP_NORMALGROUPBACKGROUND, 0, TMT_BORDERCOLOR, &s->m_clrTaskPaneGroupBorder);
    s->m_clrTaskPaneGroupCaptionLight = s->m_clrTaskPaneGroupBorder;

    if (s->m_WinXPTheme == WinXpTheme_Blue && globalData.bIsWindowsVista) {
      s->m_clrTaskPaneGradientDark = s->m_clrBtnGradientDark;
      s->m_clrTaskPaneGradientLight = s->m_clrBtnGradientLight;
      s->m_clrTaskPaneGroupCaptionSpecDark = s->m_clrToolBarGradientDark;
      s->m_clrTaskPaneGroupCaptionSpecLight = s->m_clrToolBarGradientLight;
    }
  }
  else {
    s->m_clrTaskPaneGradientDark  = s->m_clrBtnGradientDark;
    s->m_clrTaskPaneGradientLight  = s->m_clrToolBarGradientLight;
    s->m_clrTaskPaneGroupCaptionDark  = s->m_clrBtnGradientDark;
    s->m_clrTaskPaneGroupCaptionLight  = s->m_clrToolBarGradientLight;
    COLORREF clrLight =
        PixelAlpha(globalData.clrBtnShadow, 125);
    s->m_clrTaskPaneGroupCaptionSpecDark = SmartMixColors(
        s->m_clrCustomizeButtonGradientDark,
        clrLight);
    s->m_clrTaskPaneGroupCaptionSpecLight  = s->m_clrCustomizeButtonGradientLight;
    s->m_clrTaskPaneGroupAreaLight  = s->m_clrToolBarGradientLight;
    s->m_clrTaskPaneGroupAreaDark  = s->m_clrToolBarGradientLight;
    s->m_clrTaskPaneGroupAreaSpecLight  = s->m_clrToolBarGradientLight;
    s->m_clrTaskPaneGroupAreaSpecDark  = s->m_clrToolBarGradientLight;
    s->m_clrTaskPaneGroupBorder  = s->m_clrToolBarGradientLight;
  }

  s->m_penTaskPaneGroupBorder.DeleteObject();
  s->m_penTaskPaneGroupBorder.CreatePen = (s->m_clrTaskPaneGroupBorder);
  s->m_clrTaskPaneHotText = globalData.clrHilite;
  //--------------------------------------
  // Calculate grid/report control colors:
  //--------------------------------------
  s->m_penGridExpandBoxLight.DeleteObject();
  s->m_penGridExpandBoxLight.CreatePen(PS_SOLID, 1,
      PixelAlpha(s->m_clrToolBarBottomLine, 210));
  s->m_penGridExpandBoxDark.DeleteObject();
  s->m_penGridExpandBoxDark.CreatePen(PS_SOLID, 1,
      PixelAlpha(s->m_clrToolBarBottomLine, 75));
  //--------------------------
  // Calculate planner colors:
  //--------------------------
  s->m_clrPlannerWork = _RGB(255, 255, 213);
  s->m_penPlannerTodayLine.DeleteObject();
  s->m_penPlannerTodayLine.CreatePen = (clrPlannerTodayLine);
}
void CBCGPVisualManager2003::OnFillHighlightedArea(HDDC hDC, RECT rect,
    COLORREF  pBrush, CBCGPToolbarButton* pButton)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnFillHighlightedArea(hDC, rect, pBrush, pButton);
    return;
  }

  ASSERT(hDC);
  ASSERT(pBrush);
  BOOL bIsHorz = TRUE;
  BOOL bIsPopupMenu = FALSE;
  COLORREF clr1 = 0;
  COLORREF clr2 = 0;

  if (pButton != NULL) {

    bIsHorz = pButton->IsHorizontal();
    CBCGPToolbarMenuButton* pMenuButton =
        DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);
    bIsPopupMenu = pMenuButton != NULL &&
        pMenuButton->GetParentWnd() != NULL &&
        pMenuButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar));

    if (bIsPopupMenu && pBrush == &s->m_clrHighlight) {
      if (s->m_clrHighlightMenuItem != 0) {
        COLORREF br = (s->m_clrHighlightMenuItem);
        draw_fillrectR(hDC, && rect, br);
        return;
      }
    }

    if (pMenuButton != NULL &&
        !bIsPopupMenu &&
        pMenuButton->IsDroppedDown()) {
      clr1 = PixelAlpha(
          s->m_clrToolBarGradientDark,
          s->m_bIsStandardWinXPTheme ? 101 : 120);
      clr2 = PixelAlpha(
          s->m_clrToolBarGradientLight, 110);
    }
  }

  if (pBrush == &s->m_clrHighlight && s->m_bIsStandardWinXPTheme) {
    clr1 = s->m_clrHighlightGradientDark;
    clr2 = bIsPopupMenu ? clr1 : s->m_clrHighlightGradientLight;
  }
  else if (pBrush == &s->m_clrHighlightDn && s->m_bIsStandardWinXPTheme) {
    clr1 = bIsPopupMenu ? s->m_clrHighlightDnGradientLight : s->m_clrHighlightDnGradientDark;
    clr2 = s->m_clrHighlightDnGradientLight;
  }
  else if (pBrush == &s->m_clrHighlightChecked && s->m_bIsStandardWinXPTheme) {
    clr1 = bIsPopupMenu ? s->m_clrHighlightCheckedGradientLight : s->m_clrHighlightCheckedGradientDark;
    clr2 = s->m_clrHighlightCheckedGradientLight;
  }

  if (clr1 == 0 || clr2 == 0) {
    CBCGPVisualManagerXP::OnFillHighlightedArea(hDC, rect, pBrush, pButton);
    return;
  }

  FillGradient(hDC, rect, clr1, clr2, bIsHorz);
}
void CBCGPVisualManager2003::OnDrawShowAllMenuItems(HDDC hDC, RECT rect,
    CBCGPVisualManager::int state)
{
  ASSERT(hDC);

  if (globalData.m_nBitsPerPixel > 8 && !globalData.IsHighContastMode()) {
    const int nRadius = 8;
    rect = RECT(rect CenterPoint(&) - SIZE(nRadius - 1, nRadius - 1), SIZE(nRadius * 2, nRadius * 2));

    dm.DrawGradientRing(rect, s->m_clrToolBarGradientDark, s->m_clrMenuLight,
        0,
        45, nRadius);
  }

  CBCGPVisualManager::OnDrawShowAllMenuItems(hDC, rect, state);
}
int CBCGPVisualManager2003::GetShowAllMenuItemsHeight(HDDC hDC, const SIZE& sizeDefault)
{
  int nHeight = CBCGPVisualManager::GetShowAllMenuItemsHeight(hDC, sizeDefault);
  return nHeight + 4;
}
void CBCGPVisualManager2003::OnDrawCaptionBarBorder(HDDC hDC,
    RECT rect, COLORREF clrBtnBorder, BOOL bFlatBorder)
{
  ASSERT(hDC);

  if (clrBtnBorder == 0) {
    draw_fillrectR(hDC, &rect,
        (pBar != NULL && IsDialogControl) ? globalData.clrBtnFace);
  }
  else {
    COLORREF brBorder(clrBtnBorder);
    draw_fillrectR(hDC, &rect, brBorder);
  }

  if (!bFlatBorder) {
    draw_3drect_inR(hDC, &rect, s->m_clrBtnGradientLight, s->m_clrToolBarBottomLine);
  }
}
void CBCGPVisualManager2003::OnDrawComboDropButton(HDDC hDC, RECT rect,
    BOOL bDisabled,
    BOOL bIsDropped,
    BOOL bIsHighlighted,
    CBCGPToolbarComboBoxButton* pButton)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawComboDropButton(hDC, rect,
        bDisabled, bIsDropped,
        bIsHighlighted, pButton);
    return;
  }

  ASSERT(hDC);
  const BOOL bIsCtrl = pButton != NULL && pButton->IsCtrlButton();

  if (!bDisabled) {
    if (bIsDropped || bIsHighlighted) {
      OnFillHighlightedArea(hDC, rect,
          bIsDropped ? &s->m_clrHighlightDn : &s->m_clrHighlight,
          NULL);

      if (!bIsCtrl) {
        if (bIsDrawOnGlass) {

          draw_line(hDC, rect.left, rect.top, rect.left, rect.bottom, s->m_clrMenuItemBorder);
        }
        else {
          COLORREF pen = (s->m_clrMenuItemBorder);
          COLORREF _clr = (pen);
          TMoveTo(hDC, rect.left, rect.top);
          _LineTo(hDC, rect.left, rect.bottom);

        }
      }
    }
    else {

      FillGradient(hDC, rect, s->m_clrToolBarGradientDark, s->m_clrToolBarGradientLight, TRUE);

      if (bIsDrawOnGlass) {
        DrawRect(hDC, rect, 0, globalData.clrWindow);
      }
      else {
        draw_3drect_inR(hDC, &rect, globalData.clrWindow, globalData.clrWindow);
      }
    }
  }

  DrawMenuImages(hDC, IdArowDown, rect,
      bDisabled ? ImageGray : (bIsDropped && bIsHighlighted) ?
      ImageWhite : ImageBlack);
}
void CBCGPVisualManager2003::OnDrawTearOffCaption(HDDC hDC, RECT rect, BOOL bIsActive)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawTearOffCaption(hDC, rect, bIsActive);
    return;
  }

  const int iBorderSize = 1;
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &s->m_clrMenuLight);
  DeflateRect(&rect, iBorderSize, 1);

  if (bIsActive) {
    OnFillHighlightedArea(hDC, rect, bIsActive ? &s->m_clrHighlight : &s->m_clrBtnBkgnd,
        NULL);
  }
  else {
    draw_fillrectR(hDC, &rect, &s->m_clrTearOffCaption);
  }

  // Draw gripper:
  OnDrawBarGripper(hDC, rect, FALSE, NULL);

  if (bIsActive) {
    draw_3drect_inR(hDC, &rect, s->m_clrMenuBorder, s->m_clrMenuBorder);
  }
}
void CBCGPVisualManager2003::OnDrawMenuBorder(HDDC hDC,
    CBCGPPopupMenu* pMenu, RECT rect)
{
  BOOL bConnectMenuToParent = s->m_bConnectMenuToParent;

  if (DYNAMIC_DOWNCAST(CCustomizeButton, pMenu->GetParentButton()) != NULL) {
    s->m_bConnectMenuToParent = FALSE;
  }

  CBCGPVisualManagerXP::OnDrawMenuBorder(hDC, pMenu, rect);
  s->m_bConnectMenuToParent = bConnectMenuToParent;
}
COLORREF CBCGPVisualManager2003::GetThemeColor(HTHEME hTheme, int nIndex)
{
  if (hTheme != NULL && s->m_pfGetThemeSysColor != NULL) {
    return (*s->m_pfGetThemeSysColor)(hTheme, nIndex);
  }

  return _GetSysColor(nIndex);
}
void CBCGPVisualManager2003::OnEraseTabsArea(HDDC hDC, RECT rect,
    const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(hDC);
  ASSERT(pTabWnd);

  if (pTabWnd->IsDialogControl()) {
    if (pTabWnd->IsVisualManagerStyle()) {
      OnFillDialog(hDC, pTabWnd->GetParent(), rect);
    }
    else {
      draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
    }

    return;
  }

  if (pTabWnd->IsFlatTab() || globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnEraseTabsArea(hDC, rect, pTabWnd);
    return;
  }

  COLORREF clr1 = s->m_clrToolBarGradientDark;
  COLORREF clr2 = s->m_clrToolBarGradientLight;

  if (LOCATION_BOTTOM) {
    FillGradient(hDC, rect, clr1, clr2, TRUE);
  }
  else {
    FillGradient(hDC, rect, clr2, clr1, TRUE);
  }
}
void CBCGPVisualManager2003::OnDrawTab(HDDC hDC, RECT rectTab,
    int iTab, BOOL bIsActive, const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(pTabWnd);
  ASSERT(hDC);

  if (!IsOneNoteStyle || globalData.m_nBitsPerPixel <= 8 ||
      globalData.IsHighContastMode() || pTabWnd->IsLeftRightRounded()) {
    CBCGPVisualManagerXP::OnDrawTab(hDC, rectTab, iTab, bIsActive, pTabWnd);
    return;
  }

  RECT rectClip;
  pTabWnd->GetTabsRect(rectClip);
  const int nExtra = (iTab == 0 || bIsActive) ? 0 : RCH(&rectTab);

  if (rectTab.left + nExtra + 10 > rectClip.right ||
      rectTab.right - 10 <= rectClip.left) {
    return;
  }

  const BOOL bIsHighlight = iTab == pTabWnd->GetHighlightedTab();
  COLORREF clrTab = pTabWnd->GetTabBkColor(iTab);

  if (clrTab == 0 && bIsActive) {
    clrTab = globalData.clrWindow;
  }

  if (LOCATION_BOTTOM) {
    rectTab OffsetRect(&, 0, -1);
  }

  RECT rectFill = rectTab;
#define POINTS_NUM  5
  POINT pts[POINTS_NUM];
  const int nHeight = rectFill RCH(&);
  pts[0].x = rectFill.left;
  pts[0].y = rectFill.bottom;
  pts[1].x = rectFill.left + nHeight;
  pts[1].y = rectFill.top;
  pts[2].x = rectFill.right - 2;
  pts[2].y = rectFill.top;
  pts[3].x = rectFill.right;
  pts[3].y = rectFill.top + 2;
  pts[4].x = rectFill.right;
  pts[4].y = rectFill.bottom;
  BOOL bIsCutted = FALSE;

  for (int i = 0; i < POINTS_NUM; i++) {
    if (pts[i].x > rectClip.right) {
      pts[i].x = rectClip.right;
      bIsCutted = TRUE;
    }

    if (LOCATION_BOTTOM) {
      pts[i].y = rectFill.bottom - pts[i].y + rectFill.top;
    }
  }

  CRgn rgn;
  rgn.CreatePolygonRgn(pts, POINTS_NUM, WINDING);
  hDC->SelectClipRgn(&rgn);
  RECT rectLeft;
  pTabWnd->GetClientRect(rectLeft);
  rectLeft.right = rectClip.left - 1;
  hDC->ExcludeClipRect(rectLeft);

  COLORREF clrFill = bIsHighlight ? s->m_clrHighlightMenuItem : clrTab;
  COLORREF clr2;

  if (clrFill != 0) {
    clr2 = PixelAlpha(clrFill, 1.22, 1.22, 1.22);
  }
  else {
    clrFill = s->m_clrToolBarGradientDark;
    clr2 = s->m_clrToolBarGradientLight;
  }

  if (pTabWnd->GetLocation() == CBCGPTabWnd::LOCATION_BOTTOM) {
    rectFill.top++;
  }

  RECT rectTop = rectFill;
  rectTop.bottom = rectTop CenterPoint(&).y - 1;
  COLORREF brTop(clr2);
  draw_fillrectR(hDC, &rectTop, brTop);
  RECT rectMiddle = rectFill;
  rectMiddle.top = rectTop.bottom;
  rectMiddle.bottom = rectMiddle.top + 3;
  FillGradient(hDC, rectMiddle, clrFill, clr2);
  RECT rectBottom = rectFill;
  rectBottom.top = rectMiddle.bottom;
  COLORREF brBottom(clrFill);
  draw_fillrectR(hDC, &rectBottom, brBottom);
  hDC->SelectClipRgn(NULL);
  hDC->ExcludeClipRect(rectLeft);

  if (iTab > 0 && !bIsActive && iTab != pTabWnd->GetFirstVisibleTabNum()) {
    RECT rectLeftTab = rectClip;
    rectLeftTab.right = rectFill.left + rectFill RCH(&) - 10;

    if (pTabWnd->GetLocation() == CBCGPTabWnd::LOCATION_BOTTOM) {
      rectLeftTab.top -= 2;
    }
    else {
      rectLeftTab.bottom++;
    }

    hDC->ExcludeClipRect(rectLeftTab);
  }

  COLORREF penGray = (globalData.clrBtnDkShadow);
  COLORREF penShadow = (globalData.clrBtnShadow);
  COLORREF _clr = (penGray);
  COLORREF  pOldBrush = (COLORREF) hDC->SelectStockObject(NULL_BRUSH);
  hDC->Polyline(pts, POINTS_NUM);

  if (bIsCutted) {
    TMoveTo(hDC, rectClip.right, rectTab.top);
    _LineTo(hDC, rectClip.right, rectTab.bottom);
  }

  RECT rectRight = rectClip;
  rectRight.left = rectFill.right;
  hDC->ExcludeClipRect(rectRight);
  COLORREF penLight = (globalData.clrBtnHilite);
  _clr = (penLight);

  if (LOCATION_BOTTOM) {
  }
  else {
    TMoveTo(hDC, rectFill.left + 1, rectFill.bottom);
    _LineTo(hDC, rectFill.left + nHeight, rectFill.top + 1);
    _LineTo(hDC, rectFill.right - 1, rectFill.top + 1);
  }


  _clr = (pOldBrush);

  if (bIsActive) {
    const int iBarHeight = 1;
    const int y = (LOCATION_BOTTOM) ?
        (rectTab.top - iBarHeight) : (rectTab.bottom);
    RECT rectFill(cPOINT(rectTab.left + 2, y),
        SIZE(rectTab RCW(&) - 1, iBarHeight));

    if (LOCATION_BOTTOM) {
      rectFill OffsetRect(&, -1, 1);
    }

    rectFill.right = MIN(rectFill.right, rectClip.right);
    COLORREF br = (clrTab);
    draw_fillrectR(hDC, &rectFill, br);
  }

  if (LOCATION_BOTTOM) {
    rectTab.left += RCH(&rectTab) + TAB_IMAGE_MARGIN;
  }
  else {
    rectTab.left += RCH(&rectTab);
    rectTab.right -= TAB_IMAGE_MARGIN;
  }

  COLORREF clrText = pTabWnd->GetTabTextColor(iTab);
  COLORREF cltTextOld = 0;

  if (!bIsActive && clrText != 0) {
    cltTextOld = hDC->SetTextColor(clrText);
  }

  rectTab.right = MIN(rectTab.right, rectClip.right - 2);
  OnDrawTabContent(hDC, rectTab, iTab, bIsActive, pTabWnd, 0);

  if (cltTextOld != 0) {
    hDC->SetTextColor(cltTextOld);
  }

  hDC->SelectClipRgn(NULL);
}
void CBCGPVisualManager2003::OnFillTab(HDDC hDC, RECT rectFill, COLORREF  pbrFill,
    int iTab, BOOL bIsActive,
    const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(pTabWnd);

  if (pTabWnd->IsFlatTab() || globalData.m_nBitsPerPixel <= 8 ||
      globalData.IsHighContastMode() || pTabWnd->IsDialogControl()) {
    CBCGPVisualManagerXP::OnFillTab(hDC, rectFill, pbrFill,
        iTab, bIsActive, pTabWnd);
    return;
  }

  ASSERT(hDC);
  COLORREF clr1 = PixelAlpha(s->m_clrBtnGradientDark, 105);

  if (pTabWnd->GetTabBkColor(iTab) != 0) {
    clr1 = pTabWnd->GetTabBkColor(iTab);

    if (clr1 == globalData.clrWindow && bIsActive) {
      draw_fillrectR(hDC, &rectFill, globalData.clrWindow);
      return;
    }
  }
  else {
    if (s->m_bAlwaysFillTab) {
      if (bIsActive) {
        draw_fillrectR(hDC, &rectFill, globalData.clrWindow);
        return;
      }
    }
    else {
      if (IsVS2005Style || pTabWnd->IsLeftRightRounded()) {
        if (bIsActive) {
          draw_fillrectR(hDC, &rectFill, globalData.clrWindow);
          return;
        }
      }
      else if (!bIsActive) {
        return;
      }
    }
  }

  COLORREF clr2 = PixelAlpha(clr1, 120);

  if (pTabWnd->GetLocation() == CBCGPTabWnd::LOCATION_TOP) {
    FillGradient(hDC, rectFill, clr1, clr2, TRUE);
  }
  else {
    FillGradient(hDC, rectFill, clr2, clr1, TRUE);
  }
}
BOOL CBCGPVisualManager2003::OnEraseTabsFrame(HDDC hDC, RECT rect, const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(hDC);
  ASSERT(pTabWnd);

  if (pTabWnd->IsFlatTab() || globalData.m_nBitsPerPixel <= 8 ||
      globalData.IsHighContastMode() || pTabWnd->IsDialogControl()) {
    return CBCGPVisualManagerXP::OnEraseTabsFrame(hDC, rect, pTabWnd);
  }

  COLORREF clrActiveTab = pTabWnd->GetTabBkColor(pTabWnd->GetActiveTab());

  if (clrActiveTab == 0 &&
      (IsOneNoteStyle || IsVS2005Style)) {
    draw_fillrectR(hDC, &rect, globalData.clrWindow);
    return TRUE;
  }

  COLORREF clr1 = s->m_clrBtnGradientDark;

  if (clrActiveTab != 0) {
    clr1 = clrActiveTab;
  }

  COLORREF clr2 = PixelAlpha(clr1, 130);

  if (pTabWnd->GetLocation() == CBCGPTabWnd::LOCATION_BOTTOM) {
    COLORREF clr = clr1;
    clr1 = clr2;
    clr2 = clr;
  }

  dm.FillGradient2(rect, clr1, clr2, 45);
  return TRUE;
}
void CBCGPVisualManager2003::OnEraseTabsButton(HDDC hDC, RECT rect,
    CBCGPButton* pButton,
    CBCGPBaseTabWnd* pBaseTab)
{
  ASSERT(hDC);

  ASSERT(pBaseTab);
  CBCGPTabWnd* pWndTab = DYNAMIC_DOWNCAST(CBCGPTabWnd, pBaseTab);

  if (pWndTab == NULL || pBaseTab->IsFlatTab() ||
      globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      pBaseTab->IsDialogControl()) {
    if (pBaseTab->IsDialogControl() && pBaseTab->IsVisualManagerStyle()) {
      OnFillDialog(hDC, pBaseTab->GetParent(), rect);
    }
    else {
      CBCGPVisualManagerXP::OnEraseTabsButton(hDC, rect, pButton, pBaseTab);
    }

    return;
  }

  if ((pBaseTab->IsOneNoteStyle() || pBaseTab->IsVS2005Style()) &&
      (IsPressed || IsHighlighted)) {

    if (IsPressed) {
      FillGradient(hDC, rect, s->m_clrHighlightDnGradientDark, s->m_clrHighlightDnGradientLight);
    }
    else {
      FillGradient(hDC, rect, s->m_clrHighlightGradientDark, s->m_clrHighlightGradientLight);
    }

    return;
  }

  CRgn rgn;
  rgn.CreateRectRgnIndirect(rect);
  hDC->SelectClipRgn(&rgn);
  RECT rectTabs;
  pWndTab->GetClientRect(&rectTabs);
  RECT rectTabArea;
  pWndTab->GetTabsRect(rectTabArea);

  if (pWndTab->GetLocation() == LOCATION_BOTTOM) {
    rectTabs.top = rectTabArea.top;
  }
  else {
    rectTabs.bottom = rectTabArea.bottom;
  }

  pWndTab->MapWindowPoints(pButton, rectTabs);
  OnEraseTabsArea(hDC, rectTabs, pWndTab);
  hDC->SelectClipRgn(NULL);
}
void CBCGPVisualManager2003::OnDrawTabsButtonBorder(HDDC hDC, RECT& rect,
    CBCGPButton* pButton, UINT /*uiState*/,
    CBCGPBaseTabWnd* /*pWndTab*/)
{
  ASSERT(hDC);


  if (pButton->IsPushed() || IsHighlighted) {
    draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }
}
void CBCGPVisualManager2003::ModifyGlobalColors()
{
  if (globalData.m_nBitsPerPixel <= 8 || !s->m_bIsStandardWinXPTheme || globalData.IsHighContastMode()) {
    //----------------------------------------------
    // Theme color may differ from the system color:
    //----------------------------------------------
    globalData.clrBtnFace = GetThemeColor(s->m_hThemeButton, COLOR_3DFACE);
    globalData.clrBtnShadow = GetThemeColor(s->m_hThemeButton, COLOR_3DSHADOW);
    globalData.clrBtnHilite = GetThemeColor(s->m_hThemeButton, COLOR_3DHIGHLIGHT);
    globalData.clrBtnDkShadow = GetThemeColor(s->m_hThemeButton, COLOR_3DDKSHADOW);
    globalData.clrBtnLight = GetThemeColor(s->m_hThemeButton, COLOR_3DLIGHT);
  }
  else {
    COLORREF clrBase = GetBaseThemeColor();

    if (s->m_WinXPTheme == WinXpTheme_Olive) {
      COLORREF clrToolBarGradientDark = PixelAlpha(
          clrBase, 120);
      COLORREF clrToolBarGradientLight = SmartMixColors(
          clrBase,
          GetThemeColor(s->m_hThemeWindow, COLOR_WINDOW),
          1., 2, 1);
      globalData.clrBtnFace = SmartMixColors(
          clrToolBarGradientDark,
          clrToolBarGradientLight, 1., 2, 1);
    }
    else if (s->m_WinXPTheme == WinXpTheme_Silver) {
      COLORREF clrToolBarGradientDark = SmartMixColors(
          clrBase,
          GetThemeColor(s->m_hThemeWindow, COLOR_3DFACE),
          0.75, 2);
      COLORREF clrToolBarGradientLight = SmartMixColors(
          clrBase,
          GetThemeColor(s->m_hThemeWindow, COLOR_WINDOW),
          1.03);
      globalData.clrBtnFace = PixelAlpha(SmartMixColors(
          clrToolBarGradientDark,
          clrToolBarGradientLight), 95);
    }
    else {
      globalData.clrBtnFace = SmartMixColors(
          GetThemeColor(s->m_hThemeWindow, /*COLOR_HIGHLIGHT*/29),
          GetThemeColor(s->m_hThemeWindow, COLOR_WINDOW));
    }

    globalData.clrBtnShadow = PixelAlpha(
        globalData.clrBtnFace, 70);
    globalData.clrBtnHilite = PixelAlpha(
        globalData.clrBtnFace, 130);
    globalData.clrBtnDkShadow = PixelAlpha(
        globalData.clrBtnFace, 50);
    globalData.clrBtnLight = PixelAlpha(
        globalData.clrBtnFace, 110);
  }

  globalData.clrBtnFace.DeleteObject();
  globalData.clrBtnFace.CreateSolidBrush(globalData.clrBtnFace);
}
void CBCGPVisualManager2003::SetUseGlobalTheme(BOOL bUseGlobalTheme/* = TRUE*/)
{
  s->m_bUseGlobalTheme = bUseGlobalTheme;
  CBCGPVisualManager::GetInstance()->OnUpdateSystemColors();
  CBCGPVisualManager::GetInstance()->RedrawAll();
}
void CBCGPVisualManager2003::SetStatusBarOfficeXPLook(BOOL bStatusBarOfficeXPLook/* = TRUE*/)
{
  s->m_bStatusBarOfficeXPLook = bStatusBarOfficeXPLook;
  CBCGPVisualManager::GetInstance()->RedrawAll();
}
void CBCGPVisualManager2003::SetDefaultWinXPColors(BOOL bDefaultWinXPColors/* = TRUE*/)
{
  s->m_bDefaultWinXPColors = bDefaultWinXPColors;
  CBCGPVisualManager::GetInstance()->OnUpdateSystemColors();
  CBCGPVisualManager::GetInstance()->RedrawAll();
}
void CBCGPVisualManager2003::GetTabFrameColors(const CBCGPBaseTabWnd* pTabWnd,
    COLORREF clrDark,
    COLORREF clrBlack,
    COLORREF clrHighlight,
    COLORREF clrFace,
    COLORREF clrDarkShadow,
    COLORREF clrLight,
    COLORREF& pbrFace,
    COLORREF& pbrBlack)
{
  ASSERT(pTabWnd);
  CBCGPVisualManagerXP::GetTabFrameColors(pTabWnd,
      clrDark, clrBlack,
      clrHighlight, clrFace,
      clrDarkShadow, clrLight,
      pbrFace, pbrBlack);

  if (IsOneNoteStyle || globalData.m_nBitsPerPixel <= 8 ||
      globalData.IsHighContastMode() || pTabWnd->IsDialogControl() ||
      !s->m_bIsStandardWinXPTheme) {
    return;
  }

  COLORREF clrActiveTab = pTabWnd->GetTabBkColor(pTabWnd->GetActiveTab());

  if (clrActiveTab == 0) {
    clrFace = globalData.clrWindow;
  }

  clrDark = globalData.clrBtnShadow;
  clrBlack = globalData.clrBtnDkShadow;
  clrHighlight = IsVS2005Style ? globalData.clrBtnShadow : globalData.clrBtnLight;
  clrDarkShadow = globalData.clrBtnShadow;
  clrLight = globalData.clrBtnFace;
}
void CBCGPVisualManager2003::OnFillTasksPaneBackground(HDDC hDC, RECT rectWorkArea)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnFillTasksPaneBackground(hDC, rectWorkArea);
    return;
  }

  ASSERT(hDC);

  FillGradient(hDC, rectWorkArea, s->m_clrTaskPaneGradientDark, s->m_clrTaskPaneGradientLight, TRUE);
}
void CBCGPVisualManager2003::OnDrawTasksGroupCaption(
    HDDC hDC,
    BOOL bIsHighlighted /*= FALSE*/, BOOL bIsSelected /*= FALSE*/,
    BOOL bCanCollapse /*= FALSE*/)
{
  ASSERT(hDC);
  ASSERT(pGroup);
  ASSERT(pPage);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawTasksGroupCaption(
        hDC, pGroup,
        bIsHighlighted, bIsSelected, bCanCollapse);
    return;
  }

  BOOL bIsToolBox = FALSE;
  RECT rectGroup = rect;

  // -----------------------
  // Draw caption background
  // -----------------------
  if (bIsToolBox) {
    RECT rectFill = rectGroup;
    rectFill DeflateRect(&, 1, 1);
    rectFill.bottom--;
    COLORREF clrGrdaient1 = PixelAlpha(
        s->m_clrToolBarGradientDark, 105);
    COLORREF clrGrdaient2 = PixelAlpha(
        s->m_clrToolBarGradientDark, 120);

    FillGradient(hDC, rectFill, clrGrdaient1, clrGrdaient2, TRUE);
    COLORREF brFillBottom(PixelAlpha(s->m_clrToolBarGradientDark, 120));
    RECT rectFillBottom = rectGroup;
    rectFillBottom DeflateRect(&, 1, 0);
    rectFillBottom.top = rectFillBottom.bottom - 1;
    draw_fillrectR(hDC, &rectFillBottom, brFillBottom);

    if (bCanCollapse) {
      //--------------------
      // Draw expanding box:
      //--------------------
      int nBoxSize = 9;
      int nBoxOffset = 6;

      if (GetRibbonImageScale() != 1.) {
        nBoxSize = (int)(.5 + nBoxSize * GetRibbonImageScale());
      }

      RECT rectButton = rectFill;
      rectButton.left += nBoxOffset;
      rectButton.right = rectButton.left + nBoxSize;
      rectButton.top = rectButton CenterPoint(&).y - nBoxSize / 2;
      rectButton.bottom = rectButton.top + nBoxSize;
      OnDrawExpandingBox(hDC, rectButton, !bIsCollapsed,
          globalData.clrBtnText);
      rectGroup.left = rectButton.right + nBoxOffset;
      bCanCollapse = FALSE;
    }
  }
  else {
    POINT pts[7];
    const int nLeft = rect.left;
    const int nTop = rect.top;
    pts[0].x = nLeft;
    pts[0].y = rect.bottom;
    pts[1].x = nLeft;
    pts[1].y = nTop + 4;
    pts[2].x = nLeft + 1;
    pts[2].y = nTop + 2;
    pts[3].x = nLeft + 2;
    pts[3].y = nTop + 1;
    pts[4].x = nLeft + 4;
    pts[4].y = nTop;
    pts[5].x = rect.right;
    pts[5].y = nTop;
    pts[6].x = rect.right;
    pts[6].y = rect.bottom;
    CRgn rgn;
    rgn.CreatePolygonRgn(pts, 7, WINDING);
    hDC->SelectClipRgn(&rgn);

    if (bIsSpecial) {
      FillGradient(hDC, rect, s->m_clrTaskPaneGroupCaptionSpecDark,
          s->m_clrTaskPaneGroupCaptionSpecLight, FALSE);
    }
    else {
      FillGradient(hDC, rect, s->m_clrTaskPaneGroupCaptionLight,
          s->m_clrTaskPaneGroupCaptionDark, FALSE);
    }

    hDC->SelectClipRgn(NULL);
  }

  // ---------------------------
  // Draw an icon if it presents
  // ---------------------------
  BOOL bShowIcon = (hIcon != NULL
      && sizeIcon.cx < rectGroup RCW(&) - rectGroup RCH(&));

  if (bShowIcon) {
    OnDrawTasksGroupIcon(hDC, pGroup, 5, bIsHighlighted, bIsSelected, bCanCollapse);
  }

  // -----------------------
  // Draw group caption text
  // -----------------------
  CFont* pFontOld = _clr = (globalData.fontBold);
  COLORREF clrTextOld = globalData.clrWindowText;

  if (bIsToolBox) {
    hDC->SetTextColor(globalData.clrBtnText);
  }
  else {
    if (bCanCollapse && bIsHighlighted) {
      hDC->SetTextColor(clrTextHot == 0 ?
          (bIsSpecial ? s->m_clrTaskPaneGroupBorder : s->m_clrTaskPaneHotText) :
            clrTextHot);
    }
    else {
      hDC->SetTextColor(clrText == 0 ?
          (bIsSpecial ? s->m_clrTaskPaneGroupBorder : s->m_clrTaskPaneHotText) :
            clrText);
    }
  }

  int nBkModeOld = hDC->SetBkMode(TRANSPARENT);
  int nTaskPaneHOffset = pPage->s->m_pTaskPane->GetGroupCaptionHorzOffset();
  int nTaskPaneVOffset = pPage->s->m_pTaskPane->GetGroupCaptionVertOffset();
  int nCaptionHOffset = (nTaskPaneHOffset != -1 ? nTaskPaneHOffset : s->m_nGroupCaptionHorzOffset);
  RECT rectText = rectGroup;
  rectText.left += (bShowIcon ? sizeIcon.cx + 5 : nCaptionHOffset);
  rectText.top += (nTaskPaneVOffset != -1 ? nTaskPaneVOffset : s->m_nGroupCaptionVertOffset);
  rectText.right = MAX(rectText.left,
      rectText.right - (bCanCollapse ? rectGroup RCH(&) : nCaptionHOffset));
  draw_textR(hDC, strName, rectText, DT_SINGLELINE | DT_VCENTER | DT_END_ELLIPSIS);
  hDC->SetBkMode(nBkModeOld);
  _clr = (pFontOld);


  // -------------------------
  // Draw group caption button
  // -------------------------
  if (bCanCollapse && !strName.IsEmpty()) {
    SIZE sizeButton = CBCGPMenuImages::Size();
    RECT rectButton = rectGroup;
    rectButton.left = MAX(rectButton.left,
        rectButton.right - (RCH(&rectButton) + 1) / 2 - (sizeButton.cx + 1) / 2);
    rectButton.top = MAX(rectButton.top,
        rectButton.bottom - (RCH(&rectButton) + 1) / 2 - (sizeButton.cy + 1) / 2);
    rectButton.right = rectButton.left + sizeButton.cx;
    rectButton.bottom = rectButton.top + sizeButton.cy;

    if (rectButton.right <= rectGroup.right & rectButton.bottom <= rectGroup.bottom) {
      if (bIsHighlighted) {
        // Draw button frame
        COLORREF  pBrushOld = (COLORREF) _clr = (globalData.clrBtnFace);
        COLORREF clrBckOld = clrBkColor;
        draw_3drect_inR(hDC, &rectButton, globalData.clrWindow, globalData.clrBtnShadow);
        hDC->SetBkColor(clrBckOld);
        _clr = (pBrushOld);
      }

      if (!bIsCollapsed) {
        DrawMenuImages(hDC, IdArowUp, rectButton.TopLeft());
      }
      else {
        DrawMenuImages(hDC, IdArowDown, rectButton.TopLeft());
      }
    }
  }
}
void CBCGPVisualManager2003::OnFillTasksGroupInterior(
    HDDC hDC, RECT rect, BOOL bSpecial /*= FALSE*/)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnFillTasksGroupInterior(hDC, rect, bSpecial);
    return;
  }

  ASSERT(hDC);

  if (bSpecial) {
    FillGradient(hDC, rect, s->m_clrTaskPaneGroupCaptionSpecDark,
        s->m_clrTaskPaneGroupCaptionSpecLight, TRUE);
  }
  else {
    FillGradient(hDC, rect, s->m_clrTaskPaneGroupAreaDark,
        s->m_clrTaskPaneGroupAreaLight, TRUE);
  }
}
void CBCGPVisualManager2003::OnDrawTasksGroupAreaBorder(
    HDDC hDC, RECT rect, BOOL /*bSpecial = FALSE*/,
    BOOL /*bNoTitle = FALSE*/)
{
  ASSERT(hDC);
  // Draw underline
  COLORREF  pPenOld = (COLORREF) _clr = (&s->m_penTaskPaneGroupBorder);
  rect.right -= 1;
  rect.bottom -= 1;
  TMoveTo(hDC, rect.left, rect.top);
  _LineTo(hDC, rect.right, rect.top);
  _LineTo(hDC, rect.right, rect.bottom);
  _LineTo(hDC, rect.left, rect.bottom);
  _LineTo(hDC, rect.left, rect.top);
  _clr = (pPenOld);
}
void CBCGPVisualManager2003::OnDrawTask(HDDC hDC, CBCGPTask* pTask, CImageList* pIcons,
    BOOL bIsHighlighted /*= FALSE*/, BOOL bIsSelected /*= FALSE*/)
{
  ASSERT(pTask);
  ASSERT(hDC);

  if (bIsSeparator) {
    RECT rectText = rect;
    COLORREF  pPenOld = (COLORREF) _clr = (&s->m_penSeparator);
    TMoveTo(hDC, rectText.left, CenterPoint(&rectText).y);
    _LineTo(hDC, rectText.right, CenterPoint(&rectText).y);
    _clr = (pPenOld);
    return;
  }

  CBCGPVisualManagerXP::OnDrawTask(hDC, pTask, pIcons, bIsHighlighted, bIsSelected);
}
void CBCGPVisualManager2003::OnDrawScrollButtons(HDDC hDC, RECT  rect, const int nBorderSize,
    int iImage, BOOL bHilited)
{
  ASSERT(hDC);
  RECT rectImage(cPOINT(0, 0), CBCGPMenuImages::Size());
  RECT rectFill = rect;
  rectFill.top -= nBorderSize;
  draw_fillrectR(hDC, &rectFill, globalData.clrBtnFace);

  if (bHilited) {
    COLORREF br = (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ?
        globalData.clrWindow : s->m_clrHighlightMenuItem == 0 ?
        s->m_clrHighlight : s->m_clrHighlightMenuItem);
    draw_fillrectR(hDC, &rect, br);
    draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }
  else {
    draw_3drect_inR(hDC, &rect, globalData.clrBtnShadow, globalData.clrBtnShadow);
  }

  DrawMenuImages(hDC,  iImage, rect);
}
COLORREF CBCGPVisualManager2003::OnFillCommandsListBackground(HDDC hDC, RECT rect, BOOL bIsSelected)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    return CBCGPVisualManagerXP::OnFillCommandsListBackground(hDC, rect, bIsSelected);
  }

  ASSERT(hDC);
  COLORREF clrText = globalData.clrBtnText;
  int iImageWidth = CBCGPToolBar::GetMenuImageSize().cx + GetMenuImageMargin();

  if (bIsSelected) {
    rect.left = 0;
    COLORREF color = s->m_clrHighlightMenuItem == 0 ?
        s->m_clrHighlight : s->m_clrHighlightMenuItem;
    COLORREF br = (color);
    draw_fillrectR(hDC, && rect, br);
    draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);

    // Now, we should define a menu text color...
    if (GetRValue(color) > 128 &&
        GetGValue(color) > 128 &&
        GetBValue(color) > 128) {
      clrText = _RGB(0, 0, 0);
    }
    else {
      clrText = _RGB(255, 255, 255);
    }
  }
  else {
    draw_fillrectR(hDC, &rect, &s->m_clrMenuLight);
    RECT rectImages = rect;
    rectImages.right = rectImages.left + iImageWidth + MENU_IMAGE_MARGIN;

    FillGradient(hDC, rectImages, s->m_clrToolBarGradientLight, s->m_clrToolBarGradientDark, FALSE);
    clrText = globalData.clrBtnText;
  }

  return clrText;
}
void CBCGPVisualManager2003::OnDrawStatusBarProgress(HDDC hDC, CBCGPStatusBar* pStatusBar,
    RECT rectProgress, int nProgressTotal, int nProgressCurr,
    COLORREF clrBtn, COLORREF clrProgressBarDest, COLORREF clrProgressText,
    BOOL bProgressText)
{
  if (!DrawStatusBarProgress(hDC, pStatusBar,
      rectProgress, nProgressTotal, nProgressCurr,
      clrBtn, clrProgressBarDest, clrProgressText, bProgressText)) {
    CBCGPVisualManagerXP::OnDrawStatusBarProgress(hDC, pStatusBar,
        rectProgress, nProgressTotal, nProgressCurr,
        clrBtn, clrProgressBarDest, clrProgressText, bProgressText);
  }
}
void CBCGPVisualManager2003::OnDrawStatusBarPaneBorder(HDDC hDC, CBCGPStatusBar* pBar,
    RECT rectPane, UINT uiID, UINT nStyle)
{
  if (!s->m_bStatusBarOfficeXPLook || s->m_hThemeStatusBar == NULL) {
    CBCGPVisualManagerXP::OnDrawStatusBarPaneBorder(hDC, pBar,
        rectPane, uiID, nStyle);
  }
}
void CBCGPVisualManager2003::OnFillHeaderCtrlBackground(
    HDDC hDC, RECT rect)
{
  ASSERT(hDC);
  CBCGPVisualManagerXP::OnFillHeaderCtrlBackground(pCtrl, hDC, rect);
}
COLORREF CBCGPVisualManager2003::OnDrawControlBarCaption(HDDC hDC, CBCGPDockingControlBar* pBar,
    BOOL bActive, RECT rectCaption, RECT rectButtons)
{
  ASSERT(hDC);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    return CBCGPVisualManagerXP::OnDrawControlBarCaption(hDC, pBar,
        bActive, rectCaption, rectButtons);
  }

  if (!bActive) {
    FillGradient(hDC, rectCaption,
        s->m_clrToolBarGradientDark,
        s->m_clrToolBarGradientLight, TRUE);
  }
  else {
    FillGradient(hDC, rectCaption,
        s->m_clrHighlightGradientDark,
        s->m_clrHighlightGradientLight,
        TRUE);
  }

  return globalData.clrBtnText;
}
void CBCGPVisualManager2003::OnFillAutoHideButtonBackground(HDDC hDC, RECT rect, CBCGPAutoHideButton* pButton)
{
  ASSERT(hDC);


  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnFillAutoHideButtonBackground(hDC, rect, pButton);
    return;
  }

  if (pButton->IsActive()) {
    FillGradient(hDC, rect,
        s->m_clrHighlightGradientLight, s->m_clrHighlightGradientDark,
        pButton->IsHorizontal());
  }
  else {
    FillGradient(hDC, rect,
        s->m_clrBtnGradientLight, s->m_clrBtnGradientDark,
        pButton->IsHorizontal());
  }
}
void CBCGPVisualManager2003::OnDrawAutoHideButtonBorder(HDDC hDC, RECT rectBounds, RECT rectBorderSize, CBCGPAutoHideButton* pButton)
{
  ASSERT(hDC);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawAutoHideButtonBorder(hDC, rectBounds, rectBorderSize, pButton);
    return;
  }

  COLORREF clr = globalData.clrBtnShadow;
  COLORREF clrText = globalData.clrWindowText;

  if (rectBorderSize.left > 0) {
    draw_fillrectR(hDC, &rectBounds.left, rectBounds.top,
        rectBounds.left + rectBorderSize.left,
        rectBounds.bottom, clr);
  }

  if (rectBorderSize.top > 0) {
    draw_fillrectR(hDC, &rectBounds.left, rectBounds.top,
        rectBounds.right,
        rectBounds.top + rectBorderSize.top, clr);
  }

  if (rectBorderSize.right > 0) {
    draw_fillrectR(hDC, &rectBounds.right - rectBorderSize.right, rectBounds.top,
        rectBounds.right,
        rectBounds.bottom, clr);
  }

  if (rectBorderSize.bottom > 0) {
    draw_fillrectR(hDC, &rectBounds.left, rectBounds.bottom - rectBorderSize.bottom,
        rectBounds.right,
        rectBounds.bottom, clr);
  }

  hDC->SetTextColor(clrText);
}
void CBCGPVisualManager2003::OnDrawOutlookBarSplitter(HDDC hDC, RECT rectSplitter)
{
  ASSERT(hDC);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawOutlookBarSplitter(hDC, rectSplitter);
    return;
  }

  FillGradient(hDC, rectSplitter,
      s->m_clrCaptionBarGradientDark,
      s->m_clrCaptionBarGradientLight,
      TRUE);
  const int nBoxesNumber = 10;
  const int nBoxSize = rectSplitter RCH(&) - 3;
  int x = rectSplitter CenterPoint(&).x - nBoxSize * nBoxesNumber / 2;
  int y = rectSplitter.top + 2;

  for (int nBox = 0; nBox < nBoxesNumber; nBox++) {
    draw_fillrectR(hDC, x + 1, y + 1, nBoxSize / 2, nBoxSize / 2,
        globalData.clrBtnHilite);
    draw_fillrectR(hDC, x, y, nBoxSize / 2, nBoxSize / 2,
        s->m_clrGripper);
    x += nBoxSize;
  }
}
void CBCGPVisualManager2003::OnFillOutlookBarCaption(HDDC hDC, RECT rectCaption, COLORREF clrText)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnFillOutlookBarCaption(hDC, rectCaption, clrText);
    return;
  }

  FillGradient(hDC, rectCaption,
      s->m_clrCaptionBarGradientDark, s->m_clrCaptionBarGradientLight, TRUE);
  clrText = globalData.clrBtnHilite;
}
BOOL CBCGPVisualManager2003::OnDrawCalculatorButton(HDDC hDC,
    RECT rect, CBCGPToolbarButton* pButton,
    CBCGPVisualManager::int state,
    int /*cmd*/ /* CBCGPCalculator::CalculatorCommands */,
    CBCGPCalculator* pCalculator)
{

  ASSERT(hDC);
  ASSERT(pCalculator);

  switch (state) {
  case ButtonsIsPressed:
    OnFillHighlightedArea(hDC, rect, &s->m_clrHighlightDn, pButton);
    break;

  case ButtonsIsHighlighted:
    OnFillHighlightedArea(hDC, rect, &s->m_clrHighlight, pButton);
    break;

  default: {

    if (pCalculator->IsDialogControl()) {
      FillGradient(hDC, rect, globalData.clrBtnFace, globalData.clrBtnHilite);
      draw_3drect_inR(hDC, &rect, globalData.clrBtnShadow, globalData.clrBtnShadow);
      return TRUE;
    }
    else {
      FillGradient(hDC, rect, s->m_clrToolBarGradientDark, s->m_clrToolBarGradientLight);
    }
  }
  break;
  }

  draw_3drect_inR(hDC, &rect, s->m_clrToolBarGradientDark, s->m_clrToolBarGradientDark);
  return TRUE;
}
BOOL CBCGPVisualManager2003::OnDrawCalculatorDisplay(HDDC hDC, RECT rect,
    const char* /*strText*/, BOOL /*bMem*/,
    CBCGPCalculator* /*pCalculator*/)
{
  draw_fillrectR(hDC, &rect, globalData.clrWindow);
  draw_3drect_inR(hDC, &rect, s->m_clrToolBarGradientDark, s->m_clrToolBarGradientDark);
  return TRUE;
}
BOOL CBCGPVisualManager2003::OnDrawBrowseButton(HDDC hDC, RECT rect,
    CBCGPEdit* /*pEdit*/, CBCGPVisualManager::int state, COLORREF /*clrText*/)
{
  ASSERT(hDC);
  RECT rectFrame = rect;
  rectFrame InflateRect(&, 0, 1, 1, 1);

  switch (state) {
  case ButtonsIsPressed:
    OnFillHighlightedArea(hDC, rect, &s->m_clrHighlightDn, NULL);
    draw_3drect_inR(hDC, &rectFrame, s->m_clrToolBarGradientDark, s->m_clrToolBarGradientDark);
    break;

  case ButtonsIsHighlighted:
    OnFillHighlightedArea(hDC, rect, &s->m_clrHighlight, NULL);
    draw_3drect_inR(hDC, &rectFrame, s->m_clrToolBarGradientDark, s->m_clrToolBarGradientDark);
    break;

  default: {

    FillGradient(hDC, rect, globalData.clrBtnFace, globalData.clrBtnHilite);
    draw_3drect_inR(hDC, &rect, globalData.clrBtnHilite, globalData.clrBtnHilite);
  }
  break;
  }

  return TRUE;
}
COLORREF CBCGPVisualManager2003::GetWindowColor()
{
  return GetThemeColor(s->m_hThemeWindow, COLOR_WINDOW);
}
void CBCGPVisualManager2003::OnHighlightRarelyUsedMenuItems(HDDC hDC, RECT rectRarelyUsed)
{
  ASSERT(hDC);
  rectRarelyUsed.left --;
  rectRarelyUsed.right = rectRarelyUsed.left + CBCGPToolBar::GetMenuImageSize().cx +
      2 * GetMenuImageMargin() + 2;

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnHighlightRarelyUsedMenuItems(hDC, rectRarelyUsed);
    return;
  }

  FillGradient(hDC, rectRarelyUsed, s->m_clrMenuRarelyUsed, s->m_clrToolBarGradientDark, FALSE);
}
void CBCGPVisualManager2003::OnDrawControlBorder(HDDC hDC, RECT rect, BOOL bDrawOnGlass)
{
  if (s->m_hThemeComboBox == NULL) {
    CBCGPVisualManagerXP::OnDrawControlBorder(hDC, rect, pWndCtrl, bDrawOnGlass);
    return;
  }

  ASSERT(hDC);
  COLORREF clrBorder = 0;

  if ((*s->m_pfGetThemeColor)(s->m_hThemeComboBox, CP_READONLY, 0, TMT_BORDERCOLOR, &clrBorder) != S_OK) {
    CBCGPVisualManagerXP::OnDrawControlBorder(hDC, rect, pWndCtrl, bDrawOnGlass);
    return;
  }

  if (bDrawOnGlass) {

    DrawRect(hDC, rect, 0, clrBorder);
    DeflateRect(&rect, 1, 1);
    DrawRect(hDC, rect, 0, globalData.clrWindow);
  }
  else {
    draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
    DeflateRect(&rect, 1, 1);
    draw_3drect_inR(hDC, &rect, globalData.clrWindow, globalData.clrWindow);
  }
}
void CBCGPVisualManager2003::OnDrawExpandingBox(HDDC hDC, RECT rect, BOOL bIsOpened, COLORREF colorBox)
{
  ASSERT(hDC);
  CBCGPVisualManagerXP::OnDrawExpandingBox(hDC, rect, bIsOpened, colorBox);
  return;
}
void CBCGPVisualManager2003::GetSmartDockingBaseMarkerColors(
    COLORREF clrBaseGroupBackground,
    COLORREF clrBaseGroupBorder)
{
  if (globalData.m_nBitsPerPixel > 8 && !globalData.IsHighContastMode()) {
    clrBaseGroupBackground = _RGB(228, 228, 228);
    clrBaseGroupBorder = _RGB(181, 181, 181);
  }
  else {
    clrBaseGroupBackground = globalData.clrBtnFace;
    clrBaseGroupBorder = globalData.clrBtnShadow;
  }
}
COLORREF CBCGPVisualManager2003::GetSmartDockingMarkerToneColor()
{
  if (globalData.m_nBitsPerPixel > 8 && !globalData.IsHighContastMode()) {
    WinXpTheme theme = GetStandardWinXPTheme();

    switch (theme) {
    case WinXpTheme_Blue:
      return _RGB(61, 123, 241);

    case WinXpTheme_Olive:
      return _RGB(190, 146, 109);

    case WinXpTheme_Silver:
      return _RGB(134, 130, 169);
    }
  }

  return CBCGPVisualManagerXP::GetSmartDockingMarkerToneColor();
}
void CBCGPVisualManager2003::OnDrawStatusBarSizeBox(HDDC hDC, CBCGPStatusBar* pStatBar,
    RECT rectSizeBox)
{
  CBCGPVisualManagerXP::OnDrawStatusBarSizeBox(hDC, pStatBar, rectSizeBox);
  return;
}
COLORREF CBCGPVisualManager2003::GetBaseThemeColor()
{
  return s->m_bIsStandardWinXPTheme && s->m_hThemeWindow != NULL ?
      GetThemeColor(s->m_hThemeWindow, 29) :
      globalData.clrBtnFace;
}
BOOL CBCGPVisualManager2003::OnEraseToolBoxButton(HDDC hDC, RECT rect,
    CBCGPToolBoxButton* pButton)
{
  ASSERT(hDC);


  if (IsHighlighted || IsCheck) {
    OnFillHighlightedArea(hDC, rect,
        IsCheck ? &s->m_clrHighlightChecked : &s->m_clrHighlight, NULL);
  }

  return TRUE;
}
BOOL CBCGPVisualManager2003::OnDrawToolBoxButtonBorder(HDDC hDC, RECT& rect,
    CBCGPToolBoxButton* pButton, UINT /*uiState*/)
{
  ASSERT(hDC);


  if (IsHighlighted || IsCheck) {
    draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }

  return TRUE;
}
void CBCGPVisualManager2003::OnHighlightQuickCustomizeMenuButton(HDDC hDC,
    RECT rect)
{
  ASSERT(hDC);

  if (globalData.IsHighContastMode()) {
    draw_fillrectR(hDC, &rect, &s->m_clrBtnBkgnd);
  }
  else {
    COLORREF br = (s->m_clrToolBarGradientLight);
    draw_fillrectR(hDC, &rect, br);
  }

  draw_3drect_inR(hDC, &rect, s->m_clrMenuBorder, s->m_clrMenuBorder);
}
void CBCGPVisualManager2003::OnDrawHeaderCtrlBorder(HDDC hDC,
    RECT& rect, BOOL bIsPressed, BOOL bIsHighlighted)
{
  CBCGPVisualManagerXP::OnDrawHeaderCtrlBorder(pCtrl, hDC, rect, bIsPressed, bIsHighlighted);
  return;
}
void CBCGPVisualManager2003::OnFillPopupWindowBackground(HDDC hDC, RECT rect)
{
  ASSERT(hDC);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnFillPopupWindowBackground(hDC, rect);
    return;
  }

  FillGradient(hDC, rect, s->m_clrBtnGradientDark, s->m_clrBtnGradientLight);
}
void CBCGPVisualManager2003::OnDrawPopupWindowBorder(HDDC hDC, RECT rect)
{
  ASSERT(hDC);
  draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
}
COLORREF  CBCGPVisualManager2003::OnDrawPopupWindowCaption(HDDC hDC, RECT rectCaption, CBCGPPopupWindow* pPopupWnd)
{
  ASSERT(hDC);

  if (globalData.m_nBitsPerPixel <= 8 ||
      globalData.IsHighContastMode()) {
    return CBCGPVisualManagerXP::OnDrawPopupWindowCaption(hDC, rectCaption, pPopupWnd);
  }

  FillGradient(hDC, rectCaption,
      s->m_clrCaptionBarGradientDark, s->m_clrCaptionBarGradientLight, TRUE);

  if (pPopupWnd->HasSmallCaption()) {
    RECT rectGripper = rectCaption;
    int xCenter = rectGripper CenterPoint(&).x;
    int yCenter = rectGripper CenterPoint(&).y;
    rectGripper.left = xCenter - 20;
    rectGripper.right = xCenter + 20;
    rectGripper.top = yCenter - 4;
    rectGripper.bottom = yCenter + 2;
    OnDrawBarGripper(hDC, rectGripper, FALSE, NULL);
  }

  // get the text color
  return globalData.clrBtnHilite;
}
void CBCGPVisualManager2003::OnErasePopupWindowButton(HDDC hDC, RECT rc)
{
  ASSERT(hDC);


  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnErasePopupWindowButton(hDC, rc, pButton);
    return;
  }

  if (IsPressed) {
    COLORREF color = s->m_clrHighlightDnGradientLight == 0 ?
        s->m_clrHighlightDn : s->m_clrHighlightDnGradientLight;
    COLORREF br = (color);
    draw_fillrectR(hDC, && rc, br);
    return;
  }
  else if (IsHighlighted || pButton->IsPushed()) {
    COLORREF color = s->m_clrHighlightMenuItem == 0 ?
        s->m_clrHighlight : s->m_clrHighlightMenuItem;
    COLORREF br = (color);
    draw_fillrectR(hDC, && rc, br);
    return;
  }

  RECT rectParent;
  pButton->GetParent()->GetClientRect(rectParent);
  pButton->GetParent()->MapWindowPoints(pButton, rectParent);
  OnFillPopupWindowBackground(hDC, rectParent);
}
void CBCGPVisualManager2003::OnDrawPopupWindowButtonBorder(HDDC hDC, RECT rc)
{
  ASSERT(hDC);


  if (IsHighlighted || pButton->IsPushed() ||
      IsCaptionButton) {
    draw_3drect_inR(hDC, &rc, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }
}
COLORREF CBCGPVisualManager2003::OnFillPlannerCaption(HDDC hDC, CBCGPPlannerView* pView,
    RECT rect, BOOL bIsToday, BOOL bIsSelected, BOOL bNoBorder/* = FALSE*/, BOOL bHorz /*= TRUE*/)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      !bIsToday) {
    return CBCGPVisualManagerXP::OnFillPlannerCaption(hDC, pView,
        rect, bIsToday, bIsSelected, bNoBorder, bHorz);
  }

  ASSERT(hDC);

  DeflateRect(&rect, 1, 1);
  FillGradient(hDC, rect,
      s->m_clrPlannerTodayFill, globalData.clrBtnFace, bHorz);

  if (bIsToday) {
    COLORREF _clr = (&s->m_penPlannerTodayLine);
    TMoveTo(hDC, rect.left, rect.bottom);
    _LineTo(hDC, rect.right, rect.bottom);

  }

  return globalData.clrBtnText;
}
COLORREF CBCGPVisualManager2003::GetPlannerViewBackgroundColor(CBCGPPlannerView* pView)
{
  ASSERT(pView);
  COLORREF colorFill = pclrBackgroundColor;

  if (colorFill == CLR_DEFAULT) {
    colorFill = s->m_clrPlannerWork; // Use default color
  }

  return colorFill;
}
COLORREF CBCGPVisualManager2003::GetPlannerHourLineColor(CBCGPPlannerView* pView,
    BOOL bWorkingHours, BOOL bHour)
{
  ASSERT(pView);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    return CBCGPVisualManagerXP::GetPlannerHourLineColor(pView,
        bWorkingHours, bHour);
  }

  COLORREF colorFill = CLR_DEFAULT;

  if (bWorkingHours) {
    colorFill = GetPlannerViewNonWorkingColor(pView);
  }
  else {
    colorFill = GetPlannerViewWorkingColor(pView);
  }

  if (colorFill == CLR_DEFAULT) {
    colorFill = GetPlannerViewBackgroundColor(pView);
  }

  return CalculateHourLineColor(colorFill, bWorkingHours, bHour);
}
COLORREF CBCGPVisualManager2003::GetPlannerNonWorkingColor(COLORREF clrWorking)
{
  return CalculateNonWorkingColor(clrWorking);
}
COLORREF CBCGPVisualManager2003::GetPlannerViewWorkingColor(CBCGPPlannerView* pView)
{
  return CalculateWorkingColor(GetPlannerViewBackgroundColor(pView));
}
COLORREF CBCGPVisualManager2003::GetPlannerViewNonWorkingColor(CBCGPPlannerView* pView)
{
  return GetPlannerNonWorkingColor(GetPlannerViewWorkingColor(pView));
}
void CBCGPVisualManager2003::OnDrawPlannerTimeLine(HDDC hDC, RECT rect)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawPlannerTimeLine(hDC, pView, rect);
    return;
  }

  ASSERT(hDC);

  FillGradient(hDC, rect, s->m_clrPlannerTodayFill, globalData.clrBtnFace, TRUE);
  COLORREF _clr = (&s->m_penPlannerTodayLine);
  TMoveTo(hDC, rect.left, rect.bottom);
  _LineTo(hDC, rect.right, rect.bottom);

}
void CBCGPVisualManager2003::OnFillPlanner(HDDC hDC, CBCGPPlannerView* pView,
    RECT rect, BOOL bWorkingArea)
{
  ASSERT(hDC);
  ASSERT(pView);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnFillPlanner(hDC, pView, rect, bWorkingArea);
    return;
  }

  COLORREF colorFill = CLR_DEFAULT;

  if (bWorkingArea) {
    colorFill = GetPlannerViewWorkingColor(pView);
  }
  else {
    colorFill = GetPlannerViewNonWorkingColor(pView);
  }

  if (colorFill == CLR_DEFAULT) {
    colorFill = GetPlannerViewBackgroundColor(pView);
  }

  COLORREF br = (colorFill);
  draw_fillrectR(hDC, &rect, br);
}
COLORREF CBCGPVisualManager2003::GetReportCtrlGroupBackgoundColor()
{
  return s->m_clrHighlightMenuItem;
}
void CBCGPVisualManager2003::OnDrawGridSelectionBorder(HDDC hDC, RECT rect)
{
  ASSERT(hDC);
  draw_3drect_inR(hDC, &rect, s->m_clrHighlightGradientDark, s->m_clrHighlightGradientDark);
  DeflateRect(&rect, 1, 1);
  draw_3drect_inR(hDC, &rect, s->m_clrHighlightGradientDark, s->m_clrHighlightGradientDark);
}
void CBCGPVisualManager2003::OnDrawGridExpandingBox(HDDC hDC, RECT rect, BOOL bIsOpened, COLORREF colorBox)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawGridExpandingBox(hDC, rect, bIsOpened, colorBox);
    return;
  }

  ASSERT(hDC);

  if ((RCW(&rect) % 2) != 0) {
    rect.right++;
  }

  if ((RCH(&rect) % 2) != 0) {
    rect.bottom++;
  }

  DeflateRect(&rect, 1, 1, 0, 0);

  dm.FillGradient2(rect, _RGB(255, 255, 255), s->m_clrToolBarGradientDark, 45);
  InflateRect(&rect, 1, 1, 0, 0);
  COLORREF _clr = (&s->m_penGridExpandBoxLight);
  ASSERT(pOldPen);
  TMoveTo(hDC, rect.left + 1, rect.top);
  _LineTo(hDC, rect.right, rect.top);
  TMoveTo(hDC, rect.left, rect.top + 1);
  _LineTo(hDC, rect.left, rect.bottom);
  _clr = (&s->m_penGridExpandBoxDark);
  TMoveTo(hDC, rect.left + 1, rect.bottom);
  _LineTo(hDC, rect.right, rect.bottom);
  TMoveTo(hDC, rect.right, rect.top + 1);
  _LineTo(hDC, rect.right, rect.bottom);
  const int dx = RCW(&rect) / 2 - 3;
  const int dy = RCH(&rect) / 2 - 3;
  POINT ptCenter = rect CenterPoint(&);
  TMoveTo(hDC, ptCenter.x - dx, ptCenter.y);
  _LineTo(hDC, ptCenter.x + dx + 1, ptCenter.y);

  if (!bIsOpened) {
    TMoveTo(hDC, ptCenter.x, ptCenter.y - dy);
    _LineTo(hDC, ptCenter.x, ptCenter.y + dy + 1);
  }


}
void CBCGPVisualManager2003::OnFillGridHeaderBackground(HDDC hDC, RECT rect)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      s->m_hThemeHeader == NULL) {
    CBCGPVisualManagerXP::OnFillGridHeaderBackground(pCtrl, hDC, rect);
    return;
  }

  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
}
BOOL CBCGPVisualManager2003::OnDrawGridHeaderItemBorder(HDDC hDC, RECT rect, BOOL bPressed)
{
  return CBCGPVisualManagerXP::OnDrawGridHeaderItemBorder(pCtrl, hDC, rect, bPressed);
  return TRUE;
}
void CBCGPVisualManager2003::OnFillGridRowHeaderBackground(HDDC hDC, RECT rect)
{
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
}
BOOL CBCGPVisualManager2003::OnDrawGridRowHeaderItemBorder(HDDC hDC, RECT rect)
{
  ASSERT(hDC);
  COLORREF _clr = (globalData.clrBtnShadow);
  TMoveTo(hDC, rect.left, rect.top);
  _LineTo(hDC, rect.left, rect.bottom);
  TMoveTo(hDC, rect.right - 1, rect.top);
  _LineTo(hDC, rect.right - 1, rect.bottom);
  TMoveTo(hDC, rect.left, rect.top);
  _LineTo(hDC, rect.right - 1, rect.top);

  return TRUE;
}
void CBCGPVisualManager2003::OnFillGridSelectAllAreaBackground(HDDC hDC, RECT rect)
{
  OnFillGridHeaderBackground(pCtrl, hDC, rect);
}
BOOL CBCGPVisualManager2003::OnDrawGridSelectAllAreaBorder(HDDC hDC, RECT rect, BOOL bPressed)
{
  return OnDrawGridHeaderItemBorder(pCtrl, hDC, rect, bPressed);
}
BOOL CBCGPVisualManager2003::OnSetGridColorTheme(BCGP_GRID_COLOR_DATA& theme)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      s->m_hThemeHeader == NULL) {
    return CBCGPVisualManagerXP::OnSetGridColorTheme(pCtrl, theme);
  }

  theme.s->m_clrHorzLine                     = s->m_clrToolBarGradientDark;
  theme.s->m_clrVertLine                     = s->m_clrToolBarBottomLine;
  theme.s->m_EvenColors.s->m_clrBackground      = s->m_clrToolBarGradientLight;
  theme.s->m_EvenColors.s->m_clrText            = globalData.clrBtnText;
  theme.s->m_OddColors.s->m_clrBackground       = s->m_clrToolBarGradientDark;
  theme.s->m_OddColors.s->m_clrText             = globalData.clrBtnText;
  theme.s->m_SelColors.s->m_clrBackground       = s->m_clrHighlightMenuItem;

  if (GetRValue(s->m_clrHighlightMenuItem) > 128 &&
      GetGValue(s->m_clrHighlightMenuItem) > 128 &&
      GetBValue(s->m_clrHighlightMenuItem) > 128) {
    theme.s->m_SelColors.s->m_clrText = _RGB(0, 0, 0);
  }
  else {
    theme.s->m_SelColors.s->m_clrText = _RGB(255, 255, 255);
  }

  theme.s->m_GroupColors.s->m_clrBackground     = s->m_clrToolBarGradientDark;
  theme.s->m_GroupColors.s->m_clrGradient       = s->m_clrToolBarGradientLight;
  theme.s->m_GroupColors.s->m_clrText           = globalData.clrBtnText;
  theme.s->m_GroupSelColors.s->m_clrBackground  = s->m_clrHighlightGradientDark;
  theme.s->m_GroupSelColors.s->m_clrGradient    = s->m_clrHighlightGradientLight;
  theme.s->m_GroupSelColors.s->m_clrText    = globalData.clrBtnText;
  theme.s->m_LeftOffsetColors.s->m_clrBackground = s->m_clrToolBarGradientDark;
  theme.s->m_LeftOffsetColors.s->m_clrBorder     = theme.s->m_clrHorzLine;
  return TRUE;
}
void CBCGPVisualManager2003::GetGanttColors(const CBCGPGanttChart* pChart, BCGP_GANTT_CHART_COLORS& colors, COLORREF clrBack)
{
  CBCGPVisualManagerXP::GetGanttColors(pChart, colors, clrBack);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    return;
  }

  colors->clrGridLine0 = CalculateHourLineColor(colors->clrRowDayOff, TRUE, TRUE);
  colors->clrGridLine1 = CalculateHourLineColor(colors->clrRowDayOff, TRUE, FALSE);
  colors->clrSelection = globalData.clrHilite;
  colors->clrSelectionBorder = globalData.clrHilite;
  colors->clrConnectorLines = globalData.clrWindowFrame;
}
void CBCGPVisualManager2003::DrawGanttHeaderCell(const CBCGPGanttChart* pChart, HDDC hDC, const BCGP_GANTT_CHART_HEADER_CELL_INFO& cellInfo, BOOL bHilite)
{
  CBCGPVisualManagerXP::DrawGanttHeaderCell(pChart, hDC, cellInfo, bHilite);
}
void CBCGPVisualManager2003::FillGanttBar(const CBCGPGanttItem* pItem, HDDC hDC, RECT  rectFill, COLORREF color, double dGlowLine)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::FillGanttBar(pItem, hDC, rectFill, color, dGlowLine);
    return;
  }

  dGlowLine = MIN(1.0, dGlowLine);
  dGlowLine = MAX(0.0, dGlowLine);
  RECT rectPart = rectFill;
  int h = rectFill RCH(&);
  rectPart.bottom = (LONG)(rectFill.top + dGlowLine * h);
  CBCGPDrawManager dm(hDC);
  FillGradient(hDC, rectPart, MixColors(color, _RGB(255, 255, 255), 0.3f), MixColors(color, _RGB(255, 255, 255), 0.15f), TRUE);
  rectPart.top = rectPart.bottom;
  rectPart.bottom = rectFill.bottom;
  FillGradient(hDC, rectPart, MixColors(color, _RGB(0, 0, 0), 0.2f), color, TRUE);
}
void CBCGPVisualManager2003::OnDrawCheckBoxEx(HDDC hDC, RECT rect,
    int nState,
    BOOL bHighlighted,
    BOOL bPressed,
    BOOL bEnabled)
{
  if (!DrawCheckBox(hDC, rect, bHighlighted, nState, bEnabled, bPressed)) {
    CBCGPVisualManagerXP::OnDrawCheckBoxEx(hDC, rect, nState, bHighlighted, bPressed, bEnabled);
  }
}
void CBCGPVisualManager2003::OnDrawRadioButton(HDDC hDC, RECT rect,
    BOOL bOn,
    BOOL bHighlighted,
    BOOL bPressed,
    BOOL bEnabled)
{
  if (!DrawRadioButton(hDC, rect, bHighlighted, bOn, bEnabled, bPressed)) {
    CBCGPVisualManagerXP::OnDrawRadioButton(hDC, rect, bOn, bHighlighted, bPressed, bEnabled);
  }
}
void CBCGPVisualManager2003::GetCalendarColors(const CBCGPCalendar* pCalendar,
    CBCGPCalendarColors& colors)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::GetCalendarColors(pCalendar, colors);
    return;
  }

  colors->clrCaption = s->m_clrBtnGradientDark;
  colors->clrCaptionText = globalData.clrBtnText;

  if (s->m_bIsStandardWinXPTheme) {
    colors->clrSelected = _RGB(251, 230, 148);
  }
  else {
    if (s->m_clrHighlightMenuItem != 0) {
      colors->clrSelected = s->m_clrHighlightMenuItem;
    }
    else {
      colors->clrSelected = s->m_clrHighlight;
    }
  }

  colors->clrSelectedText = globalData.clrBtnText;
  colors->clrTodayBorder = _RGB(187, 85, 3);
}
COLORREF CBCGPVisualManager2003::GetPropListGroupColor()
{
  return CBCGPVisualManager::GetPropListGroupColor(pPropList);
}
COLORREF CBCGPVisualManager2003::GetPropListGroupTextColor()
{
  return CBCGPVisualManager::GetPropListGroupTextColor(pPropList);
}
COLORREF CBCGPVisualManager2003::OnDrawRibbonCategoryTab(
    HDDC hDC,

    BOOL bIsActive)
{
  if (globalData.m_nBitsPerPixel <= 8 ||
      globalData.IsHighContastMode()) {
    return CBCGPVisualManagerXP::OnDrawRibbonCategoryTab(
        hDC, pTab, bIsActive);
  }

  ASSERT(hDC);

  CBCGPRibbonCategory* pCategory = pTab->GetParentCategory();

  CBCGPRibbonBar* pBar = pCategory->GetParentRibbonBar();
  bIsActive = bIsActive &&
      ((pBar->GetHideFlags() & BCGPRIBBONBAR_HIDE_ELEMENTS) == 0 || pTab->GetDroppedDown() != NULL);
  const BOOL bIsFocused = pTab->IsFocused() && (pBar->GetHideFlags() & BCGPRIBBONBAR_HIDE_ELEMENTS);
  const BOOL bIsHighlighted = (pTab->IsHighlighted() || bIsFocused) && !pTab->IsDroppedDown();
  RECT rectTab = pTab->GetRect();
  rectTab.top += 3;
  const int nTrancateRatio = pBar->GetTabTrancateRatio();

  if (nTrancateRatio > 0) {
    RECT rectRight = rectTab;
    rectRight.left = rectRight.right - 1;
    const int nPercent = MAX(10, 100 - nTrancateRatio / 2);
    COLORREF color1 = PixelAlpha(
        globalData.clrBtnShadow, nPercent);
    COLORREF color2 = PixelAlpha(
        color1, 120);

    FillGradient(hDC, rectRight, color1, color2, TRUE);
  }

  if (!bIsActive && !bIsHighlighted) {
    return globalData.clrBtnText;
  }

  rectTab.right -= 2;
  COLORREF pen = (globalData.clrBtnShadow);
  COLORREF _clr = (pen);
#define RIBBONTAB_POINTS_NUM  8
  POINT pts[RIBBONTAB_POINTS_NUM];
  pts[0] = cPOINT(rectTab.left, rectTab.bottom);
  pts[1] = cPOINT(rectTab.left + 1, rectTab.bottom - 1);
  pts[2] = cPOINT(rectTab.left + 1, rectTab.top + 2);
  pts[3] = cPOINT(rectTab.left + 3, rectTab.top);
  pts[4] = cPOINT(rectTab.right - 3, rectTab.top);
  pts[5] = cPOINT(rectTab.right - 1, rectTab.top + 2);
  pts[6] = cPOINT(rectTab.right - 1, rectTab.bottom - 1);
  pts[7] = cPOINT(rectTab.right, rectTab.bottom);
  CRgn rgnClip;
  rgnClip.CreatePolygonRgn(pts, RIBBONTAB_POINTS_NUM, WINDING);
  hDC->SelectClipRgn(&rgnClip);

  const BOOL bIsSelected = IsSelected;
  COLORREF clrFill = bIsSelected ? s->m_clrHighlightGradientDark : RibbonCategoryColorToRGB(pCategory->GetTabColor());
  COLORREF clr1 = globalData.clrBtnFace;
  COLORREF clr2 = (clrFill == 0) ?
      PixelAlpha(clr1, 120) : clrFill;

  if (bIsHighlighted) {
    if (bIsActive) {
      clr2 = s->m_clrHighlightGradientLight;
    }
    else {
      if (clrFill == 0) {
        clr1 = s->m_clrHighlightGradientDark;
        clr2 = s->m_clrHighlightGradientLight;
      }
      else {
        clr1 = clrFill;
        clr2 = PixelAlpha(clr1, 120);
      }
    }
  }

  FillGradient(hDC, rectTab, clr1, clr2, TRUE);
  hDC->SelectClipRgn(NULL);
  hDC->Polyline(pts, RIBBONTAB_POINTS_NUM);

  if (bIsHighlighted && bIsActive && !bIsSelected) {
    //---------------------
    // Draw internal frame:
    //---------------------
    const POINT ptCenter = rectTab CenterPoint(&);

    for (int i = 0; i < RIBBONTAB_POINTS_NUM; i++) {
      if (pts[i].x < ptCenter.x) {
        pts[i].x++;
      }
      else {
        pts[i].x--;
      }

      if (pts[i].y < ptCenter.y) {
        pts[i].y++;
      }
      else {
        pts[i].y--;
      }
    }

    COLORREF penInternal = (s->m_clrHighlightGradientDark);
    _clr = (penInternal);
    hDC->Polyline(pts, RIBBONTAB_POINTS_NUM);

  }


  return globalData.clrBtnText;
}
COLORREF CBCGPVisualManager2003::OnDrawRibbonButtonsGroup(
    HDDC hDC, CBCGPRibbonButtonsGroup* pGroup,
    RECT rect)
{
  ASSERT(hDC);
  ASSERT(pGroup);

  if (DYNAMIC_DOWNCAST(CBCGPRibbonQuickAccessToolbar, pGroup) != NULL ||
      pGroup->GetCount() == 0) {
    return 0;
  }

  CBCGPBaseRibbonElement* pButton = pGroup->GetButton(0);


  if (!pButton->IsShowGroupBorder()) {
    return 0;
  }

  const int dx = 2;
  const int dy = 2;
  COLORREF pen = (s->m_clrToolBarGradientDark);
  COLORREF _clr = (pen);
  COLORREF  pOldBrush = (COLORREF) hDC->SelectStockObject(NULL_BRUSH);
  ASSERT(pOldBrush != NULL);
  DeflateRect(&rect, 1, 1);
  hDC->RoundRect(rect, cPOINT(dx, dy));

  _clr = (pOldBrush);
  return 0;
}
COLORREF CBCGPVisualManager2003::OnDrawRibbonCategoryCaption(
    HDDC hDC,
    CBCGPRibbonContextCaption* pContextCaption)
{
  ASSERT(hDC);
  ASSERT(pContextCaption);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    return CBCGPVisualManagerXP::OnDrawRibbonCategoryCaption(
        hDC, pContextCaption);
  }

  COLORREF clrFill = RibbonCategoryColorToRGB(pContextCaption->GetColor());
  RECT rect = pContextCaption->GetRect();

  if (clrFill != 0) {
    if (bIsDrawOnGlass) {
      DeflateRect(&rect, 0, 1);
    }

    FillGradient(hDC, rect, clrFill, globalData.clrBtnFace, TRUE);
  }

  return globalData.clrBtnText;
}
void CBCGPVisualManager2003::OnDrawRibbonSliderZoomButton(
    HDDC hDC, CBCGPRibbonSlider* pSlider,
    RECT rect, BOOL bIsZoomOut,
    BOOL bIsHighlighted, BOOL bIsPressed, BOOL bIsDisabled)
{
  ASSERT(hDC);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnDrawRibbonSliderZoomButton(
        hDC, pSlider, rect, bIsZoomOut, bIsHighlighted, bIsPressed, bIsDisabled);
    return;
  }

  COLORREF clrLine =
      (bIsPressed || bIsHighlighted) ? globalData.clrBtnDkShadow;
  POINT ptCenter = rect CenterPoint(&);
  RECT rectCircle(cPOINT(ptCenter.x - 7, ptCenter.y - 7), SIZE(15, 15));

  COLORREF clrFill = 0;

  if (bIsPressed || bIsHighlighted) {
    clrFill = bIsPressed ? s->m_clrHighlightDnGradientLight : s->m_clrHighlightDnGradientDark;
  }

  DrawEllipseR(hDC, rectCircle, clrFill, clrLine);
  // Draw +/- sign:
  RECT rectSign(cPOINT(ptCenter.x - 3, ptCenter.y - 3), SIZE(7, 7));

  if (bIsDrawOnGlass) {
    draw_line(hDC, rectSign.left, ptCenter.y, rectSign.right, ptCenter.y, clrLine);

    if (!bIsZoomOut) {
      draw_line(hDC, ptCenter.x, rectSign.top, ptCenter.x, rectSign.bottom, clrLine);
    }
  }
  else {
    COLORREF penLine = (clrLine);
    COLORREF _clr = (penLine);
    TMoveTo(hDC, rectSign.left, ptCenter.y);
    _LineTo(hDC, rectSign.right, ptCenter.y);

    if (!bIsZoomOut) {
      TMoveTo(hDC, ptCenter.x, rectSign.top);
      _LineTo(hDC, ptCenter.x, rectSign.bottom);
    }


  }
}
COLORREF CBCGPVisualManager2003::OnDrawRibbonStatusBarPane(HDDC hDC, CBCGPRibbonStatusBar* pBar,
    CBCGPRibbonStatusBarPane* pPane)
{
  ASSERT(hDC);
  ASSERT(pPane);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      s->m_hThemeStatusBar == NULL) {
    return CBCGPVisualManagerXP::OnDrawRibbonStatusBarPane(
        hDC, pBar, pPane);
  }

  RECT rect = pPane->GetRect();

  if (pPane->IsHighlighted()) {
    RECT rectButton = rect;
    rectButton DeflateRect(&, 1, 1);
    OnFillHighlightedArea(hDC, rectButton,
        pPane->IsPressed() ?
        &s->m_clrHighlightDn : &s->m_clrHighlight, NULL);
    draw_3drect_inR(hDC, &rectButton, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }

  return 0;
}
void CBCGPVisualManager2003::OnDrawRibbonProgressBar(HDDC hDC,
    CBCGPRibbonProgressBar* pProgress,
    RECT rectProgress, RECT rectChunk,
    BOOL bInfiniteMode)
{
  ASSERT(hDC);
#define PP_BAR        1
#define PP_CHUNK      3
  CBCGPVisualManagerXP::OnDrawRibbonProgressBar(hDC, pProgress,
      rectProgress, rectChunk, bInfiniteMode);
}
void CBCGPVisualManager2003::OnDrawRibbonQATSeparator(HDDC hDC,
    CBCGPRibbonSeparator* /*pSeparator*/, RECT rect)
{
  ASSERT(hDC);
  int x = rect CenterPoint(&).x;

  if (bIsDrawOnGlass) {

    draw_line(hDC, x, rect.top, x, rect.bottom - 1, globalData.clrBtnDkShadow);
    draw_line(hDC, x + 1, rect.top + 1, x + 1, rect.bottom, globalData.clrBtnLight);
  }
  else {
    COLORREF _clr = (&s->m_penSeparator);
    TMoveTo(hDC, x, rect.top);
    _LineTo(hDC, x, rect.bottom - 1);
    _clr = (&s->m_penSeparatorLight);
    TMoveTo(hDC, x + 1, rect.top + 1);
    _LineTo(hDC, x + 1, rect.bottom);

  }
}
COLORREF CBCGPVisualManager2003::OnFillRibbonPanelCaption(HDDC hDC,  RECT rectCaption)
{
  ASSERT(hDC);


  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    return CBCGPVisualManagerXP::OnFillRibbonPanelCaption(hDC, pPanel, rectCaption);
  }

  COLORREF br = (!IsHighlighted ?
      s->m_clrBtnGradientDark :
      PixelAlpha(s->m_clrBtnGradientDark, 108));
  draw_fillrectR(hDC, &rectCaption, br);
  return globalData.clrBtnText;
}
BOOL CBCGPVisualManager2003::GetToolTipParams(CBCGPToolTipParams& params,
    UINT /*nType*/ /*= (UINT)(-1)*/)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    return CBCGPVisualManagerXP::GetToolTipParams(params);
  }

  params.s->m_bBoldLabel = TRUE;
  params.s->m_bDrawDescription = TRUE;
  params.s->m_bDrawIcon = TRUE;
  params.s->m_bRoundedCorners = TRUE;
  params.s->m_bDrawSeparator = FALSE;
  params.s->m_clrFill = globalData.clrBtnHilite;
  params.s->m_clrFillGradient = globalData.clrBtnFace;
  params.s->m_clrText = globalData.clrBtnText;
  params.s->m_clrBorder = globalData.clrBtnShadow;
  return TRUE;
}
#define RT_BCG_STYLE_XML _T("STYLE_XML")
const CBCGPVisualManager2007::Style c_StyleDefault =
    CBCGPVisualManager2007::VS2007_LunaBlue;
CBCGPVisualManager2007::Style CBCGPVisualManager2007::s->m_Style = c_StyleDefault;
const char* CBCGPVisualManager2007::s->m_strStylePrefix;
HINSTANCE CBCGPVisualManager2007::s->m_hinstRes = NULL;
BOOL CBCGPVisualManager2007::s->m_bAutoFreeRes = FALSE;
COLORREF CBCGPVisualManager2007::s->m_clrBase = 0;
COLORREF CBCGPVisualManager2007::s->m_clrTarget = 0;
static COLORREF CalculateHourLineColor(COLORREF clrBase, BOOL bWorkingHours, BOOL bHour)
{
  double H, S, V;
  RGBtoHSV(clrBase, &H, &S, &V);

  if (bHour) {
    S = S * 0.77;
    V = MIN(V * 1.03, 1.0);
  }
  else {
    if (bWorkingHours) {
      S = S * 0.2;
      V = MIN(V * 1.14, 1.0);
    }
    else {
      S = S * 0.34;
      V = MIN(V * 1.12, 1.0);
    }
  }

  return HSVtoRGB(H, S, V);
}
static COLORREF CalculateWorkingColor(COLORREF /*clrBase*/)
{
  return _RGB(255, 255, 255);
}
static COLORREF CalculateNonWorkingColor(COLORREF clrBase, BOOL bLight)
{
  if (bLight) {
    return CalculateHourLineColor(clrBase, TRUE, FALSE);
  }

  return CalculateHourLineColor(clrBase, FALSE, TRUE);
}
static COLORREF CalculateSelectionColor(COLORREF clrBase)
{
  double H, S, V;
  RGBtoHSV(clrBase, &H, &S, &V);
  return HSVtoRGB(H, MIN(S * 1.88, 1.0), V * 0.56);
}
static COLORREF CalculateSeparatorColor(COLORREF clrBase)
{
  double H, S, V;
  RGBtoHSV(clrBase, &H, &S, &V);
  return HSVtoRGB(H, MIN(S * 1.6, 1.0), V * 0.85);
}
CBCGPBitmapCache::CBitmapCacheItem::CBitmapCacheItem()
{
  s->m_bMirror = FALSE;
}
void CBCGPBitmapCache::CBitmapCacheItem::Cache(const SIZE& size, CBCGPControlRenderer& renderer)
{
  s->m_Images.Clear();
  const int nCount = renderer.GetImageCount();

  if (nCount > 0) {
    s->m_Images.SetImageSize(size);
    s->m_Images.SetTransparentColor(0);

    for (int i = 0; i < nCount; i++) {
      BITMAPINFO bi;
      memset(&bi, 0, sizeof(BITMAPINFO));
      // Fill in the BITMAPINFOHEADER
      bi.bmiHeader.biSize        = sizeof(BITMAPINFOHEADER);
      bi.bmiHeader.biWidth       = size.cx;
      bi.bmiHeader.biHeight      = size.cy;
      bi.bmiHeader.biPlanes      = 1;
      bi.bmiHeader.biBitCount    = 32;
      bi.bmiHeader.biCompression = BI_RGB;
      bi.bmiHeader.biSizeImage   = size.cy * size.cx * 4;
      LPBYTE pBits = NULL;
      HBITMAP hDib = ::CreateDIBSection(
          NULL, &bi, DIB_RGB_COLORS, (void**)&pBits,
          NULL, NULL);

      if (hDib == NULL || pBits == NULL) {
        ASSERT(FALSE);
        break;
      }

      CDC hDC;
      hDC.CreateCompatibleDC(NULL);
      HBITMAP hOldDib = (HBITMAP)::SelectObject(hDC.GetSafeHdc(), hDib);
      s->m_bMirror = renderer.IsMirror();

      if (s->m_bMirror) {
        renderer.Mirror();
      }

      renderer.Draw(&hDC, RECT(0, 0, size.cx, size.cy), i);

      if (s->m_bMirror) {
        renderer.Mirror();
      }

      ::SelectObject(hDC.GetSafeHdc(), hOldDib);
      AddImage(hDib);
      ::DeleteObject(hDib);
    }
  }
}
void CBCGPBitmapCache::CBitmapCacheItem::Draw(HDDC hDC, RECT rect, int iImageIndex/* = 0*/,
    BYTE alphaSrc/* = 255*/)
{
  s->m_Images.DrawEx(hDC, RECT(rect.TopLeft(), s->m_Images.GetImageSize()),
      iImageIndex, CBCGPToolBarImages::ImageAlignHorzLeft,
      CBCGPToolBarImages::ImageAlignVertTop, RECT(0, 0, 0, 0), alphaSrc);
}
void CBCGPBitmapCache::CBitmapCacheItem::DrawY(HDDC hDC, RECT rect, SIZE sides,
    int iImageIndex/* = 0*/, BYTE alphaSrc/* = 255*/)
{
  RECT rectImage(cPOINT(0, 0), s->m_Images.GetImageSize());
  ASSERT(RCH(&rect) == rectImage RCH(&));

  if (sides.cx > 0) {
    RECT rt(rectImage);

    if (s->m_bMirror) {
      rt.left = rectImage.right - sides.cx;
      rectImage.right = rt.left;
    }
    else {
      rt.right = rt.left + sides.cx;
      rectImage.left = rt.right;
    }

    s->m_Images.DrawEx(hDC, rect, iImageIndex, CBCGPToolBarImages::ImageAlignHorzLeft,
        CBCGPToolBarImages::ImageAlignVertTop, rt, alphaSrc);
  }

  if (sides.cy > 0) {
    RECT rt(rectImage);

    if (s->m_bMirror) {
      rt.right = rectImage.left + sides.cy;
      rectImage.left = rt.right;
    }
    else {
      rt.left = rectImage.right - sides.cy;
      rectImage.right = rt.left;
    }

    s->m_Images.DrawEx(hDC, rect, iImageIndex, CBCGPToolBarImages::ImageAlignHorzRight,
        CBCGPToolBarImages::ImageAlignVertTop, rt, alphaSrc);
  }

  if (rectImage RCW(&) > 0) {
    DeflateRect(&rect, sides.cx, 0, sides.cy, 0);
    s->m_Images.DrawEx(hDC, rect, iImageIndex, CBCGPToolBarImages::ImageAlignHorzStretch,
        CBCGPToolBarImages::ImageAlignVertTop, rectImage, alphaSrc);
  }
}
void CBCGPBitmapCache::Clear()
{
  for (int i = 0; i < s->m_Cache.GetSize(); i++) {
    if (s->m_Cache[i] != NULL) {
      delete s->m_Cache[i];
    }
  }

  s->m_Cache.RemoveAll();
  s->m_Sizes.RemoveAll();
}
int CBCGPBitmapCache::Cache(const SIZE& size, CBCGPControlRenderer& renderer)
{
  if (FindIndex(size) != -1) {
    ASSERT(FALSE);
    return -1;
  }

  CBitmapCacheItem* pItem = new CBitmapCacheItem;
  pItem->Cache(size, renderer);
  int nCache = (int) s->m_Cache.Add(pItem);
  int nSize  = (int) s->m_Sizes.Add(size);
  ASSERT(nCache == nSize);
  return nCache;
}
int CBCGPBitmapCache::CacheY(int height, CBCGPControlRenderer& renderer)
{
  SIZE size(renderer.GetParams().s->m_rectImage RCW(&), height);
  return Cache(size, renderer);
}
BOOL CBCGPBitmapCache::IsCached(const SIZE& size)
{
  return FindIndex(size) != -1;
}
int CBCGPBitmapCache::FindIndex(const SIZE& size)
{
  int nRes = -1;

  for (int i = 0; i < s->m_Sizes.GetSize(); i++) {
    if (size == s->m_Sizes[i]) {
      nRes = i;
      break;
    }
  }

  return nRes;
}
CBCGPBitmapCache::CBitmapCacheItem* CBCGPBitmapCache::Get(const SIZE& size)
{
  int nIndex = FindIndex(size);

  if (nIndex != -1) {
    return s->m_Cache[nIndex];
  }

  return NULL;
}
CBCGPBitmapCache::CBitmapCacheItem* CBCGPBitmapCache::Get(int nIndex)
{
  if (0 <= nIndex && nIndex < s->m_Cache.GetSize()) {
    return s->m_Cache[nIndex];
  }

  return NULL;
}
IMPLEMENT_DYNCREATE(CBCGPVisualManager2007, CBCGPVisualManager2003)
//
// Construction/Destruction
//
CBCGPVisualManager2007::CBCGPVisualManager2007()
  : s->m_bNcTextCenter(FALSE)
  , s->m_bLoaded(FALSE)
  , s->m_bPlannerBlack(FALSE)
{
  s->m_szNcBtnSize[0]    = SIZE(0, 0);
  s->m_szNcBtnSize[1]    = SIZE(0, 0);
  s->m_ptRibbonMainImageOffset = cPOINT(0, -1);
}
CBCGPVisualManager2007::~CBCGPVisualManager2007()
{
  CBCGPMenuImages::SetColor(ImageBlack, 0);
}
const char* CBCGPVisualManager2007::MakeResourceID(LPCTSTR lpszID)
{
  const char* strResID(lpszID);
  ASSERT(!strResID.IsEmpty());

  if (!s->m_strStylePrefix.IsEmpty()) {
    strResID = s->m_strStylePrefix + strResID;
  }

  return strResID;
}
const char* CBCGPVisualManager2007::GetStyleResourceID(Style style)
{
  const char* strResID(_T("IDX_OFFICE2007_STYLE"));
  const char* strStylePrefix;

  switch (style) {
  case VS2007_LunaBlue:
    strStylePrefix = _T("BLUE_");
    break;

  case VS2007_ObsidianBlack:
    strStylePrefix = _T("BLACK_");
    break;

  case VS2007_Aqua:
    strStylePrefix = _T("AQUA_");
    break;

  case VS2007_Silver:
    strStylePrefix = _T("SILVER_");
    break;

  default:
    ASSERT(FALSE);
  }

  strResID = strStylePrefix + strResID;
  return strResID;
};
BOOL CBCGPVisualManager2007::SetStyle(Style style, LPCTSTR lpszPath)
{
  if (s->m_Style == style && s->m_hinstRes > (HINSTANCE) 32) {
    return TRUE;
  }

  const char* strTheme;

  switch (style) {
  case VS2007_LunaBlue:
    strTheme = _T("Luna");
    break;

  case VS2007_ObsidianBlack:
    strTheme = _T("Obsidian");
    break;

  case VS2007_Aqua:
    strTheme = _T("Aqua");
    break;

  case VS2007_Silver:
    strTheme = _T("Silver");
    break;

  default:
    ASSERT(FALSE);
    return FALSE;
  }

  const char* strVer;
  strVer.Format(_T("%d%d"), _BCGCBPRO_VERSION_MAJOR, _BCGCBPRO_VERSION_MINOR);
  const char* strStyleDLLName = _T("BCGPStyle2007") + strTheme + strVer + _T(".dll");
  const char* strStyleDLLPath;

  if (lpszPath != NULL && _tcslen(lpszPath) > 0) {
    strStyleDLLPath = lpszPath;

    if (strStyleDLLPath[strStyleDLLPath.GetLength() - 1] != _T('\\')) {
      strStyleDLLPath += _T('\\');
    }

    strStyleDLLPath += strStyleDLLName;
  }
  else {
    strStyleDLLPath = strStyleDLLName;
  }

  Style oldStyle = s->m_Style;
  CleanStyle();
  HINSTANCE hinstRes = LoadLibrary(strStyleDLLPath);

  if (hinstRes <= (HINSTANCE) 32) {
    s->m_Style = oldStyle;
    TRACE(_T("Cannot load Style DLL: %s\r\n"), strStyleDLLPath);
    ASSERT(FALSE);
    return FALSE;
  }

  s->m_Style = style;
  SetResourceHandle(hinstRes);
  s->m_bAutoFreeRes = TRUE;
  return TRUE;
}
CBCGPVisualManager2007::Style CBCGPVisualManager2007::GetStyle()
{
  return s->m_Style;
}
void CBCGPVisualManager2007::SetResourceHandle(HINSTANCE hinstRes)
{
  s->m_bAutoFreeRes = FALSE;

  if (s->m_hinstRes != hinstRes) {
    s->m_hinstRes = hinstRes;

    if (CBCGPVisualManager::GetInstance()->IsKindOf(
        RUNTIME_CLASS(CBCGPVisualManager2007))) {
      CBCGPVisualManager::GetInstance()->OnUpdateSystemColors();
    }
  }
}
void CBCGPVisualManager2007::CleanStyle()
{
  if (s->m_bAutoFreeRes && s->m_hinstRes > (HINSTANCE) 32) {
    ::FreeLibrary(s->m_hinstRes);
  }

  s->m_hinstRes = NULL;
  s->m_Style = c_StyleDefault;
  s->m_strStylePrefix.Empty();
}
void CBCGPVisualManager2007::SetCustomColor(COLORREF clrTarget)
{
  if (clrTarget == 0) {
    s->m_clrBase = 0;
  }
  else {
    switch (s->m_Style) {
    case VS2007_LunaBlue:
      s->m_clrBase = _RGB(206, 221, 238);   // Only 'LunaBlue' style is supported
      break;

    default:
      ASSERT(FALSE);
      clrTarget = s->m_clrBase = 0;
    }
  }

  if (s->m_clrTarget == clrTarget) {
    return;
  }

  s->m_clrTarget = clrTarget;

  if (CBCGPVisualManager::GetInstance()->IsKindOf(
      RUNTIME_CLASS(CBCGPVisualManager2007))) {
    CBCGPVisualManager::GetInstance()->OnUpdateSystemColors();
    CBCGPMenuImages::CleanUp();
  }
}
void CBCGPVisualManager2007::CleanUp()
{
  s->m_clrEditBorder                = 0;
  s->m_clrEditBorderDisabled        = 0;
  s->m_clrEditBorderHighlighted     = 0;
  s->m_clrEditSelection             = 0;
  s->m_clrComboBorder               = 0;
  s->m_clrComboBorderDisabled       = 0;
  s->m_clrComboBorderPressed        = 0;
  s->m_clrComboBorderHighlighted    = 0;
  s->m_clrComboBtnStart             = 0;
  s->m_clrComboBtnFinish            = 0;
  s->m_clrComboBtnBorder            = 0;
  s->m_clrComboBtnDisabledStart     = 0;
  s->m_clrComboBtnDisabledFinish    = 0;
  s->m_clrComboBtnBorderDisabled    = 0;
  s->m_clrComboBtnPressedStart      = 0;
  s->m_clrComboBtnPressedFinish     = 0;
  s->m_clrComboBtnBorderPressed     = 0;
  s->m_clrComboBtnHighlightedStart  = 0;
  s->m_clrComboBtnHighlightedFinish = 0;
  s->m_clrComboBtnBorderHighlighted = 0;
  s->m_clrComboSelection            = 0;
  s->m_ctrlComboBoxBtn.CleanUp();
  s->m_ToolBarGripper.Clear();
  s->m_ToolBarTear.Clear();
  s->m_ctrlToolBarBorder.CleanUp();
  s->m_ctrlStatusBarBack.CleanUp();
  s->m_ctrlStatusBarBack_Ext.CleanUp();
  s->m_StatusBarPaneBorder.Clear();
  s->m_StatusBarSizeBox.Clear();
  s->m_SysBtnBack[0].CleanUp();
  s->m_SysBtnBack[1].CleanUp();
  s->m_SysBtnClose[0].Clear();
  s->m_SysBtnClose[1].Clear();
  s->m_SysBtnRestore[0].Clear();
  s->m_SysBtnRestore[1].Clear();
  s->m_SysBtnMaximize[0].Clear();
  s->m_SysBtnMaximize[1].Clear();
  s->m_SysBtnMinimize[0].Clear();
  s->m_SysBtnMinimize[1].Clear();
  s->m_SysBtnHelp[0].Clear();
  s->m_SysBtnHelp[1].Clear();
  s->m_clrMainClientArea.DeleteObject();
  s->m_AppCaptionFont.DeleteObject();
  s->m_penSeparator2.DeleteObject();
  s->m_clrGroupBackground.DeleteObject();
  s->m_clrGroupText = 0;
  s->m_penSeparatorDark.DeleteObject();
  s->m_ctrlMainBorder.CleanUp();
  s->m_ctrlMDIChildBorder.CleanUp();
  s->m_ctrlDialogBorder.CleanUp();
  s->m_ctrlMainBorderCaption.CleanUp();
  s->m_ctrlPopupBorder.CleanUp();
  s->m_ctrlPopupResizeBar.CleanUp();
  s->m_PopupResizeBar_HV.Clear();
  s->m_PopupResizeBar_HVT.Clear();
  s->m_PopupResizeBar_V.Clear();
  s->m_ctrlMenuBarBtn.CleanUp();
  s->m_ctrlMenuItemBack.CleanUp();
  s->m_MenuItemMarkerC.Clear();
  s->m_MenuItemMarkerR.Clear();
  s->m_ctrlMenuItemShowAll.CleanUp();
  s->m_ctrlMenuHighlighted[0].CleanUp();
  s->m_ctrlMenuHighlighted[1].CleanUp();
  s->m_ctrlMenuButtonBorder.CleanUp();
  s->m_ctrlMenuScrollBtn[0].CleanUp();
  s->m_ctrlMenuScrollBtn[1].CleanUp();
  s->m_ctrlToolBarBtn.CleanUp();
  int i, j;

  for (i = 0; i < 2; i++) {
    for (j = 0; j < 2; j++) {
      s->m_ctrlScrollBar_Back[i][j].CleanUp();
      s->m_ctrlScrollBar_Item[i][j].CleanUp();
      s->m_ctrlScrollBar_ThumbBack[i][j].CleanUp();
      s->m_ctrlScrollBar_ThumbIcon[i][j].CleanUp();
    }
  }

  s->m_ctrlSliderThumb[0].CleanUp();
  s->m_ctrlSliderThumb[1].CleanUp();
  s->m_ctrlSliderThumb[2].CleanUp();
  s->m_ctrlSliderThumb[3].CleanUp();
  s->m_ctrlSliderThumb[4].CleanUp();
  s->m_ctrlSliderThumb[5].CleanUp();
  s->m_ctrlTab3D[0].CleanUp();
  s->m_ctrlTab3D[1].CleanUp();
  s->m_ctrlTabFlat[0].CleanUp();
  s->m_ctrlTabFlat[1].CleanUp();
  s->m_clrTabTextActive = CLR_DEFAULT;
  s->m_clrTabTextInactive = CLR_DEFAULT;
  s->m_clrTab3DFace = CLR_DEFAULT;
  s->m_clrTab3DBlack = CLR_DEFAULT;
  s->m_clrTab3DDark = CLR_DEFAULT;
  s->m_clrTab3DDarkShadow = CLR_DEFAULT;
  s->m_clrTab3DLight = CLR_DEFAULT;
  s->m_clrTab3DHighlight = CLR_DEFAULT;
  s->m_clrTabFlatFace = CLR_DEFAULT;
  s->m_clrTabFlatBlack = CLR_DEFAULT;
  s->m_clrTabFlatDark = CLR_DEFAULT;
  s->m_clrTabFlatDarkShadow = CLR_DEFAULT;
  s->m_clrTabFlatLight = CLR_DEFAULT;
  s->m_clrTabFlatHighlight = CLR_DEFAULT;
  s->m_penTabFlatInner[0].DeleteObject();
  s->m_penTabFlatInner[1].DeleteObject();
  s->m_penTabFlatOuter[0].DeleteObject();
  s->m_penTabFlatOuter[1].DeleteObject();
  s->m_ctrlOutlookWndBar.CleanUp();
  s->m_ctrlOutlookWndPageBtn.CleanUp();
  s->m_ctrlRibbonCaptionQA.CleanUp();
  s->m_ctrlRibbonCaptionQA_Glass.CleanUp();
  s->m_ctrlRibbonCategoryBack.CleanUp();
  s->m_ctrlRibbonCategoryTab.CleanUp();
  s->m_ctrlRibbonCategoryTabSep.CleanUp();
  s->m_ctrlRibbonCategoryBtnPage[0].CleanUp();
  s->m_ctrlRibbonCategoryBtnPage[1].CleanUp();
  s->m_ctrlRibbonPanelBack_T.CleanUp();
  s->m_ctrlRibbonPanelBack_B.CleanUp();
  s->m_RibbonPanelSeparator.Clear();
  s->m_ctrlRibbonPanelQAT.CleanUp();
  s->m_ctrlRibbonMainPanel.CleanUp();
  s->m_ctrlRibbonMainPanelBorder.CleanUp();
  s->m_ctrlRibbonBtnMainPanel.CleanUp();
  s->m_ctrlRibbonBtnGroup_S.CleanUp();
  s->m_ctrlRibbonBtnGroup_F.CleanUp();
  s->m_ctrlRibbonBtnGroup_M.CleanUp();
  s->m_ctrlRibbonBtnGroup_L.CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_F[0].CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_F[1].CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_M[0].CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_M[1].CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_L[0].CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_L[1].CleanUp();
  s->m_ctrlRibbonBtn[0].CleanUp();
  s->m_ctrlRibbonBtn[1].CleanUp();
  s->m_ctrlRibbonBtnMenuH[0].CleanUp();
  s->m_ctrlRibbonBtnMenuH[1].CleanUp();
  s->m_ctrlRibbonBtnMenuV[0].CleanUp();
  s->m_ctrlRibbonBtnMenuV[1].CleanUp();
  s->m_ctrlRibbonBtnLaunch.CleanUp();
  s->m_RibbonBtnLaunchIcon.Clear();
  s->m_RibbonBtnMain.CleanUp();
  s->m_ctrlRibbonBtnDefault.CleanUp();
  s->m_ctrlRibbonBtnDefaultIcon.CleanUp();
  s->m_RibbonBtnDefaultImage.Clear();
  s->m_ctrlRibbonBtnDefaultQATIcon.CleanUp();
  s->m_ctrlRibbonBtnDefaultQAT.CleanUp();
  s->m_ctrlRibbonBtnCheck.CleanUp();
  s->m_ctrlRibbonBtnRadio.CleanUp();
  s->m_ctrlRibbonBtnPush.CleanUp();
  s->m_ctrlRibbonBtnGroup.CleanUp();
  s->m_ctrlRibbonBtnPalette[0].CleanUp();
  s->m_ctrlRibbonBtnPalette[1].CleanUp();
  s->m_ctrlRibbonBtnPalette[2].CleanUp();
  s->m_ctrlRibbonBtnStatusPane.CleanUp();
  s->m_ctrlRibbonSliderThumb.CleanUp();
  s->m_ctrlRibbonSliderThumbA[0].CleanUp();
  s->m_ctrlRibbonSliderThumbA[1].CleanUp();
  s->m_ctrlRibbonSliderThumbA[2].CleanUp();
  s->m_ctrlRibbonSliderThumbA[3].CleanUp();
  s->m_ctrlRibbonSliderThumbA[4].CleanUp();
  s->m_ctrlRibbonSliderBtnPlus.CleanUp();
  s->m_ctrlRibbonSliderBtnMinus.CleanUp();
  s->m_ctrlRibbonProgressBack.CleanUp();
  s->m_ctrlRibbonProgressNormal.CleanUp();
  s->m_ctrlRibbonProgressNormalExt.CleanUp();
  s->m_ctrlRibbonProgressInfinity.CleanUp();
  s->m_ctrlRibbonBorder_QAT.CleanUp();
  s->m_ctrlRibbonBorder_Floaty.CleanUp();
  s->m_ctrlRibbonKeyTip.CleanUp();
  s->m_clrRibbonKeyTipTextNormal   = 0;
  s->m_clrRibbonKeyTipTextDisabled = 0;
  s->m_ctrlRibbonComboBoxBtn.CleanUp();
  s->m_cacheRibbonCategoryBack.Clear();
  s->m_cacheRibbonPanelBack_T.Clear();
  s->m_cacheRibbonPanelBack_B.Clear();
  s->m_cacheRibbonBtnDefault.Clear();
  s->m_cacheRibbonBtnGroup_S.Clear();
  s->m_cacheRibbonBtnGroup_F.Clear();
  s->m_cacheRibbonBtnGroup_M.Clear();
  s->m_cacheRibbonBtnGroup_L.Clear();
  s->m_cacheRibbonBtnGroupMenu_F[0].Clear();
  s->m_cacheRibbonBtnGroupMenu_M[0].Clear();
  s->m_cacheRibbonBtnGroupMenu_L[0].Clear();
  s->m_cacheRibbonBtnGroupMenu_F[1].Clear();
  s->m_cacheRibbonBtnGroupMenu_M[1].Clear();
  s->m_cacheRibbonBtnGroupMenu_L[1].Clear();
  s->m_ctrlRibbonContextPanelBack_T.CleanUp();
  s->m_ctrlRibbonContextPanelBack_B.CleanUp();
  s->m_cacheRibbonContextPanelBack_T.Clear();
  s->m_cacheRibbonContextPanelBack_B.Clear();
  s->m_ctrlRibbonContextSeparator.CleanUp();

  for (i = 0; i < BCGPRibbonCategoryColorCount; i++) {
    s->m_ctrlRibbonContextCategory[i].CleanUp();
  }

  s->m_clrPlannerTodayCaption[0] = _RGB(247, 208, 112);
  s->m_clrPlannerTodayCaption[1] = _RGB(251, 230, 148);
  s->m_clrPlannerTodayCaption[2] = _RGB(239, 155,  30);
  s->m_clrPlannerTodayCaption[3] = _RGB(250, 224, 139);
  s->m_clrPlannerTodayBorder     = _RGB(238, 147,  17);
  s->m_clrPlannerNcArea          = globalData.clrBtnFace;
  s->m_clrPlannerNcLine          = globalData.clrBtnShadow;
  s->m_clrPlannerNcText          = globalData.clrBtnText;
  s->m_clrCaptionBarText         = globalData.clrWindow;
  s->m_penGridSeparator.DeleteObject();
  s->m_penGridSeparator.CreatePen = (globalData.clrBtnShadow);
  s->m_clrGridLeftOffset = globalData.clrBtnFace;
  s->m_bToolTipParams = FALSE;
  CBCGPToolTipParams dummy;
  s->m_ToolTipParams = dummy;
  s->m_ActivateFlag.RemoveAll();
  s->m_bPlannerBlack = FALSE;
  s->m_clrRibbonHyperlinkInactive = 0;
  s->m_clrRibbonHyperlinkActive = 0;
  s->m_clrRibbonStatusbarHyperlinkInactive = 0;
  s->m_clrRibbonStatusbarHyperlinkActive = 0;
  s->m_clrDlgBackground = 0;
  s->m_clrDlgBackground.DeleteObject();
  CBCGPGridColors gridcolors;
  s->m_GridColors = gridcolors;
  s->m_bLoaded = FALSE;
}
void CBCGPVisualManager2007::OnUpdateSystemColors()
{
  CleanUp();
  CBCGPVisualManager2003::OnUpdateSystemColors();

  if (globalData.bIsWindows9x) {
    return;
  }

  if (!globalData.bIsOSAlphaBlendingSupport ||
      globalData.IsHighContastMode() ||
      globalData.m_nBitsPerPixel <= 8) {
    return;
  }

  s->m_nMenuBorderSize = 1;
  HINSTANCE hinstResOld = NULL;

  if (s->m_hinstRes == NULL) {
    SetStyle(c_StyleDefault);
  }

  if (s->m_hinstRes != NULL) {
    hinstResOld = AfxGetResourceHandle();
    AfxSetResourceHandle(s->m_hinstRes);
  }

  CBCGPTagManager tm;
  CBCGPTagManager::SetBaseColor(s->m_clrBase, s->m_clrTarget);

  if (!tm.LoadFromResource(GetStyleResourceID(s->m_Style), RT_BCG_STYLE_XML)) {
    if (hinstResOld != NULL) {
      AfxSetResourceHandle(hinstResOld);
    }

    CBCGPTagManager::SetBaseColor(0, 0);
    return;
  }

  {
    const char* strStyle;
    tm.ExcludeTag(_T("STYLE"), strStyle);
    tm.SetBuffer(strStyle);
  }

  const char* strItem;
  s->m_nType = 20;

  if (!tm.IsEmpty()) {
    int nVersion = 0;

    if (tm.ExcludeTag(_T("VERSION"), strItem)) {
      CBCGPTagManager tmItem(strItem);
      tmItem.ReadInt(_T("NUMBER"), nVersion);

      if (nVersion == 2007) {
        tmItem.ReadInt(_T("TYPE"), s->m_nType);

        if (s->m_nType < 10) {
          s->m_nType *= 10;
        }

        s->m_bLoaded = TRUE;
      }

      if (s->m_bLoaded) {
        if (tmItem.ExcludeTag(_T("ID_PREFIX"), strItem)) {
          strItem.TrimLeft();
          strItem.TrimRight();
          s->m_strStylePrefix = strItem;
        }
      }
    }
  }

  if (!s->m_bLoaded) {
    if (hinstResOld != NULL) {
      ::AfxSetResourceHandle(hinstResOld);
    }

    CBCGPTagManager::SetBaseColor(0, 0);
    return;
  }

  // globals
  if (tm.ExcludeTag(_T("GLOBALS"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadColor(_T("BarText"), globalData.clrBtnText);

    if (tmItem.ReadColor(_T("BarFace"), globalData.clrBtnFace)) {
      globalData.clrBtnFace.DeleteObject();
      globalData.clrBtnFace.CreateSolidBrush(globalData.clrBtnFace);
      s->m_clrMenuShadowBase = globalData.clrBtnFace;
    }

    if (tmItem.ReadColor(_T("ActiveCaption"), globalData.clrActiveCaption)) {
      globalData.clrInactiveCaption     = globalData.clrActiveCaption;
      globalData.clrActiveCaption.DeleteObject();
      globalData.clrActiveCaption.CreateSolidBrush(globalData.clrActiveCaption);
    }

    if (tmItem.ReadColor(_T("CaptionText"), globalData.clrCaptionText)) {
      globalData.clrInactiveCaptionText = globalData.clrCaptionText;
    }

    tmItem.ReadColor(_T("InactiveCaption"), globalData.clrInactiveCaption);
    globalData.clrInactiveCaption.DeleteObject();
    globalData.clrInactiveCaption.CreateSolidBrush(globalData.clrInactiveCaption);
    tmItem.ReadColor(_T("InactiveCaptionText"), globalData.clrInactiveCaptionText);
    tmItem.ReadColor(_T("BarShadow"), globalData.clrBtnShadow);
    tmItem.ReadColor(_T("BarDkShadow"), globalData.clrBtnDkShadow);
    tmItem.ReadColor(_T("BarLight"), globalData.clrBtnLight);
    COLORREF clrFloatToolBarBorder;
    tmItem.ReadColor(_T("FloatToolBarBorder"), clrFloatToolBarBorder);
    s->m_clrFloatToolBarBorder.DeleteObject();
    s->m_clrFloatToolBarBorder.CreateSolidBrush(clrFloatToolBarBorder);
    tmItem.ReadColor(_T("HighlightGradientDark"), s->m_clrHighlightGradientDark);
    tmItem.ReadColor(_T("HighlightGradientLight"), s->m_clrHighlightGradientLight);
    s->m_clrHighlightDnGradientDark = s->m_clrHighlightGradientLight;
    s->m_clrHighlightDnGradientLight = s->m_clrHighlightGradientDark;
    tmItem.ReadColor(_T("HighlightDnGradientDark"), s->m_clrHighlightDnGradientDark);
    tmItem.ReadColor(_T("HighlightDnGradientLight"), s->m_clrHighlightDnGradientLight);
    s->m_clrHighlightCheckedGradientDark = s->m_clrHighlightDnGradientLight;
    s->m_clrHighlightCheckedGradientLight = s->m_clrHighlightDnGradientDark;
    tmItem.ReadColor(_T("HighlightCheckedGradientDark"), s->m_clrHighlightCheckedGradientDark);
    tmItem.ReadColor(_T("HighlightCheckedGradientLight"), s->m_clrHighlightCheckedGradientLight);
    tmItem.ReadColor(_T("PressedButtonBorder"), s->m_clrPressedButtonBorder);
    COLORREF clrHB = globalData.clrHilite;
    COLORREF clrHT = globalData.clrTextHilite;

    if (tmItem.ReadColor(_T("Highlight"), clrHB) &&
        tmItem.ReadColor(_T("HighlightText"), clrHT)) {
      globalData.clrHilite = clrHB;
      globalData.clrHilite.DeleteObject();
      globalData.clrHilite.CreateSolidBrush(clrHB);
      globalData.clrTextHilite = clrHT;
    }

    tmItem.ReadColor(_T("MenuShadowColor"), s->m_clrMenuShadowBase);
    // dialog background
    s->m_clrDlgBackground = globalData.clrBtnLight;
    tmItem.ReadColor(_T("DlgBackColor"), s->m_clrDlgBackground);
    s->m_clrDlgBackground.DeleteObject();
    s->m_clrDlgBackground.CreateSolidBrush(s->m_clrDlgBackground);
    // ToolTipParams
    s->m_bToolTipParams = tmItem.ReadToolTipParams(_T("TOOLTIP"), s->m_ToolTipParams);
  }

  // mainwnd
  if (tm.ExcludeTag(_T("MAINWND"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    // caption
    const char* strCaption;

    if (tmItem.ExcludeTag(_T("CAPTION"), strCaption)) {
      CBCGPTagManager tmCaption(strCaption);
      NONCLIENTMETRICS ncm;

      if (globalData.GetNonClientMetrics(ncm)) {
        tmCaption.ReadFont(_T("FONT"), ncm.lfCaptionFont);
        s->m_AppCaptionFont.DeleteObject();
        s->m_AppCaptionFont.CreateFontIndirect(&ncm.lfCaptionFont);
      }

      tmCaption.ReadColor(_T("ActiveStart"), s->m_clrAppCaptionActiveStart);
      tmCaption.ReadColor(_T("ActiveFinish"), s->m_clrAppCaptionActiveFinish);
      tmCaption.ReadColor(_T("InactiveStart"), s->m_clrAppCaptionInactiveStart);
      tmCaption.ReadColor(_T("InactiveFinish"), s->m_clrAppCaptionInactiveFinish);
      tmCaption.ReadColor(_T("ActiveText"), s->m_clrAppCaptionActiveText);
      tmCaption.ReadColor(_T("InactiveText"), s->m_clrAppCaptionInactiveText);
      tmCaption.ReadColor(_T("ActiveTitleText"), s->m_clrAppCaptionActiveTitleText);
      tmCaption.ReadColor(_T("InactiveTitleText"), s->m_clrAppCaptionInactiveTitleText);
      tmCaption.ReadBool(_T("TextCenter"), s->m_bNcTextCenter);
      tmCaption.ReadControlRenderer(_T("BORDER"), s->m_ctrlMainBorderCaption, MakeResourceID(_T("IDB_OFFICE2007_MAINBORDER_CAPTION")));
      s->m_szNcBtnSize[0] = SIZE(GetSystemMetrics(Ss->m_CXSIZE),
          GetSystemMetrics(Ss->m_CYSIZE));
      s->m_szNcBtnSize[1] = SIZE(GetSystemMetrics(Ss->m_CXSMSIZE),
          GetSystemMetrics(Ss->m_CYSMSIZE));
      // buttons
      const char* strButtons;

      if (tmCaption.ExcludeTag(_T("BUTTONS"), strButtons)) {
        CBCGPTagManager tmButtons(strButtons);

        for (int i = 0; i < 2; i++) {
          const char* str;
          const char* suffix;

          if (i == 1) {
            suffix = _T("_S");
          }

          if (tmButtons.ExcludeTag(i == 0 ? _T("NORMAL") : _T("SMALL"), str)) {
            CBCGPTagManager tmBtn(str);
            tmBtn.ReadSize(_T("ConstSize"), s->m_szNcBtnSize[i]);
            SIZE sizeIcon(0, 0);

            if (tmBtn.ReadSize(_T("IconSize"), sizeIcon)) {
              s->m_SysBtnClose[i].Clear();
              s->m_SysBtnClose[i].SetPreMultiplyAutoCheck(TRUE);
              s->m_SysBtnClose[i].SetImageSize(sizeIcon);
              s->m_SysBtnClose[i].LoadStr(MakeResourceID(_T("IDB_OFFICE2007_SYS_BTN_CLOSE") + suffix));
              s->m_SysBtnRestore[i].Clear();
              s->m_SysBtnRestore[i].SetPreMultiplyAutoCheck(TRUE);
              s->m_SysBtnRestore[i].SetImageSize(sizeIcon);
              s->m_SysBtnRestore[i].LoadStr(MakeResourceID(_T("IDB_OFFICE2007_SYS_BTN_RESTORE") + suffix));
              s->m_SysBtnMaximize[i].Clear();
              s->m_SysBtnMaximize[i].SetPreMultiplyAutoCheck(TRUE);
              s->m_SysBtnMaximize[i].SetImageSize(sizeIcon);
              s->m_SysBtnMaximize[i].LoadStr(MakeResourceID(_T("IDB_OFFICE2007_SYS_BTN_MAXIMIZE") + suffix));
              s->m_SysBtnMinimize[i].Clear();
              s->m_SysBtnMinimize[i].SetPreMultiplyAutoCheck(TRUE);
              s->m_SysBtnMinimize[i].SetImageSize(sizeIcon);
              s->m_SysBtnMinimize[i].LoadStr(MakeResourceID(_T("IDB_OFFICE2007_SYS_BTN_MINIMIZE") + suffix));
              s->m_SysBtnHelp[i].Clear();
              s->m_SysBtnHelp[i].SetPreMultiplyAutoCheck(TRUE);
              s->m_SysBtnHelp[i].SetImageSize(sizeIcon);
              s->m_SysBtnHelp[i].LoadStr(MakeResourceID(_T("IDB_OFFICE2007_SYS_BTN_HELP") + suffix));
            }

            CBCGPTagManager::ParseControlRenderer(tmBtn.GetBuffer(),
                s->m_SysBtnBack[i], MakeResourceID(_T("IDB_OFFICE2007_SYS_BTN_BACK")));
          }
        }
      }
    }

    // border
    tmItem.ReadControlRenderer(_T("BORDER"), s->m_ctrlMainBorder, MakeResourceID(_T("IDB_OFFICE2007_MAINBORDER")));
    tmItem.ReadControlRenderer(_T("BORDER_MDICHILD"), s->m_ctrlMDIChildBorder, MakeResourceID(_T("IDB_OFFICE2007_MDICHILDBORDER")));
    tmItem.ReadControlRenderer(_T("BORDER_DIALOG"), s->m_ctrlDialogBorder, MakeResourceID(_T("IDB_OFFICE2007_DIALOGBORDER")));

    if (tmItem.ReadColor(_T("MainClientArea"), s->m_clrMainClientArea)) {
      s->m_clrMainClientArea.DeleteObject();
      s->m_clrMainClientArea.CreateSolidBrush(s->m_clrMainClientArea);
    }
  }

  // menu
  if (tm.ExcludeTag(_T("MENU"), strItem)) {
    CBCGPTagManager tmItem(strItem);

    if (tmItem.ReadColor(_T("Light"), s->m_clrMenuLight)) {
      s->m_clrMenuLight.DeleteObject();
      s->m_clrMenuLight.CreateSolidBrush(s->m_clrMenuLight);
    }

    s->m_clrMenuRarelyUsed = CLR_DEFAULT;
    tmItem.ReadColor(_T("Rarely"), s->m_clrMenuRarelyUsed);
    tmItem.ReadColor(_T("Border"), s->m_clrMenuBorder);

    if (tmItem.ReadColor(_T("Separator1"), s->m_clrSeparator1)) {
      s->m_penSeparator.DeleteObject();
      s->m_penSeparator.CreatePen = (s->m_clrSeparator1);
    }

    if (tmItem.ReadColor(_T("Separator2"), s->m_clrSeparator2)) {
      s->m_penSeparator2.DeleteObject();
      s->m_penSeparator2.CreatePen = (s->m_clrSeparator2);
    }

    COLORREF clrGroupBack = 0;

    if (tmItem.ReadColor(_T("GroupBackground"), clrGroupBack)) {
      s->m_clrGroupBackground.DeleteObject();
      s->m_clrGroupBackground.CreateSolidBrush(clrGroupBack);
    }

    tmItem.ReadColor(_T("GroupText"), s->m_clrGroupText);

    if (tmItem.ReadColor(_T("ItemBorder"), s->m_clrMenuItemBorder)) {
      s->m_penMenuItemBorder.DeleteObject();
      s->m_penMenuItemBorder.CreatePen = (s->m_clrMenuItemBorder);
    }

    tmItem.ReadInt(_T("BorderSize"), s->m_nMenuBorderSize);
    tmItem.ReadControlRenderer(_T("ItemBack"), s->m_ctrlMenuItemBack, MakeResourceID(_T("IDB_OFFICE2007_MENU_ITEs->m_BACK")));
    tmItem.ReadToolBarImages(_T("ItemCheck"), s->m_MenuItemMarkerC, MakeResourceID(_T("IDB_OFFICE2007_MENU_ITEs->m_MARKER_C")));
    tmItem.ReadToolBarImages(_T("ItemRadio"), s->m_MenuItemMarkerR, MakeResourceID(_T("IDB_OFFICE2007_MENU_ITEs->m_MARKER_R")));
    tmItem.ReadControlRenderer(_T("ItemShowAll"), s->m_ctrlMenuItemShowAll, MakeResourceID(_T("IDB_OFFICE2007_MENU_ITEs->m_SHOWALL")));
    tmItem.ReadControlRenderer(_T("Highlighted"), s->m_ctrlMenuHighlighted[0], MakeResourceID(_T("IDB_OFFICE2007_MENU_BTN")));
    tmItem.ReadControlRenderer(_T("HighlightedDisabled"), s->m_ctrlMenuHighlighted[1], MakeResourceID(_T("IDB_OFFICE2007_MENU_BTN_DISABLED")));
    tmItem.ReadControlRenderer(_T("ButtonBorder"), s->m_ctrlMenuButtonBorder, MakeResourceID(_T("IDB_OFFICE2007_MENU_BTN_VERT_SEPARATOR")));
    tmItem.ReadControlRenderer(_T("ScrollBtn_T"), s->m_ctrlMenuScrollBtn[0], MakeResourceID(_T("IDB_OFFICE2007_MENU_BTN_SCROLL_T")));
    tmItem.ReadControlRenderer(_T("ScrollBtn_B"), s->m_ctrlMenuScrollBtn[1], MakeResourceID(_T("IDB_OFFICE2007_MENU_BTN_SCROLL_B")));
    tmItem.ReadColor(_T("TextNormal"), s->m_clrMenuText);
    tmItem.ReadColor(_T("TextHighlighted"), s->m_clrMenuTextHighlighted);
    tmItem.ReadColor(_T("TextDisabled"), s->m_clrMenuTextDisabled);
    COLORREF clrImages = s->m_clrMenuText;
    const char* strColors;

    if (tmItem.ExcludeTag(_T("COLORS"), strColors)) {
      CBCGPTagManager tmColors(strColors);
      tmColors.ReadColor(_T("Black"), clrImages);
      CBCGPMenuImages::SetColor(ImageBlack, clrImages);
      tmColors.ReadColor(_T("Black2"), clrImages);
      CBCGPMenuImages::SetColor(ImageBlack2, clrImages);
      struct XColors {
        int state;
        LPCTSTR name;
      };
      XColors colors[4] = {
        {ImageGray, _T("Gray")},
        {ImageLtGray, _T("LtGray")},
        {ImageWhite, _T("White")},
        {ImageDkGray, _T("DkGray")}
      };

      for (int ic = 0; ic < 4; ic++) {
        if (tmColors.ReadColor(colors[ic].name, clrImages)) {
          CBCGPMenuImages::SetColor(colors[ic].state, clrImages);
        }
      }
    }
    else {
      tmItem.ReadColor(_T("ImagesColor"), clrImages);
      CBCGPMenuImages::SetColor(ImageBlack, clrImages);
      CBCGPMenuImages::SetColor(ImageBlack2, clrImages);
    }

    // TODO:
    //CBCGPMenuImages::SetColor (ImageBlack2, _RGB (21, 66, 139));
  }

  // bars
  if (tm.ExcludeTag(_T("BARS"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    const char* strBar;

    if (tmItem.ExcludeTag(_T("DEFAULT"), strBar)) {
      CBCGPTagManager tmBar(strBar);

      if (tmBar.ReadColor(_T("Bkgnd"), s->m_clrBtnBkgnd)) {
        s->m_clrBtnBkgnd.DeleteObject();
        s->m_clrBtnBkgnd.CreateSolidBrush(s->m_clrBtnBkgnd);
      }

      tmBar.ReadColor(_T("GradientLight"), s->m_clrBtnGradientLight);
      s->m_clrBtnGradientDark = s->m_clrBtnGradientLight;
      tmBar.ReadColor(_T("GradientDark"), s->m_clrBtnGradientDark);
    }

    if (tmItem.ExcludeTag(_T("TOOLBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      s->m_clrToolBarGradientLight = s->m_clrBtnGradientLight;
      s->m_clrToolBarGradientDark  = s->m_clrBtnGradientDark;
      s->m_clrToolbarDisabled = SmartMixColors(
          s->m_clrToolBarGradientDark, s->m_clrToolBarGradientLight);
      tmBar.ReadColor(_T("GradientLight"), s->m_clrToolBarGradientLight);
      tmBar.ReadColor(_T("GradientDark"), s->m_clrToolBarGradientDark);
      s->m_clrToolBarGradientVertLight = s->m_clrToolBarGradientLight;
      s->m_clrToolBarGradientVertDark  = s->m_clrToolBarGradientDark;
      tmBar.ReadColor(_T("GradientVertLight"), s->m_clrToolBarGradientVertLight);
      tmBar.ReadColor(_T("GradientVertDark"), s->m_clrToolBarGradientVertDark);
      tmBar.ReadColor(_T("CustomizeButtonGradientLight"), s->m_clrCustomizeButtonGradientLight);
      tmBar.ReadColor(_T("CustomizeButtonGradientDark"), s->m_clrCustomizeButtonGradientDark);
      tmBar.ReadToolBarImages(_T("GRIPPER"), s->m_ToolBarGripper, MakeResourceID(_T("IDB_OFFICE2007_GRIPPER")));
      tmBar.ReadToolBarImages(_T("TEAR"), s->m_ToolBarTear, MakeResourceID(_T("IDB_OFFICE2007_TEAR")));
      tmBar.ReadControlRenderer(_T("BUTTON"), s->m_ctrlToolBarBtn, MakeResourceID(_T("IDB_OFFICE2007_TOOLBAR_BTN")));
      tmBar.ReadControlRenderer(_T("BORDER"), s->m_ctrlToolBarBorder, MakeResourceID(_T("IDB_OFFICE2007_TOOLBAR_BORDER")));
      s->m_clrToolBarBtnText            = globalData.clrBtnText;
      s->m_clrToolBarBtnTextHighlighted = s->m_clrToolBarBtnText;
      tmBar.ReadColor(_T("TextNormal"), s->m_clrToolBarBtnText);
      tmBar.ReadColor(_T("TextHighlighted"), s->m_clrToolBarBtnTextHighlighted);
      tmBar.ReadColor(_T("TextDisabled"), s->m_clrToolBarBtnTextDisabled);

      if (tmBar.ReadColor(_T("BottomLineColor"), s->m_clrToolBarBottomLine)) {
        s->m_penBottomLine.DeleteObject();
        s->m_penBottomLine.CreatePen = (s->m_clrToolBarBottomLine);
      }

      s->m_penSeparatorDark.DeleteObject();
      s->m_penSeparatorDark.CreatePen(PS_SOLID, 1,
          PixelAlpha(s->m_clrToolBarBottomLine, _RGB(255, 255, 255), 95));
      s->m_penSeparatorLight.DeleteObject();
      s->m_penSeparatorLight.CreatePen = (_RGB(255, 255, 255));
    }

    if (tmItem.ExcludeTag(_T("MENUBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      s->m_clrMenuBarGradientLight = s->m_clrToolBarGradientLight;
      s->m_clrMenuBarGradientDark  = s->m_clrToolBarGradientDark;
      tmBar.ReadColor(_T("GradientLight"), s->m_clrMenuBarGradientLight);
      tmBar.ReadColor(_T("GradientDark"), s->m_clrMenuBarGradientDark);
      s->m_clrMenuBarGradientVertLight = s->m_clrMenuBarGradientLight;
      s->m_clrMenuBarGradientVertDark  = s->m_clrMenuBarGradientDark;
      tmBar.ReadColor(_T("GradientVertLight"), s->m_clrMenuBarGradientVertLight);
      tmBar.ReadColor(_T("GradientVertDark"), s->m_clrMenuBarGradientVertDark);
      s->m_clrMenuBarBtnText            = s->m_clrToolBarBtnText;
      s->m_clrMenuBarBtnTextHighlighted = s->m_clrToolBarBtnTextHighlighted;
      s->m_clrMenuBarBtnTextDisabled    = s->m_clrToolBarBtnTextDisabled;
      tmBar.ReadColor(_T("TextNormal"), s->m_clrMenuBarBtnText);
      tmBar.ReadColor(_T("TextHighlighted"), s->m_clrMenuBarBtnTextHighlighted);
      tmBar.ReadColor(_T("TextDisabled"), s->m_clrMenuBarBtnTextDisabled);
      tmBar.ReadControlRenderer(_T("BUTTON"), s->m_ctrlMenuBarBtn, MakeResourceID(_T("IDB_OFFICE2007_MENUBAR_BTN")));
    }

    if (tmItem.ExcludeTag(_T("POPUPBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      tmBar.ReadControlRenderer(_T("BORDER"), s->m_ctrlPopupBorder, MakeResourceID(_T("IDB_OFFICE2007_POPUPMENU_BORDER")));
      const char* strResize;

      if (tmBar.ExcludeTag(_T("RESIZEBAR"), strResize)) {
        CBCGPTagManager tmResize(strResize);
        tmResize.ReadControlRenderer(_T("BACK"), s->m_ctrlPopupResizeBar, MakeResourceID(_T("IDB_OFFICE2007_POPUPMENU_RESIZEBAR")));
        tmResize.ReadToolBarImages(_T("ICON_HV"), s->m_PopupResizeBar_HV, MakeResourceID(_T("IDB_OFFICE2007_POPUPMENU_RESIZEBAR_ICON_HV")));
        tmResize.ReadToolBarImages(_T("ICON_HVT"), s->m_PopupResizeBar_HVT, MakeResourceID(_T("IDB_OFFICE2007_POPUPMENU_RESIZEBAR_ICON_HVT")));
        tmResize.ReadToolBarImages(_T("ICON_V"), s->m_PopupResizeBar_V, MakeResourceID(_T("IDB_OFFICE2007_POPUPMENU_RESIZEBAR_ICON_V")));
      }
    }

    if (tmItem.ExcludeTag(_T("STATUSBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      tmBar.ReadControlRenderer(_T("BACK"), s->m_ctrlStatusBarBack, MakeResourceID(_T("IDB_OFFICE2007_STATUSBAR_BACK")));
      tmBar.ReadControlRenderer(_T("BACK_EXT"), s->m_ctrlStatusBarBack_Ext, MakeResourceID(_T("IDB_OFFICE2007_STATUSBAR_BACK_EXT")));
      tmBar.ReadToolBarImages(_T("PANEBORDER"), s->m_StatusBarPaneBorder, MakeResourceID(_T("IDB_OFFICE2007_STATUSBAR_PANEBORDER")));
      tmBar.ReadToolBarImages(_T("SIZEBOX"), s->m_StatusBarSizeBox, MakeResourceID(_T("IDB_OFFICE2007_STATUSBAR_SIZEBOX")));
      s->m_clrStatusBarText         = s->m_clrMenuBarBtnText;
      s->m_clrStatusBarTextDisabled = s->m_clrMenuBarBtnTextDisabled;
      s->m_clrExtenedStatusBarTextDisabled = s->m_clrMenuBarBtnTextDisabled;
      tmBar.ReadColor(_T("TextNormal"), s->m_clrStatusBarText);
      tmBar.ReadColor(_T("TextDisabled"), s->m_clrStatusBarTextDisabled);
      tmBar.ReadColor(_T("TextExtendedDisabled"), s->m_clrExtenedStatusBarTextDisabled);
    }

    if (tmItem.ExcludeTag(_T("CAPTIONBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      tmBar.ReadColor(_T("GradientLight"), s->m_clrCaptionBarGradientLight);
      tmBar.ReadColor(_T("GradientDark"), s->m_clrCaptionBarGradientDark);
      tmBar.ReadColor(_T("TextNormal"), s->m_clrCaptionBarText);
    }

    if (tmItem.ExcludeTag(_T("SCROLLBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      LPCTSTR szSBName[] = {_T("HORZ"), _T("VERT")};
      const char* strSB;

      for (int i = 0; i < 2; i++) {
        if (tmBar.ExcludeTag(szSBName[i], strSB)) {
          CBCGPTagManager tmSB(strSB);
          const char* strName(_T("IDB_OFFICE2007_STATUSBAR_"));
          strName += szSBName[i];
          tmSB.ReadControlRenderer(_T("BACK_1"), s->m_ctrlScrollBar_Back[i][0], MakeResourceID(strName + _T("_BACK_1")));
          tmSB.ReadControlRenderer(_T("ITEs->m_1"), s->m_ctrlScrollBar_Item[i][0], MakeResourceID(strName + _T("_ITEs->m_1")));
          tmSB.ReadControlRenderer(_T("THUMB_BACK_1"), s->m_ctrlScrollBar_ThumbBack[i][0], MakeResourceID(strName + _T("_THUMB_BACK_1")));
          tmSB.ReadControlRenderer(_T("THUMB_ICON_1"), s->m_ctrlScrollBar_ThumbIcon[i][0], MakeResourceID(strName + _T("_THUMB_ICON_1")));
          tmSB.ReadControlRenderer(_T("BACK_2"), s->m_ctrlScrollBar_Back[i][1], MakeResourceID(strName + _T("_BACK_2")));
          tmSB.ReadControlRenderer(_T("ITEs->m_2"), s->m_ctrlScrollBar_Item[i][1], MakeResourceID(strName + _T("_ITEs->m_2")));
          tmSB.ReadControlRenderer(_T("THUMB_BACK_2"), s->m_ctrlScrollBar_ThumbBack[i][1], MakeResourceID(strName + _T("_THUMB_BACK_2")));
          tmSB.ReadControlRenderer(_T("THUMB_ICON_2"), s->m_ctrlScrollBar_ThumbIcon[i][1], MakeResourceID(strName + _T("_THUMB_ICON_2")));
        }
      }
    }
  }

  if (s->m_clrMenuRarelyUsed == CLR_DEFAULT) {
    s->m_clrMenuRarelyUsed = s->m_clrBtnBkgnd;
  }

  s->m_clrMenuRarelyUsed.DeleteObject();
  s->m_clrMenuRarelyUsed.CreateSolidBrush(s->m_clrMenuRarelyUsed);
  s->m_clrEditBorder            = globalData.clrWindow;
  s->m_clrEditBorderDisabled    = globalData.clrBtnShadow;
  s->m_clrEditBorderHighlighted = s->m_clrMenuItemBorder;
  s->m_clrEditSelection         = globalData.clrHilite;

  // edit
  if (tm.ExcludeTag(_T("EDIT"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadColor(_T("BorderNormal"), s->m_clrEditBorder);
    tmItem.ReadColor(_T("BorderHighlighted"), s->m_clrEditBorderHighlighted);
    tmItem.ReadColor(_T("BorderDisabled"), s->m_clrEditBorderDisabled);
    tmItem.ReadColor(_T("Selection"), s->m_clrEditSelection);
  }

  s->m_clrComboBorder               = globalData.clrWindow;
  s->m_clrComboBorderDisabled       = globalData.clrBtnShadow;
  s->m_clrComboBorderHighlighted    = s->m_clrMenuItemBorder;
  s->m_clrComboBorderPressed        = s->m_clrComboBorderHighlighted;
  s->m_clrComboBtnBorder            = s->m_clrComboBorder;
  s->m_clrComboBtnBorderHighlighted = s->m_clrComboBorderHighlighted;
  s->m_clrComboBtnBorderPressed     = s->m_clrComboBorderHighlighted;
  s->m_clrComboSelection            = globalData.clrHilite;
  s->m_clrComboBtnStart             = s->m_clrToolBarGradientDark;
  s->m_clrComboBtnFinish            = s->m_clrToolBarGradientLight;
  s->m_clrComboBtnDisabledStart     = globalData.clrBtnFace;
  s->m_clrComboBtnDisabledFinish    = s->m_clrComboBtnDisabledStart;
  s->m_clrComboBtnHighlightedStart  = s->m_clrHighlightGradientDark;
  s->m_clrComboBtnHighlightedFinish = s->m_clrHighlightGradientLight;
  s->m_clrComboBtnPressedStart      = s->m_clrHighlightDnGradientDark;
  s->m_clrComboBtnPressedFinish     = s->m_clrHighlightDnGradientLight;

  // combobox
  if (tm.ExcludeTag(_T("COMBO"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadColor(_T("BorderNormal"), s->m_clrComboBorder);
    tmItem.ReadColor(_T("BorderHighlighted"), s->m_clrComboBorderHighlighted);
    tmItem.ReadColor(_T("BorderDisabled"), s->m_clrComboBorderDisabled);
    s->m_clrComboBorderPressed = s->m_clrComboBorderHighlighted;
    tmItem.ReadColor(_T("BorderPressed"), s->m_clrComboBorderPressed);
    tmItem.ReadColor(_T("Selection"), s->m_clrComboSelection);
    const char* strButton;

    if (tmItem.ExcludeTag(_T("BUTTON"), strButton)) {
      CBCGPTagManager tmButton(strButton);
      tmButton.ReadColor(_T("GradientStartNormal"), s->m_clrComboBtnStart);
      tmButton.ReadColor(_T("GradientFinishNormal"), s->m_clrComboBtnFinish);
      tmButton.ReadColor(_T("BtnBorderNormal"), s->m_clrComboBtnBorder);

      if (!tmButton.ReadControlRenderer(_T("IMAGE"), s->m_ctrlComboBoxBtn, MakeResourceID(_T("IDB_OFFICE2007_COMBOBOX_BTN")))) {
        tmButton.ReadColor(_T("GradientStartHighlighted"), s->m_clrComboBtnHighlightedStart);
        tmButton.ReadColor(_T("GradientFinishHighlighted"), s->m_clrComboBtnHighlightedFinish);
        tmButton.ReadColor(_T("GradientStartDisabled"), s->m_clrComboBtnDisabledStart);
        tmButton.ReadColor(_T("GradientFinishDisabled"), s->m_clrComboBtnDisabledFinish);
        tmButton.ReadColor(_T("GradientStartPressed"), s->m_clrComboBtnPressedStart);
        tmButton.ReadColor(_T("GradientFinishPressed"), s->m_clrComboBtnPressedFinish);
        tmButton.ReadColor(_T("BtnBorderHighlighted"), s->m_clrComboBtnBorderHighlighted);
        tmButton.ReadColor(_T("BtnBorderDisabled"), s->m_clrComboBtnBorderDisabled);
        s->m_clrComboBtnBorderPressed = s->m_clrComboBtnBorderHighlighted;
        tmButton.ReadColor(_T("BtnBorderPressed"), s->m_clrComboBtnBorderPressed);
      }
    }
  }

  s->m_clrRibbonEditBorder            = s->m_clrEditBorder;
  s->m_clrRibbonEditBorderDisabled    = s->m_clrEditBorderDisabled;
  s->m_clrRibbonEditBorderHighlighted = s->m_clrEditBorderHighlighted;
  s->m_clrRibbonEditBorderPressed     = s->m_clrRibbonEditBorderHighlighted;
  s->m_clrRibbonEditSelection         = s->m_clrEditSelection;
  s->m_clrRibbonComboBtnBorder            = s->m_clrComboBtnBorder;
  s->m_clrRibbonComboBtnBorderHighlighted = s->m_clrComboBtnBorderHighlighted;
  s->m_clrRibbonComboBtnBorderPressed     = s->m_clrComboBtnBorderPressed;
  s->m_clrRibbonComboBtnStart             = s->m_clrComboBtnStart;
  s->m_clrRibbonComboBtnFinish            = s->m_clrComboBtnFinish;
  s->m_clrRibbonComboBtnDisabledStart     = s->m_clrComboBtnDisabledStart;
  s->m_clrRibbonComboBtnDisabledFinish    = s->m_clrComboBtnDisabledFinish;
  s->m_clrRibbonComboBtnHighlightedStart  = s->m_clrComboBtnHighlightedStart;
  s->m_clrRibbonComboBtnHighlightedFinish = s->m_clrComboBtnHighlightedFinish;
  s->m_clrRibbonComboBtnPressedStart      = s->m_clrComboBtnPressedStart;
  s->m_clrRibbonComboBtnPressedFinish     = s->m_clrComboBtnPressedFinish;
  // task pane
  s->m_clrTaskPaneGradientDark       = s->m_clrBtnGradientLight;
  s->m_clrTaskPaneGradientLight      = s->m_clrTaskPaneGradientDark;

  if (tm.ExcludeTag(_T("TASK"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadColor(_T("GradientDark"), s->m_clrTaskPaneGradientDark);
    tmItem.ReadColor(_T("GradientLight"), s->m_clrTaskPaneGradientLight);
    const char* strGroup;

    if (tmItem.ExcludeTag(_T("GROUP"), strGroup)) {
      CBCGPTagManager tmGroup(strGroup);
      const char* strState;

      if (tmGroup.ExcludeTag(_T("NORMAL"), strState)) {
        CBCGPTagManager tmState(strState);
        const char* str;

        if (tmState.ExcludeTag(_T("CAPTION"), str)) {
          CBCGPTagManager tmCaption(str);
          tmCaption.ReadColor(_T("DarkNormal"), s->m_clrTaskPaneGroupCaptionDark);
          tmCaption.ReadColor(_T("LightNormal"), s->m_clrTaskPaneGroupCaptionLight);
          tmCaption.ReadColor(_T("DarkHighlighted"), s->m_clrTaskPaneGroupCaptionHighDark);
          tmCaption.ReadColor(_T("LightHighlighted"), s->m_clrTaskPaneGroupCaptionHighLight);
          tmCaption.ReadColor(_T("TextNormal"), s->m_clrTaskPaneGroupCaptionText);
          tmCaption.ReadColor(_T("TextHighlighted"), s->m_clrTaskPaneGroupCaptionTextHigh);
        }

        if (tmState.ExcludeTag(_T("AREA"), str)) {
          CBCGPTagManager tmArea(str);
          tmArea.ReadColor(_T("DarkNormal"), s->m_clrTaskPaneGroupAreaDark);
          tmArea.ReadColor(_T("LightNormal"), s->m_clrTaskPaneGroupAreaLight);
        }
      }

      if (tmGroup.ExcludeTag(_T("SPECIAL"), strState)) {
        CBCGPTagManager tmState(strState);
        const char* str;

        if (tmState.ExcludeTag(_T("CAPTION"), str)) {
          CBCGPTagManager tmCaption(str);
          tmCaption.ReadColor(_T("DarkNormal"), s->m_clrTaskPaneGroupCaptionSpecDark);
          tmCaption.ReadColor(_T("LightNormal"), s->m_clrTaskPaneGroupCaptionSpecLight);
          tmCaption.ReadColor(_T("DarkHighlighted"), s->m_clrTaskPaneGroupCaptionHighSpecDark);
          tmCaption.ReadColor(_T("LightHighlighted"), s->m_clrTaskPaneGroupCaptionHighSpecLight);
          tmCaption.ReadColor(_T("TextNormal"), s->m_clrTaskPaneGroupCaptionTextSpec);
          tmCaption.ReadColor(_T("TextHighlighted"), s->m_clrTaskPaneGroupCaptionTextHighSpec);
        }

        if (tmState.ExcludeTag(_T("AREA"), str)) {
          CBCGPTagManager tmArea(str);
          tmArea.ReadColor(_T("DarkNormal"), s->m_clrTaskPaneGroupAreaSpecDark);
          tmArea.ReadColor(_T("LightNormal"), s->m_clrTaskPaneGroupAreaSpecLight);
        }
      }

      if (tmGroup.ReadColor(_T("BORDER"), s->m_clrTaskPaneGroupBorder)) {
        s->m_penTaskPaneGroupBorder.DeleteObject();
        s->m_penTaskPaneGroupBorder.CreatePen = (s->m_clrTaskPaneGroupBorder);
      }
    }

    tmItem.ReadControlRenderer(_T("SCROLL_BUTTON"), s->m_ctrlTaskScrollBtn, MakeResourceID(_T("IDB_OFFICE2007_TASKPANE_SCROLL_BTN")));
  }

  if (tm.ExcludeTag(_T("TABS"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadColor(_T("TextColorActive"), s->m_clrTabTextActive);
    tmItem.ReadColor(_T("TextColorInactive"), s->m_clrTabTextInactive);
    const char* strTab;

    if (tmItem.ExcludeTag(_T("3D"), strTab)) {
      CBCGPTagManager tmTab(strTab);
      const char* strBtn;

      if (tmTab.ExcludeTag(_T("BUTTON"), strBtn)) {
        CBCGPControlRendererParams params(MakeResourceID(_T("IDB_OFFICE2007_TAB_3D")), RECT(0, 0, 0, 0), RECT(0, 0, 0, 0));

        if (CBCGPTagManager::ParseControlRendererParams(strBtn, params)) {
          s->m_ctrlTab3D[0].Create(params);
          s->m_ctrlTab3D[1].Create(params, TRUE);
        }
      }

      tmTab.ReadColor(_T("Face"), s->m_clrTab3DFace);
      tmTab.ReadColor(_T("Black"), s->m_clrTab3DBlack);
      tmTab.ReadColor(_T("Dark"), s->m_clrTab3DDark);
      tmTab.ReadColor(_T("DarkShadow"), s->m_clrTab3DDarkShadow);
      tmTab.ReadColor(_T("Light"), s->m_clrTab3DLight);
      tmTab.ReadColor(_T("Highlight"), s->m_clrTab3DHighlight);
    }

    if (tmItem.ExcludeTag(_T("FLAT"), strTab)) {
      CBCGPTagManager tmTab(strTab);
      const char* strBtn;

      if (tmTab.ExcludeTag(_T("BUTTON"), strBtn)) {
        CBCGPControlRendererParams params(MakeResourceID(_T("IDB_OFFICE2007_TAB_FLAT")), RECT(0, 0, 0, 0), RECT(0, 0, 0, 0));

        if (CBCGPTagManager::ParseControlRendererParams(strBtn, params)) {
          s->m_ctrlTabFlat[0].Create(params);
          s->m_ctrlTabFlat[1].Create(params, TRUE);
        }
      }

      tmTab.ReadColor(_T("Face"), s->m_clrTabFlatFace);
      tmTab.ReadColor(_T("Black"), s->m_clrTabFlatBlack);
      tmTab.ReadColor(_T("Dark"), s->m_clrTabFlatDark);
      tmTab.ReadColor(_T("DarkShadow"), s->m_clrTabFlatDarkShadow);
      tmTab.ReadColor(_T("Light"), s->m_clrTabFlatLight);
      tmTab.ReadColor(_T("Highlight"), s->m_clrTabFlatHighlight);
      COLORREF clr;

      if (tmTab.ReadColor(_T("BorderInnerNormal"), clr)) {
        s->m_penTabFlatInner[0].DeleteObject();
        s->m_penTabFlatInner[0].CreatePen = (clr);
      }

      if (tmTab.ReadColor(_T("BorderInnerActive"), clr)) {
        s->m_penTabFlatInner[1].DeleteObject();
        s->m_penTabFlatInner[1].CreatePen = (clr);
      }

      if (tmTab.ReadColor(_T("BorderOuterNormal"), clr)) {
        s->m_penTabFlatOuter[0].DeleteObject();
        s->m_penTabFlatOuter[0].CreatePen = (clr);
      }

      if (tmTab.ReadColor(_T("BorderOuterActive"), clr)) {
        s->m_penTabFlatOuter[1].DeleteObject();
        s->m_penTabFlatOuter[1].CreatePen = (clr);
      }
    }
  }

  if (tm.ExcludeTag(_T("HEADER"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadColor(_T("NormalStart"), s->m_clrHeaderNormalStart);
    tmItem.ReadColor(_T("NormalFinish"), s->m_clrHeaderNormalFinish);
    tmItem.ReadColor(_T("NormalBorder"), s->m_clrHeaderNormalBorder);
    tmItem.ReadColor(_T("HighlightedStart"), s->m_clrHeaderHighlightedStart);
    tmItem.ReadColor(_T("HighlightedFinish"), s->m_clrHeaderHighlightedFinish);
    tmItem.ReadColor(_T("HighlightedBorder"), s->m_clrHeaderHighlightedBorder);
    tmItem.ReadColor(_T("PressedStart"), s->m_clrHeaderPressedStart);
    tmItem.ReadColor(_T("PressedFinish"), s->m_clrHeaderPressedFinish);
    tmItem.ReadColor(_T("PressedBorder"), s->m_clrHeaderPressedBorder);
  }

  s->m_clrRibbonCategoryText                = s->m_clrMenuBarBtnText;
  s->m_clrRibbonCategoryTextHighlighted     = s->m_clrMenuBarBtnTextHighlighted;
  s->m_clrRibbonCategoryTextDisabled      = s->m_clrMenuBarBtnTextDisabled;
  s->m_clrRibbonPanelText                   = s->m_clrToolBarBtnText;
  s->m_clrRibbonPanelTextHighlighted        = s->m_clrToolBarBtnTextHighlighted;
  s->m_clrRibbonPanelCaptionText            = s->m_clrRibbonPanelText;
  s->m_clrRibbonPanelCaptionTextHighlighted = s->m_clrRibbonPanelTextHighlighted;
  s->m_clrRibbonEdit                        = globalData.clrBtnLight;
  s->m_clrRibbonEditHighlighted             = globalData.clrWindow;
  s->m_clrRibbonEditPressed                 = s->m_clrRibbonEditHighlighted;
  s->m_clrRibbonEditDisabled                = globalData.clrBtnFace;

  if (tm.ExcludeTag(_T("RIBBON"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    const char* str;

    if (tmItem.ExcludeTag(_T("CATEGORY"), str)) {
      CBCGPTagManager tmCategory(str);
      tmCategory.ReadControlRenderer(_T("BACK"), s->m_ctrlRibbonCategoryBack, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CATEGORY_BACK")));
      const char* strTab;

      if (tmCategory.ExcludeTag(_T("TAB"), strTab)) {
        CBCGPTagManager tmTab(strTab);
        tmTab.ReadControlRenderer(_T("BUTTON"), s->m_ctrlRibbonCategoryTab, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CATEGORY_TAB")));
        tmTab.ReadColor(_T("TextNormal"), s->m_clrRibbonCategoryText);
        tmTab.ReadColor(_T("TextHighlighted"), s->m_clrRibbonCategoryTextHighlighted);
        tmTab.ReadColor(_T("TextDisabled"), s->m_clrRibbonCategoryTextDisabled);
      }

      tmCategory.ReadControlRenderer(_T("TAB_SEPARATOR"), s->m_ctrlRibbonCategoryTabSep, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CATEGORY_TAB_SEP")));
      tmCategory.ReadControlRenderer(_T("BUTTON_PAGE_L"), s->m_ctrlRibbonCategoryBtnPage[0], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_PAGE_L")));
      tmCategory.ReadControlRenderer(_T("BUTTON_PAGE_R"), s->m_ctrlRibbonCategoryBtnPage[1], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_PAGE_R")));
    }

    if (tmItem.ExcludeTag(_T("PANEL"), str)) {
      CBCGPTagManager tmPanel(str);
      {
        const char* strBack;

        if (tmPanel.ExcludeTag(_T("BACK"), strBack)) {
          CBCGPTagManager tmBack(strBack);
          tmBack.ReadControlRenderer(_T("TOP"), s->m_ctrlRibbonPanelBack_T, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_PANEL_BACK_T")));
          tmBack.ReadControlRenderer(_T("BOTTOM"), s->m_ctrlRibbonPanelBack_B, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_PANEL_BACK_B")));
        }
      }
      {
        const char* strCaption;

        if (tmPanel.ExcludeTag(_T("CAPTION"), strCaption)) {
          CBCGPTagManager tmCaption(strCaption);
          tmCaption.ReadControlRenderer(_T("LAUNCH_BTN"), s->m_ctrlRibbonBtnLaunch, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_LAUNCH")));
          tmCaption.ReadToolBarImages(_T("LAUNCH_ICON"), s->m_RibbonBtnLaunchIcon, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_LAUNCH_ICON")));
          tmCaption.ReadColor(_T("TextNormal"), s->m_clrRibbonPanelCaptionText);
          tmCaption.ReadColor(_T("TextHighlighted"), s->m_clrRibbonPanelCaptionTextHighlighted);
          s->m_RibbonBtnLaunchIcon.SmoothResize(GetRibbonImageScale());
        }
      }
      tmPanel.ReadToolBarImages(_T("SEPARATOR"), s->m_RibbonPanelSeparator, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_PANEL_SEPARATOR")));
      tmPanel.ReadControlRenderer(_T("QAT"), s->m_ctrlRibbonPanelQAT, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_PANEL_QAT")));
      {
        const char* strButtons;

        if (tmPanel.ExcludeTag(_T("BUTTONS"), strButtons)) {
          CBCGPTagManager tmButtons(strButtons);
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUP_F"), s->m_ctrlRibbonBtnGroup_F, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_GROUP_F")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUP_M"), s->m_ctrlRibbonBtnGroup_M, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_GROUP_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUP_L"), s->m_ctrlRibbonBtnGroup_L, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_GROUP_L")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUP_S"), s->m_ctrlRibbonBtnGroup_S, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_GROUP_S")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_F_C"), s->m_ctrlRibbonBtnGroupMenu_F[0], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_GROUPMENU_F_C")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_F_M"), s->m_ctrlRibbonBtnGroupMenu_F[1], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_GROUPMENU_F_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_s->m_C"), s->m_ctrlRibbonBtnGroupMenu_M[0], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_GROUPMENU_s->m_C")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_s->m_M"), s->m_ctrlRibbonBtnGroupMenu_M[1], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_GROUPMENU_s->m_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_L_C"), s->m_ctrlRibbonBtnGroupMenu_L[0], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_GROUPMENU_L_C")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_L_M"), s->m_ctrlRibbonBtnGroupMenu_L[1], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_GROUPMENU_L_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_NORMAL_S"), s->m_ctrlRibbonBtn[0], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_NORMAL_S")));
          tmButtons.ReadControlRenderer(_T("BUTTON_NORMAL_B"), s->m_ctrlRibbonBtn[1], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_NORMAL_B")));
          tmButtons.ReadControlRenderer(_T("BUTTON_DEFAULT"), s->m_ctrlRibbonBtnDefault, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_DEFAULT")));
          tmButtons.ReadControlRenderer(_T("BUTTON_DEFAULT_ICON"), s->m_ctrlRibbonBtnDefaultIcon, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_DEFAULT_ICON")));
          tmButtons.ReadToolBarImages(_T("BUTTON_DEFAULT_IMAGE"), s->m_RibbonBtnDefaultImage, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_DEFAULT_IMAGE")));
          tmButtons.ReadControlRenderer(_T("BUTTON_DEFAULT_QAT"), s->m_ctrlRibbonBtnDefaultQAT, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_DEFAULT_QAT")));

          if (!s->m_ctrlRibbonBtnDefaultQAT.IsValid()) {
            tmButtons.ReadControlRenderer(_T("BUTTON_DEFAULT_QAT_ICON"), s->m_ctrlRibbonBtnDefaultQATIcon, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_DEFAULT_QAT_ICON")));
          }

          tmButtons.ReadControlRenderer(_T("BUTTON_MENU_H_C"), s->m_ctrlRibbonBtnMenuH[0], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_MENU_H_C")));
          tmButtons.ReadControlRenderer(_T("BUTTON_MENU_H_M"), s->m_ctrlRibbonBtnMenuH[1], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_MENU_H_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_MENU_V_C"), s->m_ctrlRibbonBtnMenuV[0], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_MENU_V_C")));
          tmButtons.ReadControlRenderer(_T("BUTTON_MENU_V_M"), s->m_ctrlRibbonBtnMenuV[1], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_MENU_V_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_CHECK"), s->m_ctrlRibbonBtnCheck, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_CHECK")));
          tmButtons.ReadControlRenderer(_T("BUTTON_RADIO"), s->m_ctrlRibbonBtnRadio, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_RADIO")));
          tmButtons.ReadControlRenderer(_T("BUTTON_PUSH"), s->m_ctrlRibbonBtnPush, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_PUSH")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUP"), s->m_ctrlRibbonBtnGroup, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_GROUP")));
          s->m_ctrlRibbonBtnCheck.SmoothResize(GetRibbonImageScale());
          s->m_ctrlRibbonBtnRadio.SmoothResize(GetRibbonImageScale());
          tmButtons.ReadControlRenderer(_T("BUTTON_PNL_T"), s->m_ctrlRibbonBtnPalette[0], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_PALETTE_T")));
          tmButtons.ReadControlRenderer(_T("BUTTON_PNL_M"), s->m_ctrlRibbonBtnPalette[1], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_PALETTE_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_PNL_B"), s->m_ctrlRibbonBtnPalette[2], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_PALETTE_B")));
        }
      }
      {
        const char* strEdit;

        if (tmPanel.ExcludeTag(_T("EDIT"), strEdit)) {
          CBCGPTagManager tmEdit(strEdit);
          tmEdit.ReadColor(_T("Normal"), s->m_clrRibbonEdit);
          tmEdit.ReadColor(_T("Highlighted"), s->m_clrRibbonEditHighlighted);
          tmEdit.ReadColor(_T("Disabled"), s->m_clrRibbonEditDisabled);
          tmEdit.ReadColor(_T("Pressed"), s->m_clrRibbonEditPressed);
          tmEdit.ReadColor(_T("BorderNormal"), s->m_clrRibbonEditBorder);
          tmEdit.ReadColor(_T("BorderHighlighted"), s->m_clrRibbonEditBorderHighlighted);
          tmEdit.ReadColor(_T("BorderDisabled"), s->m_clrRibbonEditBorderDisabled);
          tmEdit.ReadColor(_T("BorderPressed"), s->m_clrRibbonEditBorderPressed);
          tmEdit.ReadColor(_T("Selection"), s->m_clrRibbonEditSelection);
          const char* strButton;

          if (tmEdit.ExcludeTag(_T("BUTTON"), strButton)) {
            CBCGPTagManager tmButton(strButton);
            tmButton.ReadColor(_T("GradientStartNormal"), s->m_clrRibbonComboBtnStart);
            tmButton.ReadColor(_T("GradientFinishNormal"), s->m_clrRibbonComboBtnFinish);
            tmButton.ReadColor(_T("BtnBorderNormal"), s->m_clrRibbonComboBtnBorder);

            if (!tmButton.ReadControlRenderer(_T("IMAGE"), s->m_ctrlRibbonComboBoxBtn, MakeResourceID(_T("IDB_OFFICE2007_COMBOBOX_BTN")))) {
              tmButton.ReadColor(_T("GradientStartHighlighted"), s->m_clrRibbonComboBtnHighlightedStart);
              tmButton.ReadColor(_T("GradientFinishHighlighted"), s->m_clrRibbonComboBtnHighlightedFinish);
              tmButton.ReadColor(_T("GradientStartDisabled"), s->m_clrRibbonComboBtnDisabledStart);
              tmButton.ReadColor(_T("GradientFinishDisabled"), s->m_clrRibbonComboBtnDisabledFinish);
              tmButton.ReadColor(_T("GradientStartPressed"), s->m_clrRibbonComboBtnPressedStart);
              tmButton.ReadColor(_T("GradientFinishPressed"), s->m_clrRibbonComboBtnPressedFinish);
              tmButton.ReadColor(_T("BtnBorderHighlighted"), s->m_clrRibbonComboBtnBorderHighlighted);
              tmButton.ReadColor(_T("BtnBorderDisabled"), s->m_clrRibbonComboBtnBorderDisabled);
              s->m_clrRibbonComboBtnBorderPressed = s->m_clrRibbonComboBtnBorderHighlighted;
              tmButton.ReadColor(_T("BtnBorderPressed"), s->m_clrRibbonComboBtnBorderPressed);
            }
          }
        }
      }
      tmPanel.ReadColor(_T("TextNormal"), s->m_clrRibbonPanelText);
      tmPanel.ReadColor(_T("TextHighlighted"), s->m_clrRibbonPanelTextHighlighted);
    }

    if (tmItem.ExcludeTag(_T("CONTEXT"), str)) {
      CBCGPTagManager tmContext(str);
      const char* strCategory;

      if (tmContext.ExcludeTag(_T("CATEGORY"), strCategory)) {
        CBCGPTagManager tmCategory(strCategory);
        CBCGPControlRendererParams prBack;
        CBCGPControlRendererParams prCaption;
        CBCGPControlRendererParams prTab;
        CBCGPControlRendererParams prDefault;
        COLORREF clrText = s->m_clrRibbonCategoryText;
        COLORREF clrTextHighlighted = s->m_clrRibbonCategoryTextHighlighted;
        COLORREF clrCaptionText = clrText;
        tmCategory.ReadControlRendererParams(_T("BACK"), prBack);
        const char* strTab;

        if (tmCategory.ExcludeTag(_T("TAB"), strTab)) {
          CBCGPTagManager tmTab(strTab);
          tmTab.ReadControlRendererParams(_T("BUTTON"), prTab);
          tmTab.ReadColor(_T("TextNormal"), clrText);
          tmTab.ReadColor(_T("TextHighlighted"), clrTextHighlighted);
        }

        const char* strCaption;

        if (tmCategory.ExcludeTag(_T("CAPTION"), strCaption)) {
          CBCGPTagManager tmCaption(strCaption);
          tmCaption.ReadControlRendererParams(_T("BACK"), prCaption);
          tmCaption.ReadColor(_T("TextNormal"), clrCaptionText);
        }

        tmCategory.ReadControlRendererParams(_T("BUTTON_DEFAULT"), prDefault);
        const char* strID[BCGPRibbonCategoryColorCount] = {
          MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CONTEXT_R_")),
          MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CONTEXT_O_")),
          MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CONTEXT_Y_")),
          MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CONTEXT_G_")),
          MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CONTEXT_B_")),
          MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CONTEXT_I_")),
          MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CONTEXT_V_"))
        };

        for (int i = 0; i < BCGPRibbonCategoryColorCount; i++) {
          XRibbonContextCategory& cat = s->m_ctrlRibbonContextCategory[i];
          prDefault.s->m_strBmpResID = strID[i] + _T("BTN_DEFAULT");
          prTab.s->m_strBmpResID     = strID[i] + _T("CATEGORY_TAB");
          prCaption.s->m_strBmpResID = strID[i] + _T("CATEGORY_CAPTION");
          prBack.s->m_strBmpResID    = strID[i] + _T("CATEGORY_BACK");
          cat.s->m_ctrlBtnDefault.Create(prDefault);
          cat.s->m_ctrlCaption.Create(prCaption);
          cat.s->m_ctrlTab.Create(prTab);
          cat.s->m_ctrlBack.Create(prBack);
          cat.s->m_clrText            = clrText;
          cat.s->m_clrTextHighlighted = clrTextHighlighted;
          cat.s->m_clrCaptionText     = clrCaptionText;
        }
      }

      const char* strPanel;

      if (tmContext.ExcludeTag(_T("PANEL"), strPanel)) {
        CBCGPTagManager tmPanel(strPanel);
        const char* strBack;

        if (tmPanel.ExcludeTag(_T("BACK"), strBack)) {
          CBCGPTagManager tmBack(strBack);
          tmBack.ReadControlRenderer(_T("TOP"), s->m_ctrlRibbonContextPanelBack_T, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CONTEXT_PANEL_BACK_T")));
          tmBack.ReadControlRenderer(_T("BOTTOM"), s->m_ctrlRibbonContextPanelBack_B, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CONTEXT_PANEL_BACK_B")));
        }

        const char* strCaption;

        if (tmPanel.ExcludeTag(_T("CAPTION"), strCaption)) {
          CBCGPTagManager tmCaption(strCaption);
          tmCaption.ReadColor(_T("TextNormal"), s->m_clrRibbonContextPanelCaptionText);
          tmCaption.ReadColor(_T("TextHighlighted"), s->m_clrRibbonContextPanelCaptionTextHighlighted);
        }

        tmPanel.ReadColor(_T("TextNormal"), s->m_clrRibbonContextPanelText);
        tmPanel.ReadColor(_T("TextHighlighted"), s->m_clrRibbonContextPanelTextHighlighted);
      }

      tmContext.ReadControlRenderer(_T("SEPARATOR"), s->m_ctrlRibbonContextSeparator, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CONTEXT_SEPARATOR")));
    }

    tmItem.ReadControlRenderer(_T("MAIN_BUTTON"), s->m_RibbonBtnMain, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_MAIN")));

    if (s->m_RibbonBtnMain.IsValid()) {
      s->m_RibbonBtnMain.SmoothResize(GetRibbonImageScale());
    }

    if (tmItem.ExcludeTag(_T("MAIN"), str)) {
      CBCGPTagManager tmMain(str);
      tmMain.ReadControlRenderer(_T("BACK"), s->m_ctrlRibbonMainPanel, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_PANEL_MAIN")));
      tmMain.ReadControlRenderer(_T("BORDER"), s->m_ctrlRibbonMainPanelBorder, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_PANEL_MAIN_BORDER")));
      tmMain.ReadControlRenderer(_T("BUTTON"), s->m_ctrlRibbonBtnMainPanel, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_PANEL_MAIN")));
    }

    if (tmItem.ExcludeTag(_T("CAPTION"), str)) {
      CBCGPTagManager tmCaption(str);
      tmCaption.ReadControlRenderer(_T("QA"), s->m_ctrlRibbonCaptionQA, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CAPTION_QA")));
      tmCaption.ReadControlRenderer(_T("QA_GLASS"), s->m_ctrlRibbonCaptionQA_Glass, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_CAPTION_QA_GLASS")));
    }

    if (tmItem.ExcludeTag(_T("STATUS"), str)) {
      CBCGPTagManager tmStatus(str);
      tmStatus.ReadControlRenderer(_T("PANE_BUTTON"), s->m_ctrlRibbonBtnStatusPane, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_STATUS_PANE")));
      const char* strSlider;

      if (tmStatus.ExcludeTag(_T("SLIDER"), strSlider)) {
        CBCGPTagManager tmSlider(strSlider);
        tmSlider.ReadControlRenderer(_T("THUMB"), s->m_ctrlRibbonSliderThumb, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_SLIDER_THUMB")));
        tmSlider.ReadControlRenderer(_T("THUMB_H"), s->m_ctrlRibbonSliderThumbA[0], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_SLIDER_THUMB_H")));
        tmSlider.ReadControlRenderer(_T("THUMB_T"), s->m_ctrlRibbonSliderThumbA[1], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_SLIDER_THUMB_T")));
        tmSlider.ReadControlRenderer(_T("THUMB_R"), s->m_ctrlRibbonSliderThumbA[2], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_SLIDER_THUMB_R")));
        tmSlider.ReadControlRenderer(_T("THUMB_V"), s->m_ctrlRibbonSliderThumbA[3], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_SLIDER_THUMB_V")));
        tmSlider.ReadControlRenderer(_T("THUMB_L"), s->m_ctrlRibbonSliderThumbA[4], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_SLIDER_THUMB_L")));
        tmSlider.ReadControlRenderer(_T("PLUS"), s->m_ctrlRibbonSliderBtnPlus, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_SLIDER_BTN_PLUS")));
        tmSlider.ReadControlRenderer(_T("MINUS"), s->m_ctrlRibbonSliderBtnMinus, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_SLIDER_BTN_MINUS")));
        s->m_ctrlRibbonSliderThumb.SmoothResize(GetRibbonImageScale());
        s->m_ctrlRibbonSliderThumbA[0].SmoothResize(GetRibbonImageScale());
        s->m_ctrlRibbonSliderThumbA[1].SmoothResize(GetRibbonImageScale());
        s->m_ctrlRibbonSliderThumbA[2].SmoothResize(GetRibbonImageScale());
        s->m_ctrlRibbonSliderThumbA[3].SmoothResize(GetRibbonImageScale());
        s->m_ctrlRibbonSliderThumbA[4].SmoothResize(GetRibbonImageScale());
        s->m_ctrlRibbonSliderBtnMinus.SmoothResize(GetRibbonImageScale());
        s->m_ctrlRibbonSliderBtnPlus.SmoothResize(GetRibbonImageScale());
      }

      const char* strProgress;

      if (tmStatus.ExcludeTag(_T("PROGRESS"), strProgress)) {
        CBCGPTagManager tmProgress(strProgress);
        tmProgress.ReadControlRenderer(_T("BACK"), s->m_ctrlRibbonProgressBack, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_PROGRESS_BACK")));
        tmProgress.ReadControlRenderer(_T("NORMAL"), s->m_ctrlRibbonProgressNormal, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_PROGRESS_NORMAL")));
        tmProgress.ReadControlRenderer(_T("NORMAL_EXT"), s->m_ctrlRibbonProgressNormalExt, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_PROGRESS_NORMAL_EXT")));
        tmProgress.ReadControlRenderer(_T("INFINITY"), s->m_ctrlRibbonProgressInfinity, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_PROGRESS_INFINITY")));
      }
    }

    if (tmItem.ExcludeTag(_T("BORDERS"), str)) {
      CBCGPTagManager tmBorders(str);
      tmBorders.ReadControlRenderer(_T("QAT"), s->m_ctrlRibbonBorder_QAT, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BORDER_QAT")));
      tmBorders.ReadControlRenderer(_T("FLOATY"), s->m_ctrlRibbonBorder_Floaty, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BORDER_FLOATY")));
    }

    if (tmItem.ExcludeTag(_T("KEYTIP"), str)) {
      CBCGPTagManager tmKeyTip(str);
      tmKeyTip.ReadControlRenderer(_T("BACK"), s->m_ctrlRibbonKeyTip, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_KEYTIP_BACK")));
      tmKeyTip.ReadColor(_T("TextNormal"), s->m_clrRibbonKeyTipTextNormal);
      BOOL bSystem = FALSE;

      if (s->m_clrRibbonKeyTipTextNormal == 0) {
        if (s->m_bToolTipParams && s->m_ToolTipParams.s->m_clrText != 0) {
          s->m_clrRibbonKeyTipTextNormal = s->m_ToolTipParams.s->m_clrText;
        }
        else {
          bSystem = TRUE;
          s->m_clrRibbonKeyTipTextNormal = _GetSysColor(COLOR_INFOTEXT);
        }
      }

      tmKeyTip.ReadColor(_T("TextDisabled"), s->m_clrRibbonKeyTipTextDisabled);

      if (s->m_clrRibbonKeyTipTextDisabled == 0) {
        if (bSystem) {
          s->m_clrRibbonKeyTipTextDisabled = globalData.clrGrayedText;
        }
        else {
          s->m_clrRibbonKeyTipTextDisabled = PixelAlpha(
              s->m_clrRibbonKeyTipTextNormal, globalData.clrWindow, 50);
        }
      }
    }

    if (tmItem.ExcludeTag(_T("HYPERLINK"), str)) {
      CBCGPTagManager tmHyperlink(str);
      tmHyperlink.ReadColor(_T("Inactive"),      s->m_clrRibbonHyperlinkInactive);
      tmHyperlink.ReadColor(_T("Active"),      s->m_clrRibbonHyperlinkActive);
      tmHyperlink.ReadColor(_T("StatusbarInactive"), s->m_clrRibbonStatusbarHyperlinkInactive);
      tmHyperlink.ReadColor(_T("StatusbarActive"), s->m_clrRibbonStatusbarHyperlinkActive);
    }
  }

  if (tm.ExcludeTag(_T("PLANNER"), strItem)) {
    CBCGPTagManager tmItem(strItem);

    if (tmItem.ReadColor(_T("WorkColor"), s->m_clrPlannerWork)) {
      s->m_clrPlanner.DeleteObject();
      s->m_clrPlanner.CreateSolidBrush(s->m_clrPlannerWork);
    }

    tmItem.ReadColor(_T("NcAreaColor"), s->m_clrPlannerNcArea);
    tmItem.ReadColor(_T("NcLineColor"), s->m_clrPlannerNcLine);
    tmItem.ReadColor(_T("NcTextColor"), s->m_clrPlannerNcText);
    const char* str;

    if (tmItem.ExcludeTag(_T("TODAY"), str)) {
      CBCGPTagManager tmToday(str);
      tmToday.ReadColor(_T("Caption1Start") , s->m_clrPlannerTodayCaption[0]);
      tmToday.ReadColor(_T("Caption1Finish"), s->m_clrPlannerTodayCaption[1]);
      tmToday.ReadColor(_T("Caption2Start") , s->m_clrPlannerTodayCaption[2]);
      tmToday.ReadColor(_T("Caption2Finish"), s->m_clrPlannerTodayCaption[3]);
      tmToday.ReadColor(_T("BorderColor")   , s->m_clrPlannerTodayBorder);
    }
  }

  s->m_clrGridLeftOffset          = globalData.clrBtnFace;
  s->m_clrGridGroupLine       = globalData.clrBtnShadow;
  s->m_clrGridHeaderNormalStart   = s->m_clrHeaderNormalStart;
  s->m_clrGridHeaderNormalFinish  = s->m_clrHeaderNormalFinish;
  s->m_clrGridHeaderNormalBorder  = s->m_clrHeaderNormalBorder;
  s->m_clrGridHeaderPressedStart  = s->m_clrHeaderPressedStart;
  s->m_clrGridHeaderPressedFinish = s->m_clrHeaderPressedFinish;
  s->m_clrGridHeaderPressedBorder = s->m_clrHeaderPressedBorder;
  s->m_clrGridHeaderAllNormalBackStart         = MixColors(s->m_clrGridHeaderNormalStart, s->m_clrGridHeaderNormalBorder, 0.50);
  s->m_clrGridHeaderAllNormalBackFinish        = s->m_clrGridHeaderAllNormalBackStart;
  s->m_clrGridHeaderAllPressedBackStart        = s->m_clrHeaderPressedBorder;
  s->m_clrGridHeaderAllPressedBackFinish       = s->m_clrGridHeaderAllPressedBackStart;
  s->m_clrGridHeaderAllNormalBorderHighlighted = s->m_clrGridHeaderNormalStart;
  s->m_clrGridHeaderAllNormalBorderShadow      = s->m_clrGridHeaderNormalFinish;
  s->m_clrGridHeaderAllPressedBorderHighlighted = s->m_clrGridHeaderAllNormalBorderHighlighted;
  s->m_clrGridHeaderAllPressedBorderShadow     = s->m_clrGridHeaderAllPressedBorderShadow;
  s->m_clrGridHeaderAllNormalSignStart         = s->m_clrGridHeaderNormalStart;
  s->m_clrGridHeaderAllNormalSignFinish        = s->m_clrGridHeaderNormalFinish;
  s->m_clrGridHeaderAllPressedSignStart        = s->m_clrGridHeaderAllNormalSignStart;
  s->m_clrGridHeaderAllPressedSignFinish       = s->m_clrGridHeaderAllNormalSignFinish;

  if (tm.ExcludeTag(_T("GRID"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    const char* strHeader;

    if (tmItem.ExcludeTag(_T("HEADER"), strHeader)) {
      CBCGPTagManager tmHeader(strHeader);
      tmHeader.ReadColor(_T("NormalStart"), s->m_clrGridHeaderNormalStart);
      tmHeader.ReadColor(_T("NormalFinish"), s->m_clrGridHeaderNormalFinish);
      tmHeader.ReadColor(_T("NormalBorder"), s->m_clrGridHeaderNormalBorder);
      s->m_clrGridHeaderPressedStart  = s->m_clrGridHeaderNormalFinish;
      s->m_clrGridHeaderPressedFinish = s->m_clrGridHeaderNormalStart;
      s->m_clrGridHeaderPressedBorder = s->m_clrGridHeaderNormalBorder;
      tmHeader.ReadColor(_T("PressedStart"), s->m_clrGridHeaderPressedStart);
      tmHeader.ReadColor(_T("PressedFinish"), s->m_clrGridHeaderPressedFinish);
      tmHeader.ReadColor(_T("PressedBorder"), s->m_clrGridHeaderPressedBorder);
      s->m_clrGridHeaderAllNormalBackStart         = MixColors(s->m_clrGridHeaderNormalStart, s->m_clrGridHeaderNormalBorder, 0.50);
      s->m_clrGridHeaderAllNormalBackFinish        = s->m_clrGridHeaderAllNormalBackStart;
      s->m_clrGridHeaderAllPressedBackStart        = s->m_clrHeaderPressedBorder;
      s->m_clrGridHeaderAllPressedBackFinish       = s->m_clrGridHeaderAllPressedBackStart;
      s->m_clrGridHeaderAllNormalBorderHighlighted = s->m_clrGridHeaderNormalStart;
      s->m_clrGridHeaderAllNormalBorderShadow      = s->m_clrGridHeaderNormalFinish;
      s->m_clrGridHeaderAllPressedBorderHighlighted = s->m_clrGridHeaderAllNormalBorderHighlighted;
      s->m_clrGridHeaderAllPressedBorderShadow     = s->m_clrGridHeaderAllPressedBorderShadow;
      s->m_clrGridHeaderAllNormalSignStart         = s->m_clrGridHeaderNormalStart;
      s->m_clrGridHeaderAllNormalSignFinish        = s->m_clrGridHeaderNormalFinish;
      s->m_clrGridHeaderAllPressedSignStart        = s->m_clrGridHeaderAllNormalSignStart;
      s->m_clrGridHeaderAllPressedSignFinish       = s->m_clrGridHeaderAllNormalSignFinish;
      const char* strAll;

      if (tmHeader.ExcludeTag(_T("ALL_AREA"), strAll)) {
        CBCGPTagManager tmAll(strAll);
        tmAll.ReadColor(_T("NormalBackStart"), s->m_clrGridHeaderAllNormalBackStart);
        s->m_clrGridHeaderAllNormalBackFinish = s->m_clrGridHeaderAllNormalBackStart;
        tmAll.ReadColor(_T("NormalBackFinish"), s->m_clrGridHeaderAllNormalBackFinish);
        s->m_clrGridHeaderAllPressedBackStart = s->m_clrGridHeaderAllNormalBackStart;
        s->m_clrGridHeaderAllPressedBackFinish = s->m_clrGridHeaderAllNormalBackFinish;
        tmAll.ReadColor(_T("PressedBackStart"), s->m_clrGridHeaderAllPressedBackStart);
        s->m_clrGridHeaderAllPressedBackFinish = s->m_clrGridHeaderAllPressedBackStart;
        tmAll.ReadColor(_T("PressedBackFinish"), s->m_clrGridHeaderAllPressedBackFinish);
        tmAll.ReadColor(_T("NormalBorderHighlighted"), s->m_clrGridHeaderAllNormalBorderHighlighted);
        s->m_clrGridHeaderAllNormalBorderShadow = s->m_clrGridHeaderAllNormalBorderHighlighted;
        tmAll.ReadColor(_T("NormalBorderShadow"), s->m_clrGridHeaderAllNormalBorderShadow);
        s->m_clrGridHeaderAllPressedBorderHighlighted = s->m_clrGridHeaderAllNormalBorderHighlighted;
        s->m_clrGridHeaderAllPressedBorderShadow = s->m_clrGridHeaderAllNormalBorderShadow;
        tmAll.ReadColor(_T("PressedBorderHighlighted"), s->m_clrGridHeaderAllPressedBorderHighlighted);
        s->m_clrGridHeaderAllPressedBorderShadow = s->m_clrGridHeaderAllPressedBorderHighlighted;
        tmAll.ReadColor(_T("PressedBorderShadow"), s->m_clrGridHeaderAllPressedBorderShadow);

        if (tmAll.ReadColor(_T("NormalSignStart"), s->m_clrGridHeaderAllNormalSignStart)) {
          s->m_clrGridHeaderAllNormalSignFinish = s->m_clrGridHeaderAllNormalSignStart;
        }

        tmAll.ReadColor(_T("NormalSignFinish"), s->m_clrGridHeaderAllNormalSignFinish);
        s->m_clrGridHeaderAllPressedSignStart = s->m_clrGridHeaderAllNormalSignStart;
        s->m_clrGridHeaderAllPressedSignFinish = s->m_clrGridHeaderAllNormalSignFinish;

        if (tmAll.ReadColor(_T("PressedSignStart"), s->m_clrGridHeaderAllPressedSignStart)) {
          s->m_clrGridHeaderAllPressedSignFinish = s->m_clrGridHeaderAllPressedSignStart;
        }

        tmAll.ReadColor(_T("PressedSignFinish"), s->m_clrGridHeaderAllPressedSignFinish);
      }

      COLORREF clr;

      if (tmHeader.ReadColor(_T("Separator"), clr)) {
        s->m_penGridSeparator.DeleteObject();
        s->m_penGridSeparator.CreatePen = (clr);
      }
    }

    COLORREF clr = globalData.clrBtnLight;

    if (tmItem.ReadColor(_T("ExpandBoxLight"), clr)) {
      s->m_penGridExpandBoxLight.DeleteObject();
      s->m_penGridExpandBoxLight.CreatePen = (clr);
    }

    clr = globalData.clrBtnShadow;

    if (tmItem.ReadColor(_T("ExpandBoxDark"), clr)) {
      s->m_penGridExpandBoxDark.DeleteObject();
      s->m_penGridExpandBoxDark.CreatePen = (clr);
    }

    tmItem.ReadColor(_T("LeftOffset"), s->m_clrGridLeftOffset);
    tmItem.ReadColor(_T("GroupLine"), s->m_clrGridGroupLine);
    s->m_clrGridGroupSubLine = s->m_clrGridGroupLine;
    tmItem.ReadColor(_T("GroupSubLine"), s->m_clrGridGroupSubLine);

    if (!tmItem.ReadGridColors(_T("COLORS"), s->m_GridColors)) {
      s->m_GridColors.s->m_clrHorzLine                     = s->m_clrToolBarGradientDark;
      s->m_GridColors.s->m_clrVertLine                     = s->m_clrToolBarBottomLine;
      s->m_GridColors.s->m_EvenColors.s->m_clrBackground      = s->m_clrToolBarGradientLight;
      s->m_GridColors.s->m_EvenColors.s->m_clrText            = s->m_clrToolBarBtnText;
      s->m_GridColors.s->m_OddColors.s->m_clrBackground       = s->m_clrToolBarGradientDark;
      s->m_GridColors.s->m_OddColors.s->m_clrText             = s->m_clrToolBarBtnText;
      s->m_GridColors.s->m_SelColors.s->m_clrBackground       = s->m_clrRibbonComboBtnHighlightedFinish;
      s->m_GridColors.s->m_GroupColors.s->m_clrBackground     = s->m_clrToolBarGradientDark;
      s->m_GridColors.s->m_GroupColors.s->m_clrGradient       = s->m_clrToolBarGradientLight;
      s->m_GridColors.s->m_GroupColors.s->m_clrText           = s->m_clrToolBarBtnText;
      s->m_GridColors.s->m_GroupSelColors.s->m_clrBackground  = s->m_clrRibbonComboBtnHighlightedStart;
      s->m_GridColors.s->m_GroupSelColors.s->m_clrGradient    = s->m_clrRibbonComboBtnHighlightedFinish;
      s->m_GridColors.s->m_HeaderSelColors.s->m_clrBackground = s->m_clrRibbonComboBtnHighlightedStart;
      s->m_GridColors.s->m_HeaderSelColors.s->m_clrGradient   = s->m_clrRibbonComboBtnHighlightedFinish;
      s->m_GridColors.s->m_HeaderSelColors.s->m_clrBorder     = s->m_clrRibbonComboBtnBorderHighlighted;
      s->m_GridColors.s->m_LeftOffsetColors.s->m_clrBackground = s->m_clrToolBarGradientDark;
      s->m_GridColors.s->m_LeftOffsetColors.s->m_clrBorder    = s->m_GridColors.s->m_clrHorzLine;
    }
  }

  s->m_clrOutlookCaptionTextNormal   = s->m_clrCaptionBarText;
  s->m_clrOutlookPageTextNormal      = s->m_clrOutlookCaptionTextNormal;
  s->m_clrOutlookPageTextHighlighted = s->m_clrOutlookPageTextNormal;
  s->m_clrOutlookPageTextPressed     = s->m_clrOutlookPageTextNormal;

  if (tm.ExcludeTag(_T("OUTLOOK"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    const char* str;

    if (tmItem.ExcludeTag(_T("CAPTION"), str)) {
      CBCGPTagManager tmCaption(str);
      tmCaption.ReadColor(_T("TextNormal"), s->m_clrOutlookCaptionTextNormal);
    }

    if (tmItem.ExcludeTag(_T("PAGEBUTTON"), str)) {
      CBCGPTagManager tmPage(str);
      tmPage.ReadControlRenderer(_T("BACK"), s->m_ctrlOutlookWndPageBtn, MakeResourceID(_T("IDB_OFFICE2007_OUTLOOK_BTN_PAGE")));
      tmPage.ReadColor(_T("TextNormal"), s->m_clrOutlookPageTextNormal);
      tmPage.ReadColor(_T("TextHighlighted"), s->m_clrOutlookPageTextHighlighted);
      tmPage.ReadColor(_T("TextPressed"), s->m_clrOutlookPageTextPressed);
    }

    if (tmItem.ExcludeTag(_T("BAR"), str)) {
      CBCGPTagManager tmBar(str);
      tmBar.ReadControlRenderer(_T("BACK"), s->m_ctrlOutlookWndBar, MakeResourceID(_T("IDB_OFFICE2007_OUTLOOK_BAR_BACK")));
    }
  }

  // Popup Window:
  s->m_clrPopupGradientLight = s->m_clrBtnGradientLight;
  s->m_clrPopupGradientDark = s->m_clrBtnGradientDark;

  if (tm.ExcludeTag(_T("POPUP"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadColor(_T("GradientFillLight"), s->m_clrPopupGradientLight);
    tmItem.ReadColor(_T("GradientFillDark"), s->m_clrPopupGradientDark);
  }

  if (tm.ExcludeTag(_T("SLIDER"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadControlRenderer(_T("THUMB_B"), s->m_ctrlSliderThumb[0], MakeResourceID(_T("IDB_OFFICE2007_SLIDER_THUMB_B")));
    tmItem.ReadControlRenderer(_T("THUMB_H"), s->m_ctrlSliderThumb[1], MakeResourceID(_T("IDB_OFFICE2007_SLIDER_THUMB_H")));
    tmItem.ReadControlRenderer(_T("THUMB_T"), s->m_ctrlSliderThumb[2], MakeResourceID(_T("IDB_OFFICE2007_SLIDER_THUMB_T")));
    tmItem.ReadControlRenderer(_T("THUMB_R"), s->m_ctrlSliderThumb[3], MakeResourceID(_T("IDB_OFFICE2007_SLIDER_THUMB_R")));
    tmItem.ReadControlRenderer(_T("THUMB_V"), s->m_ctrlSliderThumb[4], MakeResourceID(_T("IDB_OFFICE2007_SLIDER_THUMB_V")));
    tmItem.ReadControlRenderer(_T("THUMB_L"), s->m_ctrlSliderThumb[5], MakeResourceID(_T("IDB_OFFICE2007_SLIDER_THUMB_L")));
  }

  if (hinstResOld != NULL) {
    AfxSetResourceHandle(hinstResOld);
  }

  CBCGPTagManager::SetBaseColor(0, 0);
}
BOOL CBCGPVisualManager2007::IsWindowActive(CWnd* pWnd)
{
  BOOL bActive = FALSE;
  HWND hWnd = pWnd->GetSafeHwnd();

  if (hWnd != NULL) {
    if (!s->m_ActivateFlag.Lookup(pWnd->GetSafeHwnd(), bActive)) {
      //ASSERT(FALSE);
      bActive = TRUE;
    }
  }

  return bActive;
}
BOOL CBCGPVisualManager2007::OnNcActivate(CWnd* pWnd, BOOL bActive)
{
  ASSERT(pWnd);

  if (pWnd->GetSafeHwnd() == NULL) {
    return FALSE;
  }

  if (globalData.DwmIsCompositionEnabled()) {
    return FALSE;
  }

  // stay active if WF_STAYACTIVE bit is on
  if (pWnd->s->m_nFlags & WF_STAYACTIVE) {
    bActive = TRUE;
  }

  // but do not stay active if the window is disabled
  if (!pWnd->IsWindowEnabled()) {
    bActive = FALSE;
  }

  s->m_ActivateFlag[pWnd->GetSafeHwnd()] = bActive;
  pWnd->SendMessage(Ws->m_NCPAINT, 0, 0);
  return TRUE;
}
void CBCGPVisualManager2007::DrawNcBtn(HDDC hDC, RECT  rect, UINT nButton,
    int state, BOOL bSmall,
    BOOL bActive, BOOL bMDI/* = FALSE*/)
{
  ASSERT(hDC);
  CBCGPToolBarImages* pImage = NULL;
  int nIndex = bSmall ? 1 : 0;

  if (nButton == SC_CLOSE) {
    pImage = &s->m_SysBtnClose[nIndex];
  }
  else if (nButton == SC_MINIMIZE) {
    pImage = &s->m_SysBtnMinimize[nIndex];
  }
  else if (nButton == SC_MAXIMIZE) {
    pImage = &s->m_SysBtnMaximize[nIndex];
  }
  else if (nButton == SC_RESTORE) {
    pImage = &s->m_SysBtnRestore[nIndex];
  }
  else if (nButton == SC_CONTEXTHELP) {
    pImage = &s->m_SysBtnHelp[nIndex];
  }

  CBCGPToolBarImages::ImageAlignHorz horz = GetRibbonImageScale() != 1. ? CBCGPToolBarImages::ImageAlignHorzStretch : CBCGPToolBarImages::ImageAlignHorzCenter;
  CBCGPToolBarImages::ImageAlignVert vert = GetRibbonImageScale() != 1. ? CBCGPToolBarImages::ImageAlignVertStretch : CBCGPToolBarImages::ImageAlignVertCenter;
  RECT rtBtnImage(cPOINT(0, 0), pImage->GetImageSize());

  if (!bActive) {
    rtBtnImage OffsetRect(&, 0, pImage->GetImageSize().cy * 3);
  }
  else {
    if (state != ButtonsIsRegular) {
      if (!IsBeta() && bMDI) {
        s->m_ctrlRibbonBtn[0].Draw(hDC, rect, state == ButtonsIsHighlighted ? 0 : 1);
      }
      else {
        s->m_SysBtnBack[nIndex].Draw(hDC, rect, state == ButtonsIsHighlighted ? 0 : 1);
      }

      rtBtnImage OffsetRect(&, 0, pImage->GetImageSize().cy *
          (state == ButtonsIsHighlighted ? 1 : 2));
    }
  }

  if (pImage != NULL) {
    pImage->DrawEx(hDC, rect, 0, horz, vert, rtBtnImage);
  }
}
void CBCGPVisualManager2007::DrawNcText(HDDC hDC, RECT& rect,
    const char* strTitle,
    const char* strDocument,
    BOOL bPrefix, BOOL bActive, BOOL bIsRTL,
    BOOL bTextCenter,
    BOOL bGlass/* = FALSE*/, int nGlassGlowSize/* = 0*/,
    COLORREF clrGlassText/* = (COLORREF)-1*/)
{
  if ((strTitle.IsEmpty() && strDocument.IsEmpty()) ||
      rect.right <= rect.left) {
    return;
  }

  ASSERT(hDC);
  int nOldMode = hDC->SetBkMode(TRANSPARENT);
  COLORREF clrOldText = globalData.clrWindowText;
  DWORD dwTextStyle = DT_END_ELLIPSIS | DT_SINGLELINE | DT_VCENTER |
      (bIsRTL ? DT_RTLREADING : 0);

  if (strDocument.IsEmpty()) {
    COLORREF clrText = bActive
        ? s->m_clrAppCaptionActiveTitleText
        : s->m_clrAppCaptionInactiveTitleText;
    int widthFull = RCW(&rect);
    int width = FontGetTextExtent(hDC, strTitle).cx;

    if (bTextCenter && width < widthFull) {
      rect.left += (widthFull - width) / 2;
    }

    rect.right = MIN(rect.left + width, rect.right);

    if (rect.right > rect.left) {
      if (bGlass) {
        DrawTextOnGlass(hDC, strTitle, rect, dwTextStyle, nGlassGlowSize, clrGlassText);
      }
      else {
        hDC->SetTextColor(clrText);
        draw_textR(hDC, strTitle, rect, dwTextStyle);
      }
    }
  }
  else {
    const char* str1 = bPrefix ? strDocument : strTitle;
    const char* str2 = bPrefix ? strTitle : strDocument;
    COLORREF clrText1 = bActive
        ? s->m_clrAppCaptionActiveText
        : s->m_clrAppCaptionInactiveText;
    COLORREF clrText2 = bActive
        ? s->m_clrAppCaptionActiveTitleText
        : s->m_clrAppCaptionInactiveTitleText;

    if (!bPrefix) {
      COLORREF clr = clrText1;
      clrText1 = clrText2;
      clrText2 = clr;
    }

    int widthFull = RCW(&rect);
    SIZE sz1 = FontGetTextExtent(hDC, str1);
    SIZE sz2 = FontGetTextExtent(hDC, str2);
    int width = sz1.cx + sz2.cx;
    int left = rect.left;

    if (bTextCenter && width < widthFull) {
      rect.left += (widthFull - width) / 2;
    }

    rect.right = MIN(rect.left + width, rect.right);

    if (bIsRTL) {
      if (width <= RCW(&rect)) {
        rect.left += sz2.cx;
      }
      else {
        if (sz1.cx < RCW(&rect)) {
          rect.left += MAX(0, sz2.cx + (RCW(&rect) - width));
        }
      }
    }

    if (bGlass) {
      DrawTextOnGlass(hDC, str1, rect, dwTextStyle, nGlassGlowSize, clrGlassText);
    }
    else {
      hDC->SetTextColor(clrText1);
      draw_textR(hDC, str1, rect, dwTextStyle);
    }

    if (bIsRTL) {
      if (width <= (rect.right - left)) {
        rect.right = rect.left;
        rect.left  = rect.right - sz2.cx;
      }
      else {
        rect.left = left;
        rect.right -= sz1.cx;
      }
    }
    else {
      rect.left += sz1.cx;
    }

    if (rect.right > rect.left) {
      if (bGlass) {
        DrawTextOnGlass(hDC, str2, rect, dwTextStyle, nGlassGlowSize, clrGlassText);
      }
      else {
        hDC->SetTextColor(clrText2);
        draw_textR(hDC, str2, rect, dwTextStyle);
      }
    }
  }

  hDC->SetBkMode(nOldMode);
  hDC->SetTextColor(clrOldText);
}
void CBCGPVisualManager2007::DrawNcCaption(HDDC hDC, RECT rectCaption,
    DWORD dwStyle, DWORD dwStyleEx,
    const char* strTitle, const char* strDocument,
    HICON hIcon, BOOL bPrefix, BOOL bActive,
    BOOL bTextCenter,
    const CObList& lstSysButtons)
{
  const BOOL bIsRTL           = (dwStyleEx & WS_EX_LAYOUTRTL) == WS_EX_LAYOUTRTL;
  const BOOL bIsSmallCaption  = (dwStyleEx & WS_EX_TOOLWINDOW) != 0;
  const int nSysCaptionHeight = bIsSmallCaption ? GetSystemMetrics(Ss->m_CYSMCAPTION) : GetSystemMetrics(Ss->m_CYCAPTION);
  SIZE szSysBorder(GetSystemBorders(FALSE));
  CDC memDC;
  memDC.CreateCompatibleDC(hDC);
  CBitmap memBmp;
  memBmp.CreateCompatibleBitmap(hDC, rectCaption RCW(&), rectCaption RCH(&));
  CBitmap* pBmpOld = memDC.SelectObject(&memBmp);
  memDC.BitBlt(0, 0, rectCaption RCW(&), rectCaption RCH(&), hDC, 0, 0, SRCCOPY);
  BOOL bMaximized = (dwStyle & WS_MAXIMIZE) == WS_MAXIMIZE;
  {
    if (IsBeta()) {
      COLORREF clr1  = bActive
          ? s->m_clrAppCaptionActiveStart
          : s->m_clrAppCaptionInactiveStart;
      COLORREF clr2  = bActive
          ? s->m_clrAppCaptionActiveFinish
          : s->m_clrAppCaptionInactiveFinish;
      RECT rectCaption1(rectCaption);
      RECT rectBorder(s->m_ctrlMainBorderCaption.GetParams().s->m_rectSides);
      rectCaption1 DeflateRect(&, rectBorder.left, rectBorder.top,
          rectBorder.right, rectBorder.bottom);
      {
        CBCGPDrawManager dm(memDC);
        dm.Fill4ColorsGradient(rectCaption1, clr1, clr2, clr2, clr1, FALSE);
      }
      s->m_ctrlMainBorderCaption.DrawFrame(&memDC, rectCaption, bActive ? 0 : 1);
    }
    else {
      RECT rectBorderCaption(rectCaption);

      if (bMaximized) {
        rectBorderCaption OffsetRect(&, -rectBorderCaption.TopLeft());
        rectBorderCaption.bottom -= szSysBorder.cy;
      }

      s->m_ctrlMainBorderCaption.Draw(&memDC, rectBorderCaption, bActive ? 0 : 1);
    }
  }
  RECT rect(rectCaption);
  DeflateRect(&rect, szSysBorder.cx, szSysBorder.cy, szSysBorder.cx, 0);
  rect.top = rect.bottom - nSysCaptionHeight - 1;

  // Draw icon:
  if (hIcon != NULL && !bIsSmallCaption) {
    SIZE szIcon(GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON));
    long x = rect.left + (bMaximized ? szSysBorder.cx : 0) + 2;
    long y = rect.top + MAX(0, (nSysCaptionHeight - szIcon.cy) / 2);
    ::DrawIconEx(memDC.GetSafeHdc(), x, y, hIcon, szIcon.cx, szIcon.cy,
        0, NULL, DI_NORMAL);
    rect.left = x + szIcon.cx + (bMaximized ? szSysBorder.cx : 4);
  }

  // Draw system buttons:
  int xButtonsRight = rect.right;

  for (POSITION pos = lstSysButtons.GetHeadPosition(); pos != NULL;) {
    CBCGPFrameCaptionButton* pButton = (CBCGPFrameCaptionButton*)
        lstSysButtons.GetNext(pos);

    int state = ButtonsIsRegular;

    if (bPushed && bFocused) {
      state = ButtonsIsPressed;
    }
    else if (bFocused) {
      state = ButtonsIsHighlighted;
    }

    UINT uiHit = pButton->GetHit();
    UINT nButton = 0;

    switch (uiHit) {
    case HTCLOSE_BCG:
      nButton = SC_CLOSE;
      break;

    case HTMAXBUTTON_BCG:
      nButton =
          (dwStyle & WS_MAXIMIZE) == WS_MAXIMIZE ? SC_RESTORE : SC_MAXIMIZE;
      break;

    case HTMINBUTTON_BCG:
      nButton =
          (dwStyle & WS_MINIMIZE) == WS_MINIMIZE ? SC_RESTORE : SC_MINIMIZE;
      break;

    case HTHELPBUTTON_BCG:
      nButton = SC_CONTEXTHELP;
      break;
    }

    RECT rectBtn(rect);

    if (bMaximized) {
      rectBtn OffsetRect(&, szSysBorder.cx, szSysBorder.cy);
    }

    DrawNcBtn(&memDC, rectBtn, nButton, state, FALSE, bActive, FALSE);
    xButtonsRight = MIN(xButtonsRight, rect.left);
  }

  // Draw text:
  if ((!strTitle.IsEmpty() || !strDocument.IsEmpty()) &&
      rect.left < rect.right) {
    CFont* pOldFont = (CFont*)memDC.SelectObject(&s->m_AppCaptionFont);
    RECT rectText = rect;
    rectText.right = xButtonsRight - 1;
    DrawNcText(&memDC, rectText, strTitle, strDocument, bPrefix, bActive, bIsRTL, bTextCenter);
    memDC.SelectObject(pOldFont);
  }

  hDC->BitBlt(rectCaption.left, rectCaption.top, rectCaption RCW(&), rectCaption RCH(&),
      &memDC, 0, 0, SRCCOPY);
  memDC.SelectObject(pBmpOld);
}
CBCGPRibbonBar* CBCGPVisualManager2007::GetRibbonBar(CWnd* pWnd)
{
  CBCGPRibbonBar* pBar = NULL;

  if (pWnd == NULL) {
    pWnd = AfxGetMainWnd();
  }

  if (pWnd->GetSafeHwnd() == NULL) {
    return NULL;
  }

  if (pWnd->IsKindOf(RUNTIME_CLASS(CBCGPFrameWnd))) {
    pBar = ((CBCGPFrameWnd*) pWnd)->GetRibbonBar();
  }
  else if (pWnd->IsKindOf(RUNTIME_CLASS(CBCGPMDIFrameWnd))) {
    pBar = ((CBCGPMDIFrameWnd*) pWnd)->GetRibbonBar();
  }

  return pBar;
}
BOOL CBCGPVisualManager2007::IsRibbonPresent(CWnd* pWnd)
{
  CBCGPRibbonBar* pBar = GetRibbonBar(pWnd);
  return pBar != NULL && pBar->IsWindowVisible();
}
BOOL CBCGPVisualManager2007::OnNcPaint(CWnd* pWnd, const CObList& lstSysButtons, RECT rectRedraw)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnNcPaint(pWnd, lstSysButtons, rectRedraw);
  }

  ASSERT(pWnd);

  if (pWnd->GetSafeHwnd() == NULL) {
    return FALSE;
  }

  CWindowDC hDC(pWnd);

  if (hDC.GetSafeHdc() != NULL) {
    CRgn rgn;

    if (!rectRedraw.IsRectEmpty()) {
      rgn.CreateRectRgnIndirect(rectRedraw);
      hDC.SelectClipRgn(&rgn);
    }

    BOOL bRibbonCaption = FALSE;
    RECT rtWindow;
    pWnd->GetWindowRect(rtWindow);
    pWnd->ScreenToClient(rtWindow);
    RECT rtClient;
    pWnd->GetClientRect(rtClient);
    rtClient OffsetRect(&, -rtWindow.TopLeft());
    hDC.ExcludeClipRect(rtClient);
    rtWindow OffsetRect(&, -rtWindow.TopLeft());
    BOOL bActive = IsWindowActive(pWnd);
    RECT rectCaption(rtWindow);
    SIZE szSysBorder(GetSystemBorders(bRibbonCaption));
    BOOL bDialog = pWnd->IsKindOf(RUNTIME_CLASS(CBCGPDialog)) || pWnd->IsKindOf(RUNTIME_CLASS(CBCGPPropertySheet));

    if (bDialog && (pWnd->GetStyle() & WS_THICKFRAME) == 0) {
      szSysBorder.cy = GetSystemMetrics(Ss->m_CYFIXEDFRAME);
    }

    rectCaption.bottom = rectCaption.top + szSysBorder.cy;
    const DWORD dwStyle = pWnd->GetStyle();
    BOOL bMaximized = (dwStyle & WS_MAXIMIZE) == WS_MAXIMIZE;

    if (!bRibbonCaption) {
      const DWORD dwStyleEx = pWnd->GetExStyle();
      const BOOL bIsSmallCaption = (dwStyleEx & WS_EX_TOOLWINDOW) != 0;
      const int nSysCaptionHeight = bIsSmallCaption ? GetSystemMetrics(Ss->m_CYSMCAPTION) : GetSystemMetrics(Ss->m_CYCAPTION);
      rectCaption.bottom += nSysCaptionHeight;
      BOOL bDestroyIcon = FALSE;
      HICON hIcon = globalUtils.GetWndIcon(pWnd, &bDestroyIcon);
      const char* strText;
      pWnd->GetWindowText(strText);
      const char* strTitle(strText);
      const char* strDocument;
      BOOL bPrefix = FALSE;

      if ((dwStyle & FWS_ADDTOTITLE) == FWS_ADDTOTITLE) {
        bPrefix = (dwStyle & FWS_PREFIXTITLE) == FWS_PREFIXTITLE;
        CFrameWnd* pFrameWnd = DYNAMIC_DOWNCAST(CFrameWnd, pWnd);

        if (pFrameWnd != NULL) {
          strTitle = pFrameWnd->GetTitle();

          if (!strTitle.IsEmpty()) {
            if (strText.GetLength() >= strTitle.GetLength()) {
              if (bPrefix) {
                int pos = strText.Find(strTitle, strText.GetLength() - strTitle.GetLength());

                if (pos != -1) {
                  strTitle = strText.Right(strTitle.GetLength() + 3);
                  strDocument = strText.Left(strText.GetLength() - strTitle.GetLength());
                }
              }
              else {
                int pos = strText.Find(strTitle);

                if (pos != -1) {
                  strTitle = strText.Left(strTitle.GetLength() + 3);
                  strDocument = strText.Right(strText.GetLength() - strTitle.GetLength());
                }
              }
            }
          }
          else {
            strDocument = strText;
          }
        }
      }

      if (bMaximized) {
        rectCaption InflateRect(&, szSysBorder.cx, szSysBorder.cy, szSysBorder.cx, 0);
      }

      DrawNcCaption(&hDC, rectCaption, dwStyle, dwStyleEx,
          strTitle, strDocument, hIcon, bPrefix, bActive, s->m_bNcTextCenter,
          lstSysButtons);

      if (bDestroyIcon) {
        ::DestroyIcon(hIcon);
      }

      if (bMaximized) {
        return TRUE;
      }
    }
    else {
      if (bMaximized) {
        return TRUE;
      }

      rectCaption.bottom += pBar->GetCaptionHeight();

      if (IsBeta()) {
        RECT rectBorder(s->m_ctrlMainBorderCaption.GetParams().s->m_rectSides);
        COLORREF clr1  = bActive
            ? s->m_clrAppCaptionActiveStart
            : s->m_clrAppCaptionInactiveStart;
        COLORREF clr2  = bActive
            ? s->m_clrAppCaptionActiveFinish
            : s->m_clrAppCaptionInactiveFinish;
        RECT rectCaption2(rectCaption);
        rectCaption2 DeflateRect(&, rectBorder.left, rectBorder.top,
            rectBorder.right, rectBorder.bottom);
        {
          CBCGPDrawManager dm(hDC);
          dm.Fill4ColorsGradient(rectCaption2, clr1, clr2, clr2, clr1, FALSE);
        }
        s->m_ctrlMainBorderCaption.DrawFrame(&hDC, rectCaption, bActive ? 0 : 1);
      }
      else {
        s->m_ctrlMainBorderCaption.Draw(&hDC, rectCaption, bActive ? 0 : 1);
      }
    }

    rtWindow.top = rectCaption.bottom;
    hDC.ExcludeClipRect(rectCaption);

    if (pWnd->IsKindOf(RUNTIME_CLASS(CMDIChildWnd)) ||
        (bDialog && !s->m_ctrlDialogBorder.IsValid())) {
      if (bDialog) {
        RECT rtDialog(rtWindow);
        rtDialog DeflateRect(&, 1, 0, 1, 1);
        hDC.FillRect(rtDialog, &GetDlgBackBrush(pWnd));
        hDC.ExcludeClipRect(rtDialog);
      }

      s->m_ctrlMDIChildBorder.DrawFrame(&hDC, rtWindow, bActive ? 0 : 1);
    }
    else if (bDialog) {
      s->m_ctrlDialogBorder.DrawFrame(&hDC, rtWindow, bActive ? 0 : 1);
    }
    else {
      s->m_ctrlMainBorder.DrawFrame(&hDC, rtWindow, bActive ? 0 : 1);
    }

    if (bDialog) {
      hDC.SelectClipRgn(NULL);
      return TRUE;
    }

    //-------------------------------
    // Find status bar extended area:
    //-------------------------------
    RECT rectExt(0, 0, 0, 0);
    BOOL bExtended    = FALSE;
    BOOL bBottomFrame = FALSE;
    BOOL bIsStatusBar = FALSE;
    CWnd* pStatusBar = pWnd->GetDescendantWindow(AFX_IDW_STATUS_BAR, TRUE);

    if (pStatusBar->GetSafeHwnd() != NULL && pStatusBar->IsWindowVisible()) {
      CBCGPStatusBar* pClassicStatusBar = DYNAMIC_DOWNCAST(
          CBCGPStatusBar, pStatusBar);

      if (pClassicStatusBar != NULL) {
        bExtended = pClassicStatusBar->GetExtendedArea(rectExt);
        bIsStatusBar = TRUE;
      }
      else {
        CBCGPRibbonStatusBar* pRibbonStatusBar = DYNAMIC_DOWNCAST(
            CBCGPRibbonStatusBar, pStatusBar);

        if (pRibbonStatusBar != NULL) {
          bExtended    = pRibbonStatusBar->GetExtendedArea(rectExt);
          bBottomFrame = pRibbonStatusBar->IsBottomFrame();
          bIsStatusBar = TRUE;
        }
      }
    }

    if (bIsStatusBar) {
      RECT rectStatus;
      pStatusBar->GetClientRect(rectStatus);
      int nHeight = rectStatus RCH(&);
      rectStatus.bottom = rtWindow.bottom;
      rectStatus.top    = rectStatus.bottom - nHeight - (bBottomFrame ? -1 : szSysBorder.cy);
      rectStatus.left   = rtWindow.left;
      rectStatus.right  = rtWindow.right;

      if (bExtended) {
        rectExt.left   = rectStatus.right - rectExt RCW(&) - szSysBorder.cx;
        rectExt.top    = rectStatus.top;
        rectExt.bottom = rectStatus.bottom;
        rectExt.right  = rtWindow.right;
      }

      s->m_ctrlStatusBarBack.Draw(&hDC, rectStatus, bActive ? 0 : 1);

      if (bExtended) {
        rectExt.left -= s->m_ctrlStatusBarBack_Ext.GetParams().s->m_rectCorners.left;
        s->m_ctrlStatusBarBack_Ext.Draw(&hDC, rectExt, bActive ? 0 : 1);
      }
    }

    hDC.SelectClipRgn(NULL);
    return TRUE;
  }

  return CBCGPVisualManager2003::OnNcPaint(pWnd, lstSysButtons, rectRedraw);
}
BOOL CBCGPVisualManager2007::OnSetWindowRegion(CWnd* pWnd, SIZE sizeWindow)
{
  ASSERT(pWnd);

  if (pWnd->GetSafeHwnd() == NULL) {
    return FALSE;
  }

  if (!CanDrawImage()) {
    return FALSE;
  }

  if (globalData.DwmIsCompositionEnabled()) {
    return FALSE;
  }

  SIZE sz(0, 0);
  BOOL bMainWnd = FALSE;

  if (DYNAMIC_DOWNCAST(CBCGPPopupMenu, pWnd) != NULL) {
    sz  = SIZE(3, 3);
  }
  else {
    if (pWnd->IsZoomed()) {
      pWnd->SetWindowRgn(NULL, TRUE);
      return TRUE;
    }

    sz  = SIZE(9, 9);
    bMainWnd = TRUE;
  }

  if (sz != SIZE(0, 0)) {
    CRgn rgn;
    BOOL bCreated = FALSE;
    bCreated = rgn.CreateRoundRectRgn(0, 0, sizeWindow.cx + 1, sizeWindow.cy + 1, sz.cx, sz.cy);

    if (bCreated) {
      if (pWnd->IsKindOf(RUNTIME_CLASS(CMDIChildWnd)) ||
          pWnd->IsKindOf(RUNTIME_CLASS(CBCGPDialog)) ||
          pWnd->IsKindOf(RUNTIME_CLASS(CBCGPPropertySheet))) {
        CRgn rgnWinodw;
        rgnWinodw.CreateRectRgn(0, sz.cy, sizeWindow.cx, sizeWindow.cy);
        rgn.CombineRgn(&rgn, &rgnWinodw, RGN_OR);
      }

      pWnd->SetWindowRgn((HRGN)rgn.Detach(), TRUE);
      return TRUE;
    }
  }

  return FALSE;
}
SIZE CBCGPVisualManager2007::GetNcBtnSize(BOOL bSmall)
{
  return s->m_szNcBtnSize[bSmall ? 1 : 0];
}
void CBCGPVisualManager2007::DrawSeparator(HDDC hDC, RECT  rect, BOOL bHorz)
{
  DrawSeparator(hDC, rect, s->m_penSeparator, s->m_penSeparator2, bHorz);
}
void CBCGPVisualManager2007::DrawSeparator(HDDC hDC, RECT  rect, COLORREF pen1, COLORREF pen2, BOOL bHorz)
{
  RECT rect1(rect);
  RECT rect2;

  if (bHorz) {
    rect1.top += RCH(&rect) / 2 - 1;
    rect1.bottom = rect1.top;
    rect2 = rect1;
    rect2 OffsetRect(&, 0, 1);
  }
  else {
    rect1.left += RCW(&rect) / 2 - 1;
    rect1.right = rect1.left;
    rect2 = rect1;
    rect2 OffsetRect(&, 1, 0);
  }

  if (bIsDrawOnGlass) {

    LOGPEN logpen;
    pen1.GetLogPen(&logpen);
    draw_line(hDC, rect1.left, rect1.top, rect1.right, rect1.bottom, logpen.lopnColor);
    pen2.GetLogPen(&logpen);
    draw_line(hDC, rect2.left, rect2.top, rect2.right, rect2.bottom, logpen.lopnColor);
  }
  else {
    COLORREF _clr = (pen1);
    TMoveTo(hDC, rect1.TopLeft());
    _LineTo(hDC, rect1.BottomRight());
    _clr = (pen2);
    TMoveTo(hDC, rect2.TopLeft());
    _LineTo(hDC, rect2.BottomRight());

  }
}
COLORREF CBCGPVisualManager2007::GetCaptionBarTextColor(CBCGPCaptionBar* pBar)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetCaptionBarTextColor(pBar);
  }

  return s->m_clrCaptionBarText;
}
void CBCGPVisualManager2007::OnDrawCaptionBarInfoArea(HDDC hDC,  RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawCaptionBarInfoArea(hDC, pBar, rect);
    return;
  }

  ASSERT(hDC);

  FillGradient(hDC, rect, globalData.clrBtnFace, _RGB(255, 255, 255));
  draw_3drect_inR(hDC, &rect, globalData.clrBtnDkShadow, globalData.clrBtnDkShadow);
}
void CBCGPVisualManager2007::OnFillOutlookPageButton(HDDC hDC,
    RECT  rect,
    BOOL bIsHighlighted, BOOL bIsPressed,
    COLORREF clrText)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillOutlookPageButton(hDC, rect, bIsHighlighted, bIsPressed, clrText);
    return;
  }

  ASSERT(hDC);
  RECT rt(rect);

  if (s->m_ctrlOutlookWndPageBtn.IsValid()) {
    int index = 0;

    if (bIsPressed) {
      index = 2;

      if (bIsHighlighted) {
        index = 3;
      }

      clrText = s->m_clrOutlookPageTextPressed;
    }
    else if (bIsHighlighted) {
      index = 1;
      clrText = s->m_clrOutlookPageTextHighlighted;
    }

    s->m_ctrlOutlookWndPageBtn.Draw(hDC, rt, index);
  }
  else {
    COLORREF clr1 = s->m_clrBtnGradientDark;
    COLORREF clr2 = s->m_clrBtnGradientLight;

    if (bIsPressed) {
      if (bIsHighlighted) {
        clr1 = s->m_clrHighlightDnGradientDark;
        clr2 = s->m_clrHighlightDnGradientLight;
      }
      else {
        clr1 = s->m_clrHighlightCheckedGradientLight;
        clr2 = s->m_clrHighlightCheckedGradientDark;
      }
    }
    else if (bIsHighlighted) {
      clr1 = s->m_clrHighlightGradientDark;
      clr2 = s->m_clrHighlightGradientLight;
    }

    FillGradient(hDC, rect, clr1, clr2, TRUE);
  }

  clrText = s->m_clrOutlookPageTextNormal;

  if (bIsPressed) {
    clrText = s->m_clrOutlookPageTextPressed;
  }
  else if (bIsHighlighted) {
    clrText = s->m_clrOutlookPageTextHighlighted;
  }
}
void CBCGPVisualManager2007::OnDrawOutlookPageButtonBorder(
    HDDC hDC, RECT& rectBtn, BOOL bIsHighlighted, BOOL bIsPressed)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawOutlookPageButtonBorder(hDC, rectBtn, bIsHighlighted, bIsPressed);
    return;
  }

  draw_3drect_inR(hDC, &rectBtn, globalData.clrBtnHilite, s->m_clrToolBarBottomLine);
}
void CBCGPVisualManager2007::OnDrawOutlookBarSplitter(HDDC hDC, RECT rectSplitter)
{
  ASSERT(hDC);

  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawOutlookBarSplitter(hDC, rectSplitter);
    return;
  }

  FillGradient(hDC, rectSplitter,
      s->m_clrCaptionBarGradientDark,
      s->m_clrCaptionBarGradientLight,
      TRUE);
  rectSplitter OffsetRect(&, 0, 1);
  s->m_ToolBarTear.DrawEx(hDC, rectSplitter, 0, CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter);
  rectSplitter OffsetRect(&, 0, -1);
  COLORREF _clr = (&s->m_penBottomLine);
  TMoveTo(hDC, rectSplitter.left, rectSplitter.top);
  _LineTo(hDC, rectSplitter.right, rectSplitter.top);
  TMoveTo(hDC, rectSplitter.left, rectSplitter.bottom - 1);
  _LineTo(hDC, rectSplitter.right, rectSplitter.bottom - 1);

}
void CBCGPVisualManager2007::OnFillOutlookBarCaption(HDDC hDC, RECT rectCaption, COLORREF clrText)
{
  CBCGPVisualManager2003::OnFillOutlookBarCaption(hDC, rectCaption, clrText);

  if (CanDrawImage()) {
    clrText = s->m_clrOutlookCaptionTextNormal;
  }
}
void CBCGPVisualManager2007::OnFillBarBackground(HDDC hDC, CBCGPBaseControlBar* pBar,
    RECT rectClient, RECT rectClip,
    BOOL bNCArea/* = FALSE*/)
{
  if (IsOnGlass) {
    draw_fillrectR(hDC, &rectClient, _RGB(0, 0, 0));
    return;
  }

  CRuntimeClass* pBarClass = pBar->GetRuntimeClass();

  if (!CanDrawImage() ||
      IsDialogControl ||
      pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPColorBar)) ||
      pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPCalculator)) ||
      pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPCalendarBar))) {
    CBCGPVisualManager2003::OnFillBarBackground(hDC, pBar, rectClient, rectClip, bNCArea);
    return;
  }

  if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar))) {
    BOOL bIsHorz = (pBar->GetBarStyle() & CBRS_ORIENT_HORZ);
    COLORREF clr1 = bIsHorz ? s->m_clrMenuBarGradientDark : s->m_clrMenuBarGradientVertLight;
    COLORREF clr2 = bIsHorz ? s->m_clrMenuBarGradientLight : s->m_clrMenuBarGradientVertDark;

    dm.Fill4ColorsGradient(rectClient, clr1, clr2, clr2, clr1, !bIsHorz);
    return;
  }
  else if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar))) {
    draw_fillrectR(hDC, &rectClip, &s->m_clrMenuLight);
    CBCGPPopupMenuBar* pMenuBar = DYNAMIC_DOWNCAST(CBCGPPopupMenuBar, pBar);

    if (!pMenuBar->s->m_bDisableSideBarInXPMode) {
      RECT rectImages = rectClient;
      rectImages.right = rectImages.left + pMenuBar->GetGutterWidth();
      rectImages DeflateRect(&, 0, 1);
      draw_fillrectR(hDC, &rectImages, &s->m_clrBtnBkgnd);
      rectImages.left = rectImages.right;
      rectImages.right += 2;
      DrawSeparator(hDC, rectImages, FALSE);
    }

    return;
  }
  else if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPStatusBar))) {
    SIZE szSysBorder(GetSystemBorders(TRUE));
    RECT rect(rectClient);
    RECT rectExt(0, 0, 0, 0);
    BOOL bExtended = ((CBCGPStatusBar*)pBar)->GetExtendedArea(rectExt);

    //RECT rectBorders = s->m_ctrlStatusBarBack.GetParams ().s->m_rectSides;
    if (bExtended) {
      rect.right = rectExt.left;
    }

    CWnd* pWnd = ((CBCGPStatusBar*)pBar)->GetParent();
    ASSERT(pWnd);
    BOOL bActive = IsWindowActive(pWnd);
    InflateRect(&rect, szSysBorder.cx, 0, szSysBorder.cx, szSysBorder.cy);
    s->m_ctrlStatusBarBack.Draw(hDC, rect, bActive ? 0 : 1);

    if (bExtended) {
      rectExt InflateRect(&, 0, 0, szSysBorder.cx, szSysBorder.cy);
      rectExt.left -= s->m_ctrlStatusBarBack_Ext.GetParams().s->m_rectCorners.left;
      s->m_ctrlStatusBarBack_Ext.Draw(hDC, rectExt, bActive ? 0 : 1);
    }

    return;
  }
  else if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPRibbonStatusBar))) {
    CBCGPRibbonStatusBar* pRibbonStatusBar = DYNAMIC_DOWNCAST(
        CBCGPRibbonStatusBar, pBar);
    SIZE szSysBorder(GetSystemBorders(TRUE));
    RECT rect(rectClient);
    RECT rectExt(0, 0, 0, 0);
    BOOL bExtended    = pRibbonStatusBar->GetExtendedArea(rectExt);
    BOOL bBottomFrame = pRibbonStatusBar->IsBottomFrame();

    //RECT rectBorders = s->m_ctrlStatusBarBack.GetParams ().s->m_rectSides;
    if (bExtended) {
      rect.right = rectExt.left;
    }

    CWnd* pWnd = pBar->GetParent();
    ASSERT(pWnd);
    BOOL bActive = IsWindowActive(pWnd);
    InflateRect(&rect, szSysBorder.cx, 0, szSysBorder.cx, bBottomFrame ? -1 : szSysBorder.cy);
    s->m_ctrlStatusBarBack.Draw(hDC, rect, bActive ? 0 : 1);

    if (bExtended) {
      rectExt InflateRect(&, 0, 0, szSysBorder.cx, bBottomFrame ? -1 : szSysBorder.cy);
      rectExt.left -= s->m_ctrlStatusBarBack_Ext.GetParams().s->m_rectCorners.left;
      s->m_ctrlStatusBarBack_Ext.Draw(hDC, rectExt, bActive ? 0 : 1);
    }

    return;
  }
  else if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPOutlookBarToolBar))) {
    if (s->m_ctrlOutlookWndBar.IsValid()) {
      s->m_ctrlOutlookWndBar.Draw(hDC, rectClient);
    }
    else {

      FillGradient(hDC, rectClient,  s->m_clrToolBarGradientDark,
          s->m_clrToolBarGradientLight,
          TRUE);
    }

    return;
  }

  BOOL bIsToolBox = pBar->IsKindOf(RUNTIME_CLASS(CBCGPToolBoxPage)) ||
      pBar->IsKindOf(RUNTIME_CLASS(CBCGPToolBox)) ||
      pBar->IsKindOf(RUNTIME_CLASS(CBCGPToolBoxEx));

  if (bIsToolBox) {

    FillGradient(hDC, rectClient,  s->m_clrToolBarGradientLight,
        s->m_clrToolBarGradientDark,
        FALSE);
    return;
  }

  CBCGPVisualManager2003::OnFillBarBackground(hDC, pBar, rectClient, rectClip, bNCArea);
}
void CBCGPVisualManager2007::OnFillHighlightedArea(HDDC hDC, RECT rect,
    COLORREF  pBrush, CBCGPToolbarButton* pButton)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillHighlightedArea(hDC, rect, pBrush, pButton);
    return;
  }

  ASSERT(hDC);
  ASSERT(pBrush);
  BOOL bIsHorz = TRUE;
  //  BOOL bIsPopupMenu = FALSE;
  COLORREF clr1 = 0;
  COLORREF clr2 = 0;

  if (pButton != NULL) {

    bIsHorz = pButton->IsHorizontal();
    CBCGPToolbarMenuButton* pCustButton =
        DYNAMIC_DOWNCAST(CCustomizeButton, pButton);

    if (pCustButton != NULL) {
      if (IsDroppedDown) {
        clr1 = s->m_clrHighlightDnGradientDark;
        clr2 = s->m_clrHighlightDnGradientLight;
      }
    }
  }

  if (pBrush == &s->m_clrHighlight) {
    clr1 = s->m_clrHighlightGradientDark;
    clr2 = s->m_clrHighlightGradientLight;//bIsPopupMenu ? clr1 : s->m_clrHighlightGradientLight;
  }
  else if (pBrush == &s->m_clrHighlightDn) {
    clr1 = s->m_clrHighlightDnGradientDark;//bIsPopupMenu ? s->m_clrHighlightDnGradientLight : s->m_clrHighlightDnGradientDark;
    clr2 = s->m_clrHighlightDnGradientLight;
  }
  else if (pBrush == &s->m_clrHighlightChecked) {
    clr1 = s->m_clrHighlightCheckedGradientDark;//bIsPopupMenu ? s->m_clrHighlightCheckedGradientLight : s->m_clrHighlightCheckedGradientDark;
    clr2 = s->m_clrHighlightCheckedGradientLight;
  }

  if (clr1 == 0 || clr2 == 0) {
    CBCGPVisualManager2003::OnFillHighlightedArea(hDC, rect, pBrush, pButton);
    return;
  }

  FillGradient(hDC, rect, clr1, clr2, bIsHorz);
}
void CBCGPVisualManager2007::OnDrawMenuBorder(HDDC hDC, CBCGPPopupMenu* pMenu, RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawMenuBorder(hDC, pMenu, rect);
    return;
  }

  if (pMenu != NULL) {
    CBCGPRibbonPanelMenuBar* pRibbonMenuBar =
        DYNAMIC_DOWNCAST(CBCGPRibbonPanelMenuBar, pMenu->GetMenuBar());

    if (pRibbonMenuBar != NULL) {
      ASSERT(pRibbonMenuBar);

      if (pRibbonMenuBar->IsMainPanel()) {
        if (s->m_ctrlRibbonMainPanel.IsValid()) {
          s->m_ctrlRibbonMainPanel.DrawFrame(hDC, rect);
        }
        else {
          s->m_ctrlPopupBorder.DrawFrame(hDC, rect);
        }

        return;
      }

      if (!pRibbonMenuBar->IsMenuMode()) {
        if (pRibbonMenuBar->IsQATPopup() &&
            s->m_ctrlRibbonBorder_QAT.IsValid()) {
          s->m_ctrlRibbonBorder_QAT.DrawFrame(hDC, rect);
          return;
        }
        else if (pRibbonMenuBar->IsCategoryPopup()) {
          if (IsBeta1()) {
            s->m_ctrlRibbonCategoryBack.DrawFrame(hDC, rect);
          }

          return;
        }
        else if (pRibbonMenuBar->IsFloaty() &&
            s->m_ctrlRibbonBorder_Floaty.IsValid()) {
          s->m_ctrlRibbonBorder_Floaty.DrawFrame(hDC, rect);
          return;
        }
        else {
          if (pRibbonMenuBar->GetPanel() != NULL) {
            if (IsBeta1()) {
              s->m_ctrlRibbonCategoryBack.DrawFrame(hDC, rect);
            }

            return;
          }

          // draw standard
        }
      }
    }
  }

  CBCGPBaseControlBar* pTopLevelBar = NULL;

  for (CBCGPPopupMenu* pParentMenu = pMenu;
      pParentMenu != NULL; pParentMenu = pParentMenu->GetParentPopupMenu()) {
    CBCGPToolbarMenuButton* pParentButton = pParentMenu->GetParentButton();

    if (pParentButton == NULL) {
      break;
    }

    pTopLevelBar =
        DYNAMIC_DOWNCAST(CBCGPBaseControlBar, pParentButton->GetParentWnd());
  }

  if (pTopLevelBar == NULL || pTopLevelBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar))) {
    s->m_ctrlPopupBorder.DrawFrame(hDC, rect);
  }
  else {
    CBCGPVisualManager2003::OnDrawMenuBorder(hDC, pMenu, rect);
  }
}
void CBCGPVisualManager2007::OnDrawBarGripper(HDDC hDC, RECT rectGripper, BOOL bHorz, CBCGPBaseControlBar* pBar)
{
  if (!CanDrawImage() ||
      (pBar != NULL && IsDialogControl) ||
      s->m_ToolBarGripper.GetCount() == 0) {
    CBCGPVisualManager2003::OnDrawBarGripper(hDC, rectGripper, bHorz, pBar);
    return;
  }

  SIZE szBox(s->m_ToolBarGripper.GetImageSize());

  if (szBox != SIZE(0, 0)) {
    if (bHorz) {
      rectGripper.left = rectGripper.right - szBox.cx;
    }
    else {
      rectGripper.top = rectGripper.bottom - szBox.cy;
    }

    CBCGPToolBar* pToolBar = DYNAMIC_DOWNCAST(CBCGPToolBar, pBar);

    if (pToolBar != NULL) {
      if (bHorz) {
        const int nHeight = CBCGPToolBar::IsLargeIcons() ?
            pToolBar->GetRowHeight() : pToolBar->GetButtonSize().cy;
        const int nDelta = MAX(0, (nHeight - pToolBar->GetImageSize().cy) / 2);
        rectGripper DeflateRect(&, 0, nDelta);
      }
      else {
        const int nWidth = CBCGPToolBar::IsLargeIcons() ?
            pToolBar->GetColumnWidth() : pToolBar->GetButtonSize().cx;
        const int nDelta = MAX(0, (nWidth - pToolBar->GetImageSize().cx) / 2);
        rectGripper DeflateRect(&, nDelta, 0);
      }
    }

    const int nBoxesNumber = bHorz ?
        (rectGripper RCH(&) - szBox.cy) / szBox.cy :
        (rectGripper RCW(&) - szBox.cx) / szBox.cx;
    int nOffset = bHorz ?
        (rectGripper RCH(&) - nBoxesNumber * szBox.cy) / 2 :
        (rectGripper RCW(&) - nBoxesNumber * szBox.cx) / 2;

    for (int nBox = 0; nBox < nBoxesNumber; nBox++) {
      int x = bHorz ?
          rectGripper.left :
          rectGripper.left + nOffset;
      int y = bHorz ?
          rectGripper.top + nOffset :
          rectGripper.top;
      s->m_ToolBarGripper.DrawEx(hDC, RECT(cPOINT(x, y), szBox), 0);
      nOffset += bHorz ? szBox.cy : szBox.cx;
    }
  }
}
void CBCGPVisualManager2007::OnDrawSeparator(HDDC hDC, CBCGPBaseControlBar* pBar, RECT rect, BOOL bHorz)
{
  ASSERT(hDC);

  if (!CanDrawImage() || pBar == NULL || IsDialogControl) {
    CBCGPVisualManager2003::OnDrawSeparator(hDC, pBar, rect, bHorz);
    return;
  }

  RECT rectSeparator(rect);

  if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPRibbonStatusBar))) {
    CBCGPRibbonStatusBar* pRibbonStatusBar = DYNAMIC_DOWNCAST(
        CBCGPRibbonStatusBar, pBar);
    InflateRect(&rect, 1, 5, 1, pRibbonStatusBar->IsBottomFrame() ? 2 : 5);
    s->m_StatusBarPaneBorder.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzRight,
        CBCGPToolBarImages::ImageAlignVertStretch);
    return;
  }

  if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPRibbonBar)) ||
      (bHorz && pBar->IsKindOf(RUNTIME_CLASS(CBCGPRibbonPanelMenuBar)))) {
    if (RCW(&rect) < s->m_RibbonPanelSeparator.GetImageSize().cx) {
      rect.left = rect.right - s->m_RibbonPanelSeparator.GetImageSize().cx;
    }

    s->m_RibbonPanelSeparator.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzCenter,
        CBCGPToolBarImages::ImageAlignVertCenter);
    return;
  }

  BOOL bPopupMenu = FALSE;

  if (!bHorz) {
    BOOL bIsRibbon = FALSE;
    bPopupMenu = pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar));

    if (bPopupMenu &&
        !bIsRibbon &&
        !pBar->IsKindOf(RUNTIME_CLASS(CBCGPColorBar)) &&
        !pBar->IsKindOf(RUNTIME_CLASS(CBCGPCalculator)) &&
        !pBar->IsKindOf(RUNTIME_CLASS(CBCGPCalendarBar))) {
      rectSeparator.left = rect.left + CBCGPToolBar::GetMenuImageSize().cx +
          GetMenuImageMargin() + 1;
      RECT rectBar;
      pBar->GetClientRect(rectBar);

      if (rectBar.right - rectSeparator.right < 50) { // Last item in row
        rectSeparator.right = rectBar.right;
      }

      if (((CBCGPPopupMenuBar*) pBar)->s->m_bDisableSideBarInXPMode) {
        rectSeparator.left = 0;
      }

      //---------------------------------
      //  Maybe Quick Customize separator
      //---------------------------------
      if (bPopupMenu) {
        CWnd* pWnd = pBar->GetParent();

        if (pWnd != NULL && pWnd->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenu))) {
          CBCGPPopupMenu* pMenu = (CBCGPPopupMenu*)pWnd;

          if (pMenu->IsCustomizePane()) {
            rectSeparator.left = rect.left + 2 * CBCGPToolBar::GetMenuImageSize().cx +
                3 * GetMenuImageMargin() + 2;
          }
        }
      }
    }
  }

  if (bPopupMenu) {
    DrawSeparator(hDC, rectSeparator, !bHorz);
  }
  else {
    if (bHorz) {
      int nHeight = rectSeparator RCH(&) / 5;
      rectSeparator.top    += nHeight;
      rectSeparator.bottom -= nHeight;
    }
    else {
      int nWidth = rectSeparator RCW(&) / 5;
      rectSeparator.left  += nWidth;
      rectSeparator.right -= nWidth;
    }

    DrawSeparator(hDC, rectSeparator, s->m_penSeparatorDark, s->m_penSeparatorLight, !bHorz);
  }
}
COLORREF CBCGPVisualManager2007::OnDrawControlBarCaption(HDDC hDC, CBCGPDockingControlBar* pBar,
    BOOL bActive, RECT rectCaption, RECT rectButtons)
{
  if (!CanDrawImage() || pBar == NULL || IsDialogControl) {
    return CBCGPVisualManager2003::OnDrawControlBarCaption(hDC, pBar, bActive, rectCaption, rectButtons);
  }

  ASSERT(hDC);
  COLORREF pen = (globalData.clrBtnFace);
  COLORREF _clr = (pen);
  rectCaption.bottom += 2;
  TMoveTo(hDC, rectCaption.left, rectCaption.bottom);
  _LineTo(hDC, rectCaption.left, rectCaption.top);
  TMoveTo(hDC, rectCaption.left  + 1, rectCaption.top);
  _LineTo(hDC, rectCaption.right - 1, rectCaption.top);
  TMoveTo(hDC, rectCaption.right - 1, rectCaption.top + 1);
  _LineTo(hDC, rectCaption.right - 1, rectCaption.bottom);

  rectCaption DeflateRect(&, 1, 1, 1, 0);
  draw_fillrectR(hDC, &rectCaption, bActive ? globalData.clrActiveCaption : globalData.clrInactiveCaption);
  return bActive ? globalData.clrCaptionText : globalData.clrInactiveCaptionText;
}
void CBCGPVisualManager2007::OnDrawStatusBarPaneBorder(HDDC hDC, CBCGPStatusBar* pBar,
    RECT rectPane, UINT uiID, UINT nStyle)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawStatusBarPaneBorder(hDC, pBar, rectPane,
        uiID, nStyle);
    return;
  }

  BOOL bExtended = pBar->GetDrawExtendedArea();

  if (!bExtended || ((nStyle & UIS_STRETCH) == 0 && bExtended)) {
    rectPane OffsetRect(&, 1, 0);
    s->m_StatusBarPaneBorder.DrawEx(hDC, rectPane, 0, CBCGPToolBarImages::ImageAlignHorzRight,
        CBCGPToolBarImages::ImageAlignVertStretch);
  }
}
void CBCGPVisualManager2007::OnDrawStatusBarSizeBox(HDDC hDC, CBCGPStatusBar* pStatBar,
    RECT rectSizeBox)
{
  if (!CanDrawImage() ||
      s->m_StatusBarSizeBox.GetCount() == 0) {
    CBCGPVisualManager2003::OnDrawStatusBarSizeBox(hDC, pStatBar, rectSizeBox);
    return;
  }

  s->m_StatusBarSizeBox.DrawEx(hDC, rectSizeBox, 0, CBCGPToolBarImages::ImageAlignHorzRight, CBCGPToolBarImages::ImageAlignVertBottom);
}
void CBCGPVisualManager2007::OnDrawComboDropButton(HDDC hDC, RECT rect,
    BOOL bDisabled,
    BOOL bIsDropped,
    BOOL bIsHighlighted,
    CBCGPToolbarComboBoxButton* pButton)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawComboDropButton(hDC, rect,
        bDisabled, bIsDropped,
        bIsHighlighted, pButton);
    return;
  }

  BOOL bRibbon = pButton != NULL && pButton->IsRibbonButton();
  BOOL bActive = bIsHighlighted || bIsDropped;
  CBCGPControlRenderer* pRenderer = bRibbon
      ? &s->m_ctrlRibbonComboBoxBtn
      : &s->m_ctrlComboBoxBtn;

  if (!pRenderer->IsValid()) {
    COLORREF color1 = bRibbon
        ? s->m_clrRibbonComboBtnStart
        : s->m_clrComboBtnStart;
    COLORREF color2 = bRibbon
        ? s->m_clrRibbonComboBtnFinish
        : s->m_clrComboBtnFinish;
    COLORREF colorBorder = bRibbon
        ? s->m_clrRibbonComboBtnBorder
        : s->m_clrComboBtnBorder;

    if (bDisabled) {
      color1 = bRibbon
          ? s->m_clrRibbonComboBtnDisabledStart
          : s->m_clrComboBtnDisabledStart;
      color2 = bRibbon
          ? s->m_clrRibbonComboBtnDisabledFinish
          : s->m_clrComboBtnDisabledFinish;
      colorBorder = bRibbon
          ? s->m_clrRibbonComboBtnBorderDisabled
          : s->m_clrComboBtnBorderDisabled;
    }
    else if (bActive) {
      if (bIsDropped) {
        color1 = bRibbon
            ? s->m_clrRibbonComboBtnPressedStart
            : s->m_clrComboBtnPressedStart;
        color2 = bRibbon
            ? s->m_clrRibbonComboBtnPressedFinish
            : s->m_clrComboBtnPressedFinish;
        colorBorder = bRibbon
            ? s->m_clrRibbonComboBtnBorderPressed
            : s->m_clrComboBtnBorderPressed;
      }
      else {
        color1 = bRibbon
            ? s->m_clrRibbonComboBtnHighlightedStart
            : s->m_clrComboBtnHighlightedStart;
        color2 = bRibbon
            ? s->m_clrRibbonComboBtnHighlightedFinish
            : s->m_clrComboBtnHighlightedFinish;
        colorBorder = bRibbon
            ? s->m_clrRibbonComboBtnBorderHighlighted
            : s->m_clrComboBtnBorderHighlighted;
      }
    }

    if (bRibbon ||
        !bDisabled ||
        (bDisabled && colorBorder != 0)) {
      if (!bDisabled) {
        InflateRect(&rect, 0, 1, 1, 1);
      }

      if (bIsDrawOnGlass) {

        DrawRect(hDC, rect, 0, colorBorder);
      }
      else {
        draw_3drect_inR(hDC, &rect, colorBorder, colorBorder);
      }

      if (!bDisabled) {
        DeflateRect(&rect, 0, 1, 1, 1);
      }
    }

    if (bDisabled) {
      DeflateRect(&rect, 0, 1, 1, 1);
    }
    else if (bActive) {
      DeflateRect(&rect, 1, 0, 0, 0);
    }

    FillGradient(hDC, rect, color1, color2, TRUE);

    if (bDisabled) {
      InflateRect(&rect, 0, 1, 1, 1);
    }
    else if (bActive) {
      InflateRect(&rect, 1, 0, 0, 0);
    }
  }
  else {
    InflateRect(&rect, 0, 1, 1, 1);
    int nIndex = 0;

    if (bDisabled) {
      nIndex = 3;
    }
    else {
      if (bIsDropped) {
        nIndex = 2;
      }
      else if (bIsHighlighted) {
        nIndex = 1;
      }
    }

    pRenderer->Draw(hDC, rect, nIndex);
    DeflateRect(&rect, 0, 1, 1, 1);
  }

  rect.bottom -= 2;
  DrawMenuImages(hDC, IdArowDown, rect,
      bDisabled
      ? ImageGray
      : ImageBlack);
}
void CBCGPVisualManager2007::OnDrawComboBorder(HDDC hDC, RECT rect,
    BOOL bDisabled,
    BOOL bIsDropped,
    BOOL bIsHighlighted,
    CBCGPToolbarComboBoxButton* pButton)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawComboBorder(hDC, rect,
        bDisabled,
        bIsDropped,
        bIsHighlighted,
        pButton);
    return;
  }

  DeflateRect(&rect, 1, 1);
  COLORREF colorBorder = s->m_clrComboBorder;

  if (bDisabled) {
    colorBorder = s->m_clrComboBorderDisabled;
  }
  else if (bIsHighlighted || bIsDropped) {
    colorBorder = bIsDropped
        ? s->m_clrComboBorderPressed
        : s->m_clrComboBorderHighlighted;
  }

  if (bIsDrawOnGlass) {

    DrawRect(hDC, rect, 0, colorBorder);
  }
  else {
    draw_3drect_inR(hDC, &rect, colorBorder, colorBorder);
  }
}
void CBCGPVisualManager2007::OnDrawEditBorder(HDDC hDC, RECT rect,
    BOOL bDisabled,
    BOOL bIsHighlighted,
    CBCGPToolbarEditBoxButton* pButton)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawEditBorder(hDC, rect,
        bDisabled,
        bIsHighlighted,
        pButton);
    return;
  }

  DeflateRect(&rect, 1, 1);
  COLORREF colorBorder = s->m_clrEditBorder;

  if (bDisabled) {
    colorBorder = s->m_clrEditBorderDisabled;
  }
  else if (bIsHighlighted) {
    colorBorder = s->m_clrEditBorderHighlighted;
  }

  if (bIsDrawOnGlass) {

    DrawRect(hDC, rect, 0, colorBorder);
  }
  else {
    draw_3drect_inR(hDC, &rect, colorBorder, colorBorder);
  }
}
void CBCGPVisualManager2007::OnDrawTearOffCaption(HDDC hDC, RECT rect, BOOL bIsActive)
{
  if (!CanDrawImage() ||
      s->m_ToolBarTear.GetCount() == 0) {
    CBCGPVisualManager2003::OnDrawTearOffCaption(hDC, rect, bIsActive);
    return;
  }

  draw_fillrectR(hDC, &rect, &s->m_clrBtnBkgnd);

  if (bIsActive) {
    s->m_ctrlMenuHighlighted[0].Draw(hDC, rect);
  }

  s->m_ToolBarTear.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter);
}
void CBCGPVisualManager2007::OnDrawMenuResizeBar(HDDC hDC, RECT rect, int nResizeFlags)
{
  CBCGPToolBarImages& images =
      (nResizeFlags == (int) CBCGPPopupMenu::MENU_RESIZE_BOTTOs->m_RIGHT) ?
      s->m_PopupResizeBar_HV :
      (nResizeFlags == (int) CBCGPPopupMenu::MENU_RESIZE_TOP_RIGHT) ?
      s->m_PopupResizeBar_HVT :
      s->m_PopupResizeBar_V; // TODO - vertical resize

  if (!CanDrawImage() ||
      !s->m_ctrlPopupResizeBar.IsValid() ||
      !images.IsValid()) {
    CBCGPVisualManager2003::OnDrawMenuResizeBar(hDC, rect, nResizeFlags);
    return;
  }

  ASSERT(hDC);
  s->m_ctrlPopupResizeBar.Draw(hDC, rect);

  if (nResizeFlags == (int) CBCGPPopupMenu::MENU_RESIZE_BOTTOs->m_RIGHT ||
      nResizeFlags == (int) CBCGPPopupMenu::MENU_RESIZE_TOP_RIGHT) {
    images.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzRight,
        nResizeFlags == (int) CBCGPPopupMenu::MENU_RESIZE_TOP_RIGHT ?
        CBCGPToolBarImages::ImageAlignVertTop :
        CBCGPToolBarImages::ImageAlignVertBottom);
  }
  else {
    images.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzCenter,
        CBCGPToolBarImages::ImageAlignVertCenter);
  }
}
void CBCGPVisualManager2007::OnDrawMenuScrollButton(HDDC hDC, RECT rect, BOOL bIsScrollDown,
    BOOL bIsHighlited, BOOL bIsPressed,
    BOOL bIsDisabled)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawMenuScrollButton(hDC, rect, bIsScrollDown, bIsHighlited, bIsPressed, bIsDisabled);
    return;
  }

  ASSERT(hDC);
  CBCGPControlRenderer* pRenderer = &s->m_ctrlMenuScrollBtn[0];

  if (bIsScrollDown && s->m_ctrlMenuScrollBtn[1].IsValid()) {
    pRenderer = &s->m_ctrlMenuScrollBtn[1];
  }

  rect.top --;
  pRenderer->Draw(hDC, rect, bIsHighlited ? 1 : 0);
  DrawMenuImages(hDC, bIsScrollDown ? IdArowDown : IdArowUp, rect);
}
void CBCGPVisualManager2007::OnDrawMenuSystemButton(HDDC hDC, RECT rect,
    UINT uiSystemCommand,
    UINT nStyle, BOOL bHighlight)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawMenuSystemButton(hDC, rect,
        uiSystemCommand, nStyle, bHighlight);
    return;
  }

  ASSERT(hDC);
  CBCGPToolBarImages* pImage = NULL;

  switch (uiSystemCommand) {
  case SC_CLOSE:
    pImage = &s->m_SysBtnClose[0];
    break;

  case SC_MINIMIZE:
    pImage = &s->m_SysBtnMinimize[0];
    break;

  case SC_RESTORE:
    pImage = &s->m_SysBtnRestore[0];
    break;

  default:
    return;
  }

  BOOL bDisabled = (nStyle & UIS_DISABLED);
  BOOL bPressed = (nStyle & UIS_PUSHED);
  RECT rtBtnImage(cPOINT(0, 0), pImage->GetImageSize());
  int nImage = 0;

  if (bDisabled) {
    nImage = 3;
  }
  else if (bPressed || bHighlight) {
    int index = -1;

    if (bPressed) {
      if (bHighlight) {
        index = 1;
      }
    }
    else if (bHighlight) {
      index = 0;
    }

    if (index != -1) {
      s->m_ctrlRibbonBtn[0].Draw(hDC, rect, index);
    }
  }

  rtBtnImage OffsetRect(&, 0, pImage->GetImageSize().cy * nImage);
  pImage->DrawEx(hDC, rect, 0,
      CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter,
      rtBtnImage);
}
void CBCGPVisualManager2007::OnFillButtonInterior(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillButtonInterior(hDC, pButton, rect, state);
    return;
  }

  CCustomizeButton* pCustButton = DYNAMIC_DOWNCAST(CCustomizeButton, pButton);

  if (pCustButton == NULL) {
    if (CBCGPToolBar::IsCustomizeMode() &&
        !CBCGPToolBar::IsAltCustomizeMode() && !pButton->IsLocked()) {
      return;
    }

    CBCGPControlRenderer* pRenderer = NULL;
    int index = 0;
    BOOL bDisabled = (pButton->s->m_nStyle & UIS_DISABLED) == UIS_DISABLED;
    BOOL bPressed  = (pButton->s->m_nStyle & UIS_PUSHED) == UIS_PUSHED;
    BOOL bChecked  = (pButton->s->m_nStyle & UIS_CHECKED) == UIS_CHECKED;
    BOOL bHandled  = FALSE;
    CBCGPBaseControlBar* pBar = DYNAMIC_DOWNCAST(CBCGPBaseControlBar, pButton->GetParentWnd());
    CBCGPToolbarMenuButton* pMenuButton =
        DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);

    if (pMenuButton != NULL && pBar != NULL) {
      if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar))) {
        if (state == ButtonsIsPressed || state == ButtonsIsHighlighted) {
          if (pMenuButton->IsDroppedDown()) {
            ExtendMenuButton(pMenuButton, rect);
            index = 1;
          }

          pRenderer = &s->m_ctrlMenuBarBtn;
          bHandled = TRUE;
        }
        else {
          return;
        }

        bHandled = TRUE;
      }
      else if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar))) {
        if (bChecked) {
          pRenderer = &s->m_ctrlMenuItemBack;

          if (bDisabled) {
            index = 1;
          }

          InflateRect(&rect, 0, 0, 0, 1);
          bHandled = TRUE;
        }
        else if (state == ButtonsIsPressed || state == ButtonsIsHighlighted) {
          pRenderer = &s->m_ctrlMenuHighlighted[bDisabled ? 1 : 0];
          bHandled = TRUE;
        }
        else {
          return;
        }
      }
      else if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPToolBar))) {
        if (pMenuButton->IsDroppedDown()) {
          ExtendMenuButton(pMenuButton, rect);
        }
      }
    }
    else if (pBar != NULL && pBar->IsKindOf(RUNTIME_CLASS(CBCGPColorBar))) {
      if (bChecked) {
        pRenderer = &s->m_ctrlMenuItemBack;

        if (bDisabled) {
          index = 1;
        }
      }

      if (!bDisabled) {
        if (state == ButtonsIsHighlighted) {
          pRenderer = &s->m_ctrlMenuHighlighted[0];
          index = 0;
        }
      }

      bHandled = TRUE;
    }
    else if (pBar != NULL && pBar->IsKindOf(RUNTIME_CLASS(CBCGPOutlookBarToolBar))) {
      bHandled = TRUE;
    }

    if (!bHandled) {
      index = -1;

      if (bChecked) {
        if (bDisabled) {
          index = 0;
        }
        else if (state == ButtonsIsPressed || state == ButtonsIsHighlighted) {
          index = 3;
        }
      }

      if (!bDisabled) {
        if (bPressed) {
          index = 2;
        }
        else if (state == ButtonsIsHighlighted) {
          if (index == -1) {
            index = 0;
          }

          index++;
        }
      }

      if (index == -1) {
        return;
      }

      pRenderer = &s->m_ctrlToolBarBtn;
    }

    if (pRenderer != NULL) {
      pRenderer->Draw(hDC, rect, index);
      return;
    }
  }

  CBCGPVisualManager2003::OnFillButtonInterior(hDC, pButton, rect, state);
}
void CBCGPVisualManager2007::OnDrawButtonBorder(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawButtonBorder(hDC, pButton, rect, state);
    return;
  }

  //------------------------------------------------
  // Draw shadow under the dropped-down menu button:
  //------------------------------------------------
  if (state != ButtonsIsPressed && state != ButtonsIsHighlighted) {
    return;
  }

  if (!s->m_bShdowDroppedDownMenuButton ||
      !CBCGPMenuBar::IsMenuShadows() ||
      CBCGPToolBar::IsCustomizeMode()) {
    return;
  }

  CBCGPToolbarMenuButton* pMenuButton = DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);

  if (pMenuButton == NULL || !pMenuButton->IsDroppedDown()) {
    return;
  }

  BOOL bIsPopupMenu =
      pMenuButton->GetParentWnd() != NULL &&
      pMenuButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar));

  if (bIsPopupMenu) {
    return;
  }

  CBCGPPopupMenu* pPopupMenu = pMenuButton->GetPopupMenu();

  if (pPopupMenu != NULL &&
      (pPopupMenu->IsWindowVisible() || pPopupMenu->IsShown()) &&
      !pPopupMenu->IsRightAlign() &&
      !(pPopupMenu->GetExStyle() & WS_EX_LAYOUTRTL)) {
    ExtendMenuButton(pMenuButton, rect);

    DrawShadow(hDC, rect, s->m_nMenuShadowDepth, 100, 75, NULL, NULL,
        s->m_clrMenuShadowBase);
  }
}
void CBCGPVisualManager2007::OnDrawButtonSeparator(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state,
    BOOL bHorz)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawButtonSeparator(hDC, pButton, rect, state, bHorz);
    return;
  }

  COLORREF  pPen = &s->m_penMenuItemBorder;
  COLORREF _clr = (pPen);

  if (bHorz) {
    TMoveTo(hDC, rect.left, rect.top + 2);
    _LineTo(hDC, rect.left, rect.bottom - 2);
  }
  else {
    TMoveTo(hDC, rect.left  + 2, rect.top);
    _LineTo(hDC, rect.right - 2, rect.top);
  }


}
void CBCGPVisualManager2007::OnHighlightMenuItem(HDDC hDC, CBCGPToolbarMenuButton* pButton,
    RECT rect, COLORREF clrText)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnHighlightMenuItem(hDC, pButton, rect, clrText);
    return;
  }

  s->m_ctrlMenuHighlighted[(pButton->s->m_nStyle & UIS_DISABLED) == UIS_DISABLED ? 1 : 0].Draw(hDC, rect);
}
void CBCGPVisualManager2007::OnHighlightRarelyUsedMenuItems(HDDC hDC, RECT rectRarelyUsed)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnHighlightRarelyUsedMenuItems(hDC, rectRarelyUsed);
  }

  rectRarelyUsed.left --;
  rectRarelyUsed.right = rectRarelyUsed.left + CBCGPToolBar::GetMenuImageSize().cx +
      2 * GetMenuImageMargin() + 2;
  draw_fillrectR(hDC, &rectRarelyUsed, &s->m_clrMenuRarelyUsed);
}
void CBCGPVisualManager2007::OnDrawMenuCheck(HDDC hDC, CBCGPToolbarMenuButton* pButton,
    RECT rect, BOOL bHighlight, BOOL bIsRadio)
{

  CBCGPToolBarImages& img = bIsRadio ? s->m_MenuItemMarkerR : s->m_MenuItemMarkerC;

  if (!CanDrawImage() || img.GetCount() == 0) {
    CBCGPVisualManager2003::OnDrawMenuCheck(hDC, pButton, rect, bHighlight, bIsRadio);
    return;
  }

  SIZE size(img.GetImageSize());
  RECT rectImage(0, 0, size.cx, size.cy);

  if ((pButton->s->m_nStyle & UIS_DISABLED) == UIS_DISABLED) {
    rectImage OffsetRect(&, 0, size.cy);
  }

  if (globalData.m_bIsRTL) {
    img.Mirror();
  }

  img.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter, rectImage);

  if (globalData.m_bIsRTL) {
    img.Mirror();
  }
}
void CBCGPVisualManager2007::OnDrawMenuItemButton(HDDC hDC, CBCGPToolbarMenuButton* pButton,
    RECT rectButton, BOOL bHighlight, BOOL bDisabled)
{
  if (!CanDrawImage() || !s->m_ctrlMenuButtonBorder.IsValid()) {
    CBCGPVisualManager2003::OnDrawMenuItemButton(hDC, pButton,
        rectButton, bHighlight, bDisabled);
    return;
  }

  ASSERT(hDC);
  RECT rect = rectButton;
  rect.right = rect.left + 1;
  rect.left--;
  DeflateRect(&rect, 0, 1);

  if (bHighlight) {
    s->m_ctrlMenuButtonBorder.Draw(hDC, rect);
  }
  else {
    COLORREF br = (globalData.clrBtnShadow);
    DeflateRect(&rect, 0, 3);
    rect.right--;
    draw_fillrectR(hDC, &rect, br);
  }
}
void CBCGPVisualManager2007::OnDrawShowAllMenuItems(HDDC hDC, RECT rect,
    CBCGPVisualManager::int state)
{
  if (!CanDrawImage() || !s->m_ctrlMenuItemShowAll.IsValid()) {
    CBCGPVisualManager2003::OnDrawShowAllMenuItems(hDC, rect, state);
    return;
  }

  s->m_ctrlMenuItemShowAll.FillInterior(hDC, rect, CBCGPToolBarImages::ImageAlignHorzCenter,
      CBCGPToolBarImages::ImageAlignVertCenter, state == ButtonsIsHighlighted ? 1 : 0);
}
int CBCGPVisualManager2007::GetShowAllMenuItemsHeight(HDDC hDC, const SIZE& sizeDefault)
{
  return (CanDrawImage() && s->m_ctrlMenuItemShowAll.IsValid())
      ? s->m_ctrlMenuItemShowAll.GetParams().s->m_rectImage.Size().cy + 2 * TEXT_MARGIN
      : CBCGPVisualManager2003::GetShowAllMenuItemsHeight(hDC, sizeDefault);
}
COLORREF CBCGPVisualManager2007::OnFillMiniFrameCaption(HDDC hDC,
    RECT rectCaption,
    BOOL bActive)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnFillMiniFrameCaption(hDC,
        rectCaption, pFrameWnd, bActive);
  }

  ASSERT(hDC);
  BOOL bIsToolBar = FALSE;

  if (DYNAMIC_DOWNCAST(CBCGPBaseToolBar, pFrameWnd->GetControlBar()) != NULL) {
    bActive = FALSE;
    bIsToolBar = TRUE;
  }

  draw_fillrectR(hDC, &rectCaption,
      bActive ? globalData.clrActiveCaption : globalData.clrInactiveCaption);
  // get the text color
  return bActive ? globalData.clrCaptionText : globalData.clrInactiveCaptionText;
}
void CBCGPVisualManager2007::OnDrawMiniFrameBorder(
    HDDC hDC,
    RECT rectBorder, RECT rectBorderSize)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawMiniFrameBorder(
        hDC, pFrameWnd,
        rectBorder, rectBorderSize);
    return;
  }

  ASSERT(hDC);
  BOOL bIsTasksPane = FALSE;

  if (bIsTasksPane) {
    COLORREF  pOldBrush = _clr = (&s->m_clrFloatToolBarBorder);
    ASSERT(pOldBrush != NULL);
    TPatBlt(hDC, rectBorder.left, rectBorder.top, rectBorderSize.left, rectBorder RCH(&), PATCOPY);
    TPatBlt(hDC, rectBorder.left, rectBorder.top, rectBorder RCW(&), rectBorderSize.top, PATCOPY);
    TPatBlt(hDC, rectBorder.right - rectBorderSize.right, rectBorder.top, rectBorderSize.right, rectBorder RCH(&), PATCOPY);
    TPatBlt(hDC, rectBorder.left, rectBorder.bottom - rectBorderSize.bottom, rectBorder RCW(&), rectBorderSize.bottom, PATCOPY);
    rectBorderSize DeflateRect(&, 2, 2);
    DeflateRect(&rectBorder, 2, 2);
    _clr = (globalData.clrBtnFace);
    TPatBlt(hDC, rectBorder.left, rectBorder.top + 1, rectBorderSize.left, rectBorder RCH(&) - 1, PATCOPY);
    TPatBlt(hDC, rectBorder.left + 1, rectBorder.top, rectBorder RCW(&) - 2, rectBorderSize.top, PATCOPY);
    TPatBlt(hDC, rectBorder.right - rectBorderSize.right, rectBorder.top + 1, rectBorderSize.right, rectBorder RCH(&) - 1, PATCOPY);
    TPatBlt(hDC, rectBorder.left + 1, rectBorder.bottom - rectBorderSize.bottom, rectBorder RCW(&) - 2, rectBorderSize.bottom, PATCOPY);
    _clr = (pOldBrush);
  }
  else {
    CBCGPVisualManager2003::OnDrawMiniFrameBorder(hDC, pFrameWnd, rectBorder, rectBorderSize);
  }
}
void CBCGPVisualManager2007::OnDrawFloatingToolbarBorder(
    HDDC hDC, CBCGPBaseToolBar* pToolBar,
    RECT rectBorder, RECT rectBorderSize)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawFloatingToolbarBorder(hDC, pToolBar,
        rectBorder, rectBorderSize);
    return;
  }

  ASSERT(hDC);
  COLORREF  pOldBrush = _clr = (&s->m_clrFloatToolBarBorder);
  ASSERT(pOldBrush != NULL);
  TPatBlt(hDC, rectBorder.left, rectBorder.top, rectBorderSize.left, rectBorder RCH(&), PATCOPY);
  TPatBlt(hDC, rectBorder.left, rectBorder.top, rectBorder RCW(&), rectBorderSize.top, PATCOPY);
  TPatBlt(hDC, rectBorder.right - rectBorderSize.right, rectBorder.top, rectBorderSize.right, rectBorder RCH(&), PATCOPY);
  TPatBlt(hDC, rectBorder.left, rectBorder.bottom - rectBorderSize.bottom, rectBorder RCW(&), rectBorderSize.bottom, PATCOPY);
  rectBorderSize DeflateRect(&, 2, 2);
  DeflateRect(&rectBorder, 2, 2);
  _clr = (globalData.clrBtnFace);
  TPatBlt(hDC, rectBorder.left, rectBorder.top + 1, rectBorderSize.left, rectBorder RCH(&) - 1, PATCOPY);
  TPatBlt(hDC, rectBorder.left + 1, rectBorder.top, rectBorder RCW(&) - 2, rectBorderSize.top, PATCOPY);
  TPatBlt(hDC, rectBorder.right - rectBorderSize.right, rectBorder.top + 1, rectBorderSize.right, rectBorder RCH(&) - 1, PATCOPY);
  TPatBlt(hDC, rectBorder.left + 1, rectBorder.bottom - rectBorderSize.bottom, rectBorder RCW(&) - 2, rectBorderSize.bottom, PATCOPY);
  _clr = (pOldBrush);
}
BOOL CBCGPVisualManager2007::IsOwnerDrawMenuCheck()
{
  return CanDrawImage() ? FALSE : CBCGPVisualManager2003::IsOwnerDrawMenuCheck();
}
BOOL CBCGPVisualManager2007::IsHighlightWholeMenuItem()
{
  return CanDrawImage() ? TRUE : CBCGPVisualManager2003::IsHighlightWholeMenuItem();
}
COLORREF CBCGPVisualManager2007::GetStatusBarPaneTextColor(CBCGPStatusBar* pStatusBar,
                                                          )
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetStatusBarPaneTextColor(pStatusBar, pPane);
  }

  ASSERT(pPane != NULL);
  return (nStyle & UIS_DISABLED) ? s->m_clrStatusBarTextDisabled :
      pPane->clrText == 0 ? s->m_clrStatusBarText : pPane->clrText;
}
COLORREF CBCGPVisualManager2007::GetToolbarButtonTextColor(
    CBCGPToolbarButton* pButton, CBCGPVisualManager::int state)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetToolbarButtonTextColor(pButton, state);
  }


  BOOL bDisabled = (CBCGPToolBar::IsCustomizeMode() && !pButton->IsEditable()) ||
      (!CBCGPToolBar::IsCustomizeMode() && (pButton->s->m_nStyle & UIS_DISABLED));

  if (pButton->GetParentWnd() != NULL &&
      pButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar))) {
    if (CBCGPToolBar::IsCustomizeMode()) {
      return s->m_clrMenuBarBtnText;
    }

    return bDisabled
        ? s->m_clrMenuBarBtnTextDisabled
        : ((state == ButtonsIsHighlighted || state == ButtonsIsPressed ||
            IsDroppedDown)
            ? s->m_clrMenuBarBtnTextHighlighted
            : s->m_clrMenuBarBtnText);
  }

  return bDisabled
      ? s->m_clrToolBarBtnTextDisabled
      : ((state == ButtonsIsHighlighted || state == ButtonsIsPressed ||
          IsDroppedDown)
          ? s->m_clrToolBarBtnTextHighlighted
          : s->m_clrToolBarBtnText);
}
COLORREF CBCGPVisualManager2007::GetMenuItemTextColor(
    CBCGPToolbarMenuButton* pButton, BOOL bHighlighted, BOOL bDisabled)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetMenuItemTextColor(pButton,
        bHighlighted, bDisabled);
  }

  return bDisabled ? s->m_clrMenuTextDisabled : s->m_clrMenuText;
}
COLORREF CBCGPVisualManager2007::GetHighlightedMenuItemTextColor(CBCGPToolbarMenuButton* pButton)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetHighlightedMenuItemTextColor(pButton);
  }

  return s->m_clrMenuTextHighlighted;
}
void CBCGPVisualManager2007::GetTabFrameColors(const CBCGPBaseTabWnd* pTabWnd,
    COLORREF clrDark,
    COLORREF clrBlack,
    COLORREF clrHighlight,
    COLORREF clrFace,
    COLORREF clrDarkShadow,
    COLORREF clrLight,
    COLORREF& pbrFace,
    COLORREF& pbrBlack)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::GetTabFrameColors(pTabWnd,
        clrDark, clrBlack, clrHighlight, clrFace,
        clrDarkShadow, clrLight, pbrFace, pbrBlack);
    return;
  }

  ASSERT(pTabWnd);
  CBCGPVisualManager2003::GetTabFrameColors(pTabWnd,
      clrDark,
      clrBlack,
      clrHighlight,
      clrFace,
      clrDarkShadow,
      clrLight,
      pbrFace,
      pbrBlack);

  if (!pTabWnd->IsDialogControl()) {
    if (pTabWnd->IsFlatTab()) {
      if (s->m_clrTabFlatFace != CLR_DEFAULT) {
        clrFace = s->m_clrTabFlatFace;
      }

      if (s->m_clrTabFlatBlack != CLR_DEFAULT) {
        clrBlack = s->m_clrTabFlatBlack;
      }

      if (s->m_clrTabFlatDark != CLR_DEFAULT) {
        clrDark = s->m_clrTabFlatDark;
      }

      if (s->m_clrTabFlatDarkShadow != CLR_DEFAULT) {
        clrDarkShadow = s->m_clrTabFlatDarkShadow;
      }

      if (s->m_clrTabFlatLight != CLR_DEFAULT) {
        clrLight = s->m_clrTabFlatLight;
      }

      if (s->m_clrTabFlatHighlight != CLR_DEFAULT) {
        clrHighlight = s->m_clrTabFlatHighlight;
      }
    }
    else {
      if (s->m_clrTab3DFace != CLR_DEFAULT) {
        clrFace = s->m_clrTab3DFace;
      }

      if (s->m_clrTab3DBlack != CLR_DEFAULT) {
        clrBlack = s->m_clrTab3DBlack;
      }

      if (s->m_clrTab3DDark != CLR_DEFAULT) {
        clrDark = s->m_clrTab3DDark;
      }

      if (s->m_clrTab3DDarkShadow != CLR_DEFAULT) {
        clrDarkShadow = s->m_clrTab3DDarkShadow;
      }

      if (s->m_clrTab3DLight != CLR_DEFAULT) {
        clrLight = s->m_clrTab3DLight;
      }

      if (s->m_clrTab3DHighlight != CLR_DEFAULT) {
        clrHighlight = s->m_clrTab3DHighlight;
      }
    }
  }
}
void CBCGPVisualManager2007::OnEraseTabsArea(HDDC hDC, RECT rect,
    const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(hDC);
  ASSERT(pTabWnd);

  if (!CanDrawImage() || pTabWnd->IsDialogControl()) {
    CBCGPVisualManager2003::OnEraseTabsArea(hDC, rect, pTabWnd);
    return;
  }

  if (IsOneNoteStyle ||
      pTabWnd->IsColored() ||
      IsVS2005Style ||
      pTabWnd->IsLeftRightRounded()) {
    CBCGPVisualManager2003::OnEraseTabsArea(hDC, rect, pTabWnd);
    return;
  }

  const BOOL bBottom = pTabWnd->GetLocation() == CBCGPTabWnd::LOCATION_BOTTOM;

  if (pTabWnd->IsFlatTab()) {
    s->m_ctrlTabFlat[bBottom ? 1 : 0].Draw(hDC, rect);
  }
  else {

    COLORREF clr1 = s->m_clrBtnGradientDark;
    COLORREF clr2 = s->m_clrBtnGradientLight;

    if (bBottom) {
      FillGradient(hDC, rect, clr1, clr2, TRUE);
    }
    else {
      FillGradient(hDC, rect, clr2, clr1, TRUE);
    }
  }
}
void CBCGPVisualManager2007::OnDrawTab(HDDC hDC, RECT rectTab,
    int iTab, BOOL bIsActive, const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(pTabWnd);
  ASSERT(hDC);

  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawTab(hDC, rectTab, iTab, bIsActive, pTabWnd);
    return;
  }

  if (IsOneNoteStyle ||
      pTabWnd->IsColored() ||
      IsVS2005Style ||
      pTabWnd->IsLeftRightRounded()) {
    CBCGPVisualManager2003::OnDrawTab(hDC, rectTab, iTab, bIsActive, pTabWnd);
    return;
  }

  const BOOL bBottom = pTabWnd->GetLocation() == CBCGPTabWnd::LOCATION_BOTTOM;
  const BOOL bIsHighlight = iTab == pTabWnd->GetHighlightedTab();
  COLORREF clrText = pTabWnd->GetTabTextColor(iTab);

  if (pTabWnd->IsFlatTab()) {
    int nImage = (bIsActive || bIsHighlight) ? 2 : 1;
    CRgn rgn;
    POINT pts[4];

    if (bBottom) {
      rectTab.bottom++;
      pts[0].x = rectTab.left;
      pts[0].y = rectTab.bottom + 1;
      pts[1].x = rectTab.left;
      pts[1].y = rectTab.top;
      pts[2].x = rectTab.right + 1;
      pts[2].y = rectTab.top;
      pts[3].x = rectTab.right - RCH(&rectTab) + 1;
      pts[3].y = rectTab.bottom + 1;
      rectTab.top++;
    }
    else {
      pts[0].x = rectTab.left;
      pts[0].y = rectTab.bottom + 1;
      pts[1].x = rectTab.left;
      pts[1].y = rectTab.top;
      pts[2].x = rectTab.right - RCH(&rectTab) + 1;
      pts[2].y = rectTab.top;
      pts[3].x = rectTab.right + 1;
      pts[3].y = rectTab.bottom + 1;
    }

    rgn.CreatePolygonRgn(pts, 4, WINDING);
    int isave = hDC->SaveDC();
    hDC->SelectClipRgn(&rgn, RGN_AND);
    s->m_ctrlTabFlat[bBottom ? 1 : 0].Draw(hDC, rectTab, nImage);
    COLORREF _clr = (&s->m_penTabFlatOuter[bIsActive ? 1 : 0]);

    if (bBottom) {
      TMoveTo(hDC, pts[2].x, pts[2].y);
      _LineTo(hDC, pts[3].x, pts[3].y - 1);
    }
    else {
      TMoveTo(hDC, pts[2].x - 1, pts[2].y);
      _LineTo(hDC, pts[3].x - 1, pts[3].y - 1);
    }

    _clr = (&s->m_penTabFlatInner[bIsActive ? 1 : 0]);

    if (bBottom) {
      TMoveTo(hDC, pts[2].x - 2, pts[2].y + 1);
      _LineTo(hDC, pts[3].x, pts[3].y - 2);
    }
    else {
      TMoveTo(hDC, pts[2].x - 1, pts[2].y + 1);
      _LineTo(hDC, pts[3].x - 2, pts[3].y - 1);
    }


    hDC->SelectClipRgn(NULL);
    clrText = globalData.clrBtnText;
    hDC->RestoreDC(isave);
  }
  else {
    if (clrText == 0) {
      clrText = bIsActive
          ? s->m_clrMenuBarBtnTextHighlighted
          : s->m_clrMenuBarBtnText;
    }

    int nImage = bIsActive ? 3 : 0;

    if (bIsHighlight) {
      nImage += 1;
    }

    s->m_ctrlTab3D[bBottom ? 1 : 0].Draw(hDC, rectTab, nImage);

    if (pTabWnd->IsDialogControl()) {
      clrText = globalData.clrBtnText;
    }
  }

  OnDrawTabContent(hDC, rectTab, iTab, bIsActive, pTabWnd, clrText);
}
void CBCGPVisualManager2007::OnFillTab(HDDC hDC, RECT rectFill, COLORREF  pbrFill,
    int iTab, BOOL bIsActive,
    const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(pTabWnd);

  if (!CanDrawImage() || pTabWnd->IsDialogControl()) {
    CBCGPVisualManager2003::OnFillTab(hDC, rectFill, pbrFill,
        iTab, bIsActive, pTabWnd);
    return;
  }

  if (pTabWnd->IsFlatTab() ||
      IsOneNoteStyle ||
      pTabWnd->IsColored() ||
      IsVS2005Style ||
      pTabWnd->IsLeftRightRounded()) {
    CBCGPVisualManager2003::OnFillTab(hDC, rectFill, pbrFill,
        iTab, bIsActive, pTabWnd);
    return;
  }

  ASSERT(hDC);
  const BOOL bBottom = pTabWnd->GetLocation() == CBCGPTabWnd::LOCATION_BOTTOM;
  const BOOL bIsHighlight = iTab == pTabWnd->GetHighlightedTab();
  BOOL bIsBeta = IsBeta();

  if (!bIsBeta || (bIsActive || bIsHighlight)) {
    int nImage = bIsActive
        ? (bIsBeta ? 2 : 3)
          : (bIsBeta ? -1 : 0);

    if (bIsHighlight) {
      nImage += 1;
    }

    s->m_ctrlTab3D[bBottom ? 1 : 0].Draw(hDC, rectFill, nImage);
  }
}
COLORREF CBCGPVisualManager2007::GetTabTextColor(const CBCGPBaseTabWnd* pTabWnd, int iTab, BOOL bIsActive)
{
  if (!CanDrawImage() || pTabWnd->IsDialogControl()) {
    return CBCGPVisualManager2003::GetTabTextColor(pTabWnd, iTab, bIsActive);
  }

  ASSERT(pTabWnd);

  if (IsOneNoteStyle || pTabWnd->GetTabBkColor(iTab) != 0) {
    return CBCGPVisualManager2003::GetTabTextColor(pTabWnd, iTab, bIsActive);
  }

  return bIsActive ? s->m_clrTabTextActive : s->m_clrTabTextInactive;
}
int CBCGPVisualManager2007::GetTabHorzMargin(const CBCGPBaseTabWnd* pTabWnd)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetTabHorzMargin(pTabWnd);
  }

  CBCGPControlRenderer* pRenderer = pTabWnd->IsFlatTab()
      ? &s->m_ctrlTabFlat[0]
      : &s->m_ctrlTab3D[0];

  if (IsOneNoteStyle ||
      pTabWnd->IsColored() ||
      IsVS2005Style ||
      pTabWnd->IsLeftRightRounded() ||
      !pRenderer->IsValid()) {
    return CBCGPVisualManager2003::GetTabHorzMargin(pTabWnd);
  }

  return pRenderer->GetParams().s->m_rectSides.right / 2;
}
BOOL CBCGPVisualManager2007::OnEraseTabsFrame(HDDC hDC, RECT rect, const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(hDC);
  ASSERT(pTabWnd);

  if (!CanDrawImage() || pTabWnd->IsDialogControl()) {
    return CBCGPVisualManager2003::OnEraseTabsFrame(hDC, rect, pTabWnd);
  }

  if (IsOneNoteStyle ||
      pTabWnd->IsColored() ||
      IsVS2005Style ||
      pTabWnd->IsLeftRightRounded()) {
    return CBCGPVisualManager2003::OnEraseTabsFrame(hDC, rect, pTabWnd);
  }

  if (pTabWnd->IsFlatTab()) {
    draw_fillrectR(hDC, &rect, globalData.clrWindow);

    if (pTabWnd->GetLocation() != CBCGPTabWnd::LOCATION_BOTTOM) {
      COLORREF pen = (s->m_clrTabFlatBlack);
      COLORREF _clr = (pen);
      TMoveTo(hDC, rect.left, rect.top + nTabsHeight + 1);
      _LineTo(hDC, rect.right, rect.top + nTabsHeight + 1);

    }

    return TRUE;
  }

  return FALSE;
}
void CBCGPVisualManager2007::OnEraseTabsButton(HDDC hDC, RECT rect,
    CBCGPButton* pButton,
    CBCGPBaseTabWnd* pBaseTab)
{
  ASSERT(hDC);

  ASSERT(pBaseTab);
  CBCGPTabWnd* pWndTab = DYNAMIC_DOWNCAST(CBCGPTabWnd, pBaseTab);

  if (!CanDrawImage() ||
      pWndTab == NULL ||
      pBaseTab->IsDialogControl()) {
    CBCGPVisualManager2003::OnEraseTabsButton(hDC, rect, pButton, pBaseTab);
    return;
  }

  if (pBaseTab->IsFlatTab() ||
      pBaseTab->IsOneNoteStyle() ||
      pBaseTab->IsColored() ||
      pBaseTab->IsVS2005Style() ||
      pBaseTab->IsLeftRightRounded() ||
      (!IsPressed && !IsHighlighted)) {
    CBCGPVisualManager2003::OnEraseTabsButton(hDC, rect, pButton, pBaseTab);
    return;
  }

  CRgn rgn;
  rgn.CreateRectRgnIndirect(rect);
  hDC->SelectClipRgn(&rgn);
  RECT rectTabs;
  pWndTab->GetClientRect(&rectTabs);
  RECT rectTabArea;
  pWndTab->GetTabsRect(rectTabArea);

  if (pWndTab->GetLocation() == LOCATION_BOTTOM) {
    rectTabs.top = rectTabArea.top;
  }
  else {
    rectTabs.bottom = rectTabArea.bottom;
  }

  pWndTab->MapWindowPoints(pButton, rectTabs);
  OnEraseTabsArea(hDC, rectTabs, pWndTab);
  hDC->SelectClipRgn(NULL);
  int index = IsPressed ? 2 : 1;
  s->m_ctrlToolBarBtn.Draw(hDC, rect, index);
}
void CBCGPVisualManager2007::OnDrawTabsButtonBorder(HDDC hDC, RECT& rect,
    CBCGPButton* pButton, UINT uiState,
    CBCGPBaseTabWnd* pWndTab)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawTabsButtonBorder(hDC, rect,
        pButton, uiState,
        pWndTab);
  }
}
void CBCGPVisualManager2007::OnDrawTasksGroupCaption(
    HDDC hDC,
    BOOL bIsHighlighted /*= FALSE*/, BOOL bIsSelected /*= FALSE*/,
    BOOL bCanCollapse /*= FALSE*/)
{
  ASSERT(hDC);
  ASSERT(pGroup);
  ASSERT(pPage);

  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawTasksGroupCaption(
        hDC, pGroup,
        bIsHighlighted, bIsSelected, bCanCollapse);
    return;
  }

  BOOL bIsToolBox = FALSE;
  RECT rectGroup = rect;

  // -----------------------
  // Draw caption background
  // -----------------------
  if (bIsToolBox) {
    RECT rectFill = rectGroup;
    rectFill DeflateRect(&, 1, 1);
    rectFill.bottom--;
    COLORREF clrGrdaient1 = PixelAlpha(
        s->m_clrToolBarGradientDark, 105);
    COLORREF clrGrdaient2 = PixelAlpha(
        s->m_clrToolBarGradientDark, 120);

    FillGradient(hDC, rectFill, clrGrdaient1, clrGrdaient2, TRUE);
    COLORREF brFillBottom(PixelAlpha(s->m_clrToolBarGradientDark, 120));
    RECT rectFillBottom = rectGroup;
    rectFillBottom DeflateRect(&, 1, 0);
    rectFillBottom.top = rectFillBottom.bottom - 1;
    draw_fillrectR(hDC, &rectFillBottom, brFillBottom);

    if (bCanCollapse) {
      //--------------------
      // Draw expanding box:
      //--------------------
      int nBoxSize = 9;
      int nBoxOffset = 6;

      if (GetRibbonImageScale() != 1.) {
        nBoxSize = (int)(.5 + nBoxSize * GetRibbonImageScale());
      }

      RECT rectButton = rectFill;
      rectButton.left += nBoxOffset;
      rectButton.right = rectButton.left + nBoxSize;
      rectButton.top = rectButton CenterPoint(&).y - nBoxSize / 2;
      rectButton.bottom = rectButton.top + nBoxSize;
      OnDrawExpandingBox(hDC, rectButton, !bIsCollapsed,
          globalData.clrBtnText);
      rectGroup.left = rectButton.right + nBoxOffset;
      bCanCollapse = FALSE;
    }
  }
  else {

    if (bIsSpecial) {
      if (IsBeta()) {
        FillGradient(hDC, rect,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighSpecLight : s->m_clrTaskPaneGroupCaptionSpecLight,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighSpecDark : s->m_clrTaskPaneGroupCaptionSpecDark,
            TRUE);
      }
      else {
        dm.Fill4ColorsGradient(rect,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighSpecDark  : s->m_clrTaskPaneGroupCaptionSpecDark,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighSpecLight : s->m_clrTaskPaneGroupCaptionSpecLight,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighSpecLight : s->m_clrTaskPaneGroupCaptionSpecLight,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighSpecDark  : s->m_clrTaskPaneGroupCaptionSpecDark,
            FALSE);
      }
    }
    else {
      if (IsBeta()) {
        FillGradient(hDC, rect,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighLight : s->m_clrTaskPaneGroupCaptionLight,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighDark : s->m_clrTaskPaneGroupCaptionDark,
            TRUE);
      }
      else {
        dm.Fill4ColorsGradient(rect,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighDark  : s->m_clrTaskPaneGroupCaptionDark,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighLight : s->m_clrTaskPaneGroupCaptionLight,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighLight : s->m_clrTaskPaneGroupCaptionLight,
            bIsHighlighted ? s->m_clrTaskPaneGroupCaptionHighDark  : s->m_clrTaskPaneGroupCaptionDark,
            FALSE);
      }
    }
  }

  //-------------
  // Draw border:
  //-------------
  RECT rectBorder = rect;
  rectBorder.bottom++;
  draw_3drect_inR(hDC, &rectBorder, s->m_clrTaskPaneGroupBorder, s->m_clrTaskPaneGroupBorder);
  // ---------------------------
  // Draw an icon if it presents
  // ---------------------------
  BOOL bShowIcon = (hIcon != NULL
      && sizeIcon.cx < rectGroup RCW(&) - rectGroup RCH(&));

  if (bShowIcon) {
    OnDrawTasksGroupIcon(hDC, pGroup, 5, bIsHighlighted, bIsSelected, bCanCollapse);
  }

  // -----------------------
  // Draw group caption text
  // -----------------------
  CFont* pFontOld = _clr = (globalData.fontBold);
  COLORREF clrTextOld = globalData.clrWindowText;

  if (bIsToolBox) {
    hDC->SetTextColor(globalData.clrBtnText);
  }
  else {
    if (bCanCollapse && bIsHighlighted) {
      hDC->SetTextColor(clrTextHot == 0 ?
          (bIsSpecial ? s->m_clrTaskPaneGroupCaptionTextHighSpec : s->m_clrTaskPaneGroupCaptionTextHigh) :
            clrTextHot);
    }
    else {
      hDC->SetTextColor(clrText == 0 ?
          (bIsSpecial ? s->m_clrTaskPaneGroupCaptionTextSpec : s->m_clrTaskPaneGroupCaptionText) :
            clrText);
    }
  }

  int nBkModeOld = hDC->SetBkMode(TRANSPARENT);
  int nTaskPaneHOffset = pPage->s->m_pTaskPane->GetGroupCaptionHorzOffset();
  int nTaskPaneVOffset = pPage->s->m_pTaskPane->GetGroupCaptionVertOffset();
  int nCaptionHOffset = (nTaskPaneHOffset != -1 ? nTaskPaneHOffset : s->m_nGroupCaptionHorzOffset);
  RECT rectText = rectGroup;
  rectText.left += (bShowIcon ? sizeIcon.cx + 5 : nCaptionHOffset) + 5;
  rectText.top += (nTaskPaneVOffset != -1 ? nTaskPaneVOffset : s->m_nGroupCaptionVertOffset);
  rectText.right = MAX(rectText.left,
      rectText.right - (bCanCollapse ? rectGroup RCH(&) : nCaptionHOffset));
  draw_textR(hDC, strName, rectText, DT_SINGLELINE | DT_VCENTER | DT_END_ELLIPSIS);
  hDC->SetBkMode(nBkModeOld);
  _clr = (pFontOld);


  // -------------------------
  // Draw group caption button
  // -------------------------
  if (bCanCollapse && !strName.IsEmpty()) {
    SIZE sizeButton = CBCGPMenuImages::Size();
    RECT rectButton = rectGroup;
    rectButton.left = MAX(rectButton.left,
        rectButton.right - (RCH(&rectButton) + 1) / 2 - (sizeButton.cx + 1) / 2);
    rectButton.top = MAX(rectButton.top,
        rectButton.bottom - (RCH(&rectButton) + 1) / 2 - (sizeButton.cy + 1) / 2);
    rectButton.right = rectButton.left + sizeButton.cx;
    rectButton.bottom = rectButton.top + sizeButton.cy;

    if (rectButton.right <= rectGroup.right & rectButton.bottom <= rectGroup.bottom) {
      if (bIsHighlighted) {
        // Draw button frame
        COLORREF  pBrushOld = (COLORREF) _clr = (globalData.clrBtnFace);
        COLORREF clrBckOld = clrBkColor;
        draw_3drect_inR(hDC, &rectButton, globalData.clrWindow, globalData.clrBtnShadow);
        hDC->SetBkColor(clrBckOld);
        _clr = (pBrushOld);
      }

      DrawMenuImages(hDC,
          bIsCollapsed
          ? IdArowDown
          : IdArowUp,
          rectButton.TopLeft(),
          ImageBlack);
    }
  }
}
void CBCGPVisualManager2007::OnDrawTask(HDDC hDC, CBCGPTask* pTask, CImageList* pIcons,
    BOOL bIsHighlighted /*= FALSE*/, BOOL bIsSelected /*= FALSE*/)
{
  ASSERT(pTask);

  if (CanDrawImage() && bIsSeparator) {
    RECT rectFill = rect;
    rectFill.top = rectFill CenterPoint(&).y;
    rectFill.bottom = rectFill.top + 1;

    dm.Fill4ColorsGradient(rectFill, s->m_clrTaskPaneGroupAreaLight,
        s->m_clrTaskPaneGroupBorder, s->m_clrTaskPaneGroupBorder, s->m_clrTaskPaneGroupAreaLight, FALSE);
    return;
  }

  CBCGPVisualManager2003::OnDrawTask(hDC, pTask, pIcons, bIsHighlighted,
      bIsSelected);
}
void CBCGPVisualManager2007::OnDrawScrollButtons(HDDC hDC, RECT  rect, const int nBorderSize,
    int iImage, BOOL bHilited)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawScrollButtons(hDC, rect, nBorderSize, iImage, bHilited);
    return;
  }

  RECT rt(rect);
  rt.top--;
  s->m_ctrlTaskScrollBtn.Draw(hDC, rt, bHilited ? 1 : 0);
  DrawMenuImages(hDC,  iImage, rect);
}
void CBCGPVisualManager2007::OnDrawHeaderCtrlBorder(HDDC hDC,
    RECT& rect, BOOL bIsPressed, BOOL bIsHighlighted)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawHeaderCtrlBorder(pCtrl, hDC, rect, bIsPressed, bIsHighlighted);
    return;
  }

  COLORREF clrStart  = s->m_clrHeaderNormalStart;
  COLORREF clrFinish = s->m_clrHeaderNormalFinish;
  COLORREF clrBorder = s->m_clrHeaderNormalBorder;

  if (bIsPressed) {
    clrStart  = s->m_clrHeaderPressedStart;
    clrFinish = s->m_clrHeaderPressedFinish;
    clrBorder = s->m_clrHeaderPressedBorder;
  }
  else if (bIsHighlighted) {
    clrStart  = s->m_clrHeaderHighlightedStart;
    clrFinish = s->m_clrHeaderHighlightedFinish;
    clrBorder = s->m_clrHeaderHighlightedBorder;
  }

  {

    FillGradient(hDC, rect, clrFinish, clrStart);
  }

  COLORREF pen(PS_SOLID, 0, clrBorder);
  COLORREF _clr = (pen);

  if (bIsPressed || bIsHighlighted) {
    TMoveTo(hDC, rect.right - 1, rect.top);
    _LineTo(hDC, rect.right - 1, rect.bottom - 1);
    _LineTo(hDC, rect.left, rect.bottom - 1);
    _LineTo(hDC, rect.left, rect.top - 1);
  }
  else {
    TMoveTo(hDC, rect.right - 1, rect.top);
    _LineTo(hDC, rect.right - 1, rect.bottom - 1);
    _LineTo(hDC, rect.left - 1, rect.bottom - 1);
  }


}
void CBCGPVisualManager2007::OnFillGridHeaderBackground(HDDC hDC, RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillGridHeaderBackground(pCtrl, hDC, rect);
    return;
  }

  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
}
BOOL CBCGPVisualManager2007::OnDrawGridHeaderItemBorder(HDDC hDC, RECT rect, BOOL bPressed)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnDrawGridHeaderItemBorder(pCtrl, hDC, rect, bPressed);
  }

  ASSERT(hDC);
  COLORREF clrStart  = bPressed ? s->m_clrGridHeaderPressedStart : s->m_clrGridHeaderNormalStart;
  COLORREF clrFinish = bPressed ? s->m_clrGridHeaderPressedFinish : s->m_clrGridHeaderNormalFinish;
  COLORREF clrBorder = bPressed ? s->m_clrGridHeaderPressedBorder : s->m_clrGridHeaderNormalBorder;
  {

    FillGradient(hDC, rect, clrFinish, clrStart);
  }
  COLORREF _clr = (&s->m_penGridSeparator);
  int nHeight = RCH(&rect) / 5;
  TMoveTo(hDC, rect.right - 1, rect.top + nHeight);
  _LineTo(hDC, rect.right - 1, rect.bottom - nHeight);

  {
    COLORREF pen = (clrBorder);
    _clr = (pen);
    TMoveTo(hDC, rect.left, rect.top);
    _LineTo(hDC, rect.right, rect.top);
    TMoveTo(hDC, rect.left, rect.bottom - 1);
    _LineTo(hDC, rect.right, rect.bottom - 1);

  }
  return FALSE;
}
void CBCGPVisualManager2007::OnFillGridRowHeaderBackground(HDDC hDC, RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillGridRowHeaderBackground(pCtrl, hDC, rect);
    return;
  }

  ASSERT(hDC);
  RECT rectFill = rect;
  rectFill.top += 1;
  draw_fillrectR(hDC, &rectFill, globalData.clrBtnFace);
}
BOOL CBCGPVisualManager2007::OnDrawGridRowHeaderItemBorder(HDDC hDC, RECT rect, BOOL bPressed)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnDrawGridRowHeaderItemBorder(pCtrl, hDC, rect, bPressed);
  }

  ASSERT(hDC);
  RECT rectInnerBorders(1, 1, 1, 0);
  RECT rectOuterBorders(0, 0, 0, 1);
  COLORREF clrStart  = bPressed ? s->m_clrGridHeaderPressedFinish : s->m_clrGridHeaderNormalFinish;
  COLORREF clrFinish = bPressed ? s->m_clrGridHeaderPressedStart : s->m_clrGridHeaderNormalStart;
  COLORREF clrBorder = bPressed ? s->m_clrGridHeaderPressedBorder : s->m_clrGridHeaderNormalBorder;
  {
    RECT rectFill = rect;
    rectFill.top += rectInnerBorders.top;

    FillGradient(hDC, rectFill, clrFinish, clrStart, FALSE);
  }
  COLORREF _clr = (&s->m_penGridSeparator);
  TMoveTo(hDC, rect.left, rect.bottom - 1 + rectOuterBorders.bottom);
  _LineTo(hDC, rect.right, rect.bottom - 1 + rectOuterBorders.bottom);

  {
    COLORREF pen = (clrBorder);
    _clr = (pen);
    TMoveTo(hDC, rect.left, rect.top);
    _LineTo(hDC, rect.left, rect.bottom + rectOuterBorders.bottom);
    TMoveTo(hDC, rect.right - 1, rect.top);
    _LineTo(hDC, rect.right - 1, rect.bottom + rectOuterBorders.bottom);

  }
  return FALSE;
}
void CBCGPVisualManager2007::OnFillGridSelectAllAreaBackground(HDDC hDC, RECT rect, BOOL bPressed)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillGridSelectAllAreaBackground(pCtrl, hDC, rect, bPressed);
    return;
  }

  ASSERT(hDC);
  {

    dm.FillGradient
    (
        rect,
        bPressed ? s->m_clrGridHeaderAllPressedBackFinish : s->m_clrGridHeaderAllNormalBackFinish,
        bPressed ? s->m_clrGridHeaderAllPressedBackStart : s->m_clrGridHeaderAllNormalBackStart
    );
  }
  DeflateRect(&rect, 5, 5);
  int nMin = MIN(RCW(&rect), RCH(&rect));
  rect.left = rect.right  - nMin;
  rect.top  = rect.bottom - nMin;
  POINT ptRgn[] = {
    {rect.right, rect.top},
    {rect.right, rect.bottom},
    {rect.left, rect.bottom}
  };
  CRgn rgn;
  rgn.CreatePolygonRgn(ptRgn, 3, WINDING);
  hDC->SelectClipRgn(&rgn, RGN_COPY);
  {

    dm.FillGradient
    (
        rect,
        bPressed ? s->m_clrGridHeaderAllPressedSignFinish : s->m_clrGridHeaderAllNormalSignFinish,
        bPressed ? s->m_clrGridHeaderAllPressedSignStart : s->m_clrGridHeaderAllNormalSignStart
    );
  }
  hDC->SelectClipRgn(NULL, RGN_COPY);
}
BOOL CBCGPVisualManager2007::OnDrawGridSelectAllAreaBorder(HDDC hDC, RECT rect, BOOL bPressed)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnDrawGridSelectAllAreaBorder(pCtrl, hDC, rect, bPressed);
  }

  ASSERT(hDC);
  COLORREF clrBorder = bPressed ? s->m_clrGridHeaderPressedBorder : s->m_clrGridHeaderNormalBorder;
  draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
  DeflateRect(&rect, 1, 1);
  hDC->Draw3dRect
  (
      rect,
      bPressed ? s->m_clrGridHeaderAllPressedBorderHighlighted : s->m_clrGridHeaderAllNormalBorderHighlighted,
      bPressed ? s->m_clrGridHeaderAllPressedBorderShadow : s->m_clrGridHeaderAllNormalBorderShadow
  );
  return FALSE;
}
COLORREF CBCGPVisualManager2007::OnFillGridGroupByBoxBackground(HDDC hDC, RECT rect)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnFillGridGroupByBoxBackground(hDC, rect);
  }

  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
  return globalData.clrBtnText;
}
COLORREF CBCGPVisualManager2007::OnFillGridGroupByBoxTitleBackground(HDDC hDC, RECT rect)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnFillGridGroupByBoxTitleBackground(hDC, rect);
  }

  ASSERT(hDC);
  return globalData.clrBtnText;
}
void CBCGPVisualManager2007::OnDrawGridGroupByBoxItemBorder(
    HDDC hDC, RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawGridGroupByBoxItemBorder(pCtrl,
        hDC, rect);
    return;
  }

  ASSERT(hDC);
  COLORREF clrStart  = s->m_clrGridHeaderNormalStart;
  COLORREF clrFinish = s->m_clrGridHeaderNormalFinish;
  COLORREF clrBorder = s->m_clrGridHeaderNormalBorder;
  {

    FillGradient(hDC, rect, clrFinish, clrStart);
  }
  draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
}
COLORREF CBCGPVisualManager2007::GetGridLeftOffsetColor()
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetGridLeftOffsetColor(pCtrl);
  }

  return s->m_clrGridLeftOffset;
}
COLORREF CBCGPVisualManager2007::OnFillGridRowBackground(
    HDDC hDC, RECT rectFill, BOOL bSelected)
{
  COLORREF clr = CBCGPVisualManager2003::OnFillGridRowBackground(pCtrl,
      hDC, rectFill, bSelected);

  if (CanDrawImage()) {
    clr = IsHighlightGroups
        ? (pCtrl->IsControlBarColors()
            ? globalData.clrBtnText
            : globalData.clrBtnShadow)
          : globalData.clrWindowText;
  }

  return clr;
}
BOOL CBCGPVisualManager2007::OnSetGridColorTheme(BCGP_GRID_COLOR_DATA& theme)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnSetGridColorTheme(pCtrl, theme);
  }

  theme = s->m_GridColors;
  return TRUE;
}
void CBCGPVisualManager2007::GetGanttColors(const CBCGPGanttChart* pChart, BCGP_GANTT_CHART_COLORS& colors, COLORREF clrBack)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::GetGanttColors(pChart, colors, clrBack);
    return;
  }

  BOOL bIsDefault = FALSE;

  if (clrBack == CLR_DEFAULT) {
    clrBack = s->m_clrPlannerWork;
    bIsDefault = TRUE;
  }

  CBCGPGanttChart::PrepareColorScheme(clrBack, colors);
  colors->clrBackground = globalData.clrWindow;
  colors->clrShadows   = s->m_clrMenuShadowBase;
  colors->clrRowBackground = CalculateWorkingColor(clrBack);
  colors->clrRowDayOff = CalculateNonWorkingColor(clrBack, TRUE);
  colors->clrGridLine0 = CalculateSeparatorColor(clrBack);

  if (bIsDefault) {
    colors->clrGridLine1 = globalData.clrBtnFace;
  }
  else {
    colors->clrGridLine1 = CalculateHourLineColor(clrBack, TRUE, TRUE);
  }

  colors->clrConnectorLines = CalculateSelectionColor(clrBack);
  colors->clrSelection = colors->clrGridLine0;
  colors->clrSelectionBorder = colors->clrConnectorLines;
  double H, S, L;
  RGBtoHSL(_RGB(0, 0, 255), &H, &S, &L);
  colors->clrBtnFill         = HLStoRGB_ONE(H, MAX(L, 0.85) - 0.30, S);
  RGBtoHSL(_RGB(0, 255, 0), &H, &S, &L);
  colors->clrBtnComplete     = HLStoRGB_ONE(H, MAX(L, 0.85) - 0.30, S);
}
void CBCGPVisualManager2007::DrawGanttHeaderCell(const CBCGPGanttChart* pChart, HDDC hDC, const BCGP_GANTT_CHART_HEADER_CELL_INFO& cellInfo, BOOL bHilite)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::DrawGanttHeaderCell(pChart, hDC, cellInfo, bHilite);
    return;
  }

  // Use the same as in grid control
  BOOL bPressed = FALSE; // reserved
  COLORREF clrStart  = bPressed ? s->m_clrGridHeaderPressedStart : s->m_clrGridHeaderNormalStart;
  COLORREF clrFinish = bPressed ? s->m_clrGridHeaderPressedFinish : s->m_clrGridHeaderNormalFinish;
  COLORREF clrBorder = bPressed ? s->m_clrGridHeaderPressedBorder : s->m_clrGridHeaderNormalBorder;
  RECT rect = cellInfo.rectCell;
  // Fill the header
  {
    CBCGPDrawManager dm(hDC);
    FillGradient(hDC, rect, clrFinish, clrStart);
  }
  // Drawing header separator
  {
    COLORREF  pOldPen = hDC.SelectObject(&s->m_penGridSeparator);
    int nHeight = RCH(&rect) / 5;
    hDC.MoveTo(rect.right - 1, rect.top + nHeight);
    hDC.LineTo(rect.right - 1, rect.bottom - nHeight);
    hDC.SelectObject(pOldPen);
  }
  // Drawing header borders
  {
    CBCGPPenSelector pen(hDC, clrBorder);

    if (cellInfo.pHeaderInfo != NULL && cellInfo.pHeaderInfo->bAboveChart) {
      hDC.MoveTo(rect.left, rect.bottom - 1);
      hDC.LineTo(rect.right, rect.bottom - 1);
    }
    else {
      hDC.MoveTo(rect.left, rect.top);
      hDC.LineTo(rect.right, rect.top);
    }
  }
}
COLORREF CBCGPVisualManager2007::GetGanttHeaderTextColor(BOOL bHilite)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetGanttHeaderTextColor(bHilite);
  }

  return bHilite ? globalData.clrHotText : globalData.clrBtnText;
}
BOOL CBCGPVisualManager2007::DrawCheckBox(HDDC hDC, RECT rect,
    BOOL bHighlighted,
    int nState,
    BOOL bEnabled,
    BOOL bPressed)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::DrawCheckBox(hDC, rect, bHighlighted, nState, bEnabled, bPressed);
  }

  int index = nState * 4;

  if (!bEnabled) {
    index += 3;
  }
  else if (bPressed) {
    if (bHighlighted) {
      index += 2;
    }
  }
  else if (bHighlighted) {
    index += 1;
  }

  if (globalData.m_bIsRTL) {
    s->m_ctrlRibbonBtnCheck.Mirror();
  }

  s->m_ctrlRibbonBtnCheck.FillInterior(hDC, rect,
      CBCGPToolBarImages::ImageAlignHorzCenter,
      CBCGPToolBarImages::ImageAlignVertCenter,
      index);

  if (globalData.m_bIsRTL) {
    s->m_ctrlRibbonBtnCheck.Mirror();
  }

  return TRUE;
}
BOOL CBCGPVisualManager2007::DrawRadioButton(HDDC hDC, RECT rect,
    BOOL bHighlighted,
    BOOL bChecked,
    BOOL bEnabled,
    BOOL bPressed)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::DrawRadioButton(hDC, rect, bHighlighted, bChecked, bEnabled, bPressed);
  }

  int index = bChecked ? 4 : 0;

  if (!bEnabled) {
    index += 3;
  }
  else if (bPressed) {
    if (bHighlighted) {
      index += 2;
    }
  }
  else if (bHighlighted) {
    index += 1;
  }

  if (globalData.m_bIsRTL) {
    s->m_ctrlRibbonBtnRadio.Mirror();
  }

  s->m_ctrlRibbonBtnRadio.FillInterior(hDC, rect,
      CBCGPToolBarImages::ImageAlignHorzCenter,
      CBCGPToolBarImages::ImageAlignVertCenter,
      index);

  if (globalData.m_bIsRTL) {
    s->m_ctrlRibbonBtnRadio.Mirror();
  }

  return TRUE;
}
void CBCGPVisualManager2007::OnDrawRibbonCaption(HDDC hDC,
    RECT rectCaption, RECT rectText)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonCaption(hDC, pBar, rectCaption, rectText);
    return;
  }

  ASSERT(hDC);
  CWnd* pWnd = pBar->GetParent();
  ASSERT(pWnd);
  const DWORD dwStyle   = pWnd->GetStyle();
  const DWORD dwStyleEx = pWnd->GetExStyle();
  const BOOL bIsRTL     = (dwStyleEx & WS_EX_LAYOUTRTL) == WS_EX_LAYOUTRTL;
  const BOOL bActive    = IsWindowActive(pWnd);
  const BOOL bGlass   = pBar->IsTransparentCaption();
  {
    SIZE szSysBorder(GetSystemBorders(TRUE));
    RECT rectCaption1(rectCaption);
    RECT rectBorder(s->m_ctrlMainBorderCaption.GetParams().s->m_rectSides);
    RECT rectQAT = rectQuickAccessToolbarLocation;

    if (rectQAT.left > rectQAT.right) {
      rectText.left = rectQAT.left + 1;
    }

    rectCaption1 InflateRect(&, szSysBorder.cx, szSysBorder.cy, szSysBorder.cx, 0);
    BOOL bHide  = (pBar->GetHideFlags() & BCGPRIBBONBAR_HIDE_ALL) != 0;
    BOOL bExtra = !bHide && pBar->IsQuickAccessToolbarOnTop() &&
        rectQAT.left < rectQAT.right &&
        (!pBar->IsQATEmpty() || IsBeta1());

    if (!bGlass) {
      if (IsBeta()) {
        COLORREF clr1  = bActive
            ? s->m_clrAppCaptionActiveStart
            : s->m_clrAppCaptionInactiveStart;
        COLORREF clr2  = bActive
            ? s->m_clrAppCaptionActiveFinish
            : s->m_clrAppCaptionInactiveFinish;
        RECT rectCaption2(rectCaption1);
        rectCaption2 DeflateRect(&, rectBorder.left, rectBorder.top,
            rectBorder.right, rectBorder.bottom);

        dm.Fill4ColorsGradient(rectCaption2, clr1, clr2, clr2, clr1, FALSE);
        s->m_ctrlMainBorderCaption.DrawFrame(hDC, rectCaption1, bActive ? 0 : 1);
      }
      else {
        s->m_ctrlMainBorderCaption.Draw(hDC, rectCaption1, bActive ? 0 : 1);
      }
    }

    BOOL bDrawIcon = (bHide && !bExtra) || IsScenicLook;

    if (bExtra) {
      CBCGPControlRenderer* pCaptionQA = bGlass
          ? &s->m_ctrlRibbonCaptionQA_Glass
          : &s->m_ctrlRibbonCaptionQA;

      if (pCaptionQA->IsValid()) {
        RECT rectQAFrame(rectQAT);
        rectQAFrame.right = pBar->GetQATCommandsLocation().right;
        rectQAFrame InflateRect(&, 0, 1, 1, 1);

        if (!IsScenicLook) {
          const CBCGPControlRendererParams& params = pCaptionQA->GetParams();
          rectQAFrame.left -= params.s->m_rectCorners.left - 2;
          rectQAFrame.right += GetRibbonQATRightMargin();

          if (rectQAFrame RCH(&) < params.s->m_rectImage RCH(&)) {
            rectQAFrame.top = rectQAFrame.bottom - params.s->m_rectImage RCH(&);
          }

          if (bGlass) {
            const int dxFrame = GetSystemMetrics(Ss->m_CXSIZEFRAME) / 2;
            const int nTop = GetRibbonImageScale() != 1. ? -2 : 1;
            rectQAFrame DeflateRect(&, 1, nTop, dxFrame, 0);
          }

          pCaptionQA->Draw(hDC, rectQAFrame, bActive ? 0 : 1);
        }
        else {
          rectQAFrame DeflateRect(&, 0, 4, 0, 6);
          RECT rectSep(rectQAFrame);
          rectSep.left -= 2;
          rectSep.right = rectSep.left + 2;
          DrawSeparator(hDC, rectSep, s->m_penSeparatorDark, s->m_penSeparatorLight, FALSE);
          rectSep.left = rectText.left - 6;
          rectSep.right = rectSep.left + 2;
          DrawSeparator(hDC, rectSep, s->m_penSeparatorDark, s->m_penSeparatorLight, FALSE);
        }
      }
    }

    if (bDrawIcon) {
      BOOL bDestroyIcon = FALSE;
      HICON hIcon = globalUtils.GetWndIcon(pWnd, &bDestroyIcon);

      if (hIcon != NULL) {
        SIZE szIcon(GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON));
        long x = rectCaption.left + 2;
        long y = rectCaption.top  + MAX(0, (rectCaption RCH(&) - szIcon.cy) / 2);

        if (bGlass) {
          globalData.DrawIconOnGlass(s->m_hThemeWindow, hDC, hIcon, RECT(x, y, x + szIcon.cx, y + szIcon.cy));
        }
        else {
          ::DrawIconEx(hDC, x, y, hIcon, szIcon.cx, szIcon.cy,
              0, NULL, DI_NORMAL);
        }

        if (rectText.left < (x + szIcon.cx + 4)) {
          rectText.left = x + szIcon.cx + 4;
        }

        if (bDestroyIcon) {
          ::DestroyIcon(hIcon);
        }
      }
    }
  }
  const char* strText;
  pWnd->GetWindowText(strText);
  CFont* pOldFont = (CFont*)_clr = (&s->m_AppCaptionFont);
  ASSERT(pOldFont != NULL);
  const char* strTitle(strText);
  const char* strDocument;
  BOOL bPrefix = FALSE;

  if ((dwStyle & FWS_ADDTOTITLE) == FWS_ADDTOTITLE) {
    bPrefix = (dwStyle & FWS_PREFIXTITLE) == FWS_PREFIXTITLE;
    CFrameWnd* pFrameWnd = DYNAMIC_DOWNCAST(CFrameWnd, pWnd);

    if (pFrameWnd != NULL) {
      strTitle = pFrameWnd->GetTitle();

      if (!strTitle.IsEmpty()) {
        if (strText.GetLength() >= strTitle.GetLength()) {
          if (bPrefix) {
            int pos = strText.Find(strTitle, strText.GetLength() - strTitle.GetLength());

            if (pos != -1) {
              strTitle = strText.Right(strTitle.GetLength() + 3);
              strDocument = strText.Left(strText.GetLength() - strTitle.GetLength());
            }
          }
          else {
            int pos = strText.Find(strTitle);

            if (pos != -1) {
              strTitle = strText.Left(strTitle.GetLength() + 3);
              strDocument = strText.Right(strText.GetLength() - strTitle.GetLength());
            }
          }
        }
      }
      else {
        strDocument = strText;
      }
    }
  }

  DrawNcText(hDC, rectText, strTitle, strDocument, bPrefix, bActive,
      bIsRTL, s->m_bNcTextCenter && !IsScenicLook, bGlass, pWnd->IsZoomed() ? 0 : 10,
      pWnd->IsZoomed() ? _RGB(255, 255, 255) : 0);
  _clr = (pOldFont);
}
int CBCGPVisualManager2007::GetRibbonQATRightMargin()
{
  if (!CanDrawImage() ||
      !s->m_ctrlRibbonCaptionQA.IsValid()) {
    return CBCGPVisualManager2003::GetRibbonQATRightMargin();
  }

  return s->m_ctrlRibbonCaptionQA.GetParams().s->m_rectSides.right;
}
void CBCGPVisualManager2007::OnDrawRibbonCaptionButton(
    HDDC hDC)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonCaptionButton(hDC, pButton);
    return;
  }

  ASSERT(hDC);

  const BOOL bHighlighted = IsHighlighted || IsFocused;
  const BOOL bPressed = IsPressed;
  int state = ButtonsIsRegular;

  if (bPressed) {
    if (bHighlighted) {
      state = ButtonsIsPressed;
    }
  }
  else if (bHighlighted) {
    state = ButtonsIsHighlighted;
  }

  const BOOL bMDI = pButton->IsMDIChildButton();
  BOOL bActive = TRUE;

  if (!bMDI) {
    CBCGPRibbonBar* pBar = pButton->GetParentRibbonBar();

    if (pBar->GetSafeHwnd() != NULL) {
      CWnd* pWnd = pBar->GetParent();
      ASSERT(pWnd);
      bActive = IsWindowActive(pWnd);
    }
  }

  DrawNcBtn(hDC, rect, nID, state, FALSE, bActive, pButton->IsMDIChildButton());
}
COLORREF CBCGPVisualManager2007::OnDrawRibbonButtonsGroup(
    HDDC hDC, CBCGPRibbonButtonsGroup* pGroup,
    RECT rectGroup)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnDrawRibbonButtonsGroup(hDC, pGroup, rectGroup);
  }

  ASSERT(hDC);
  ASSERT(pGroup);

  if (pGroup->IsKindOf(RUNTIME_CLASS(CBCGPRibbonQuickAccessToolbar)) &&
      s->m_ctrlRibbonPanelQAT.IsValid()) {
    CBCGPRibbonBar* pBar = pGroup->GetParentRibbonBar();

    if (pBar != NULL &&
        (pBar->GetHideFlags() & BCGPRIBBONBAR_HIDE_ALL) == 0 &&
        !pBar->IsQuickAccessToolbarOnTop()) {
      s->m_ctrlRibbonPanelQAT.Draw(hDC, rectGroup);
    }
  }

  return 0;
}
void CBCGPVisualManager2007::OnDrawDefaultRibbonImage(HDDC hDC, RECT rectImage,
    BOOL bIsDisabled/* = FALSE*/,
    BOOL bIsPressed/* = FALSE*/,
    BOOL bIsHighlighted/* = FALSE*/)
{
  if (!CanDrawImage() || !s->m_RibbonBtnDefaultImage.IsValid()) {
    CBCGPVisualManager2003::OnDrawDefaultRibbonImage(hDC, rectImage,
        bIsDisabled, bIsPressed, bIsHighlighted);
    return;
  }

  s->m_RibbonBtnDefaultImage.DrawEx(hDC, rectImage, bIsDisabled ? 1 : 0,
      CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter);
}
void CBCGPVisualManager2007::OnDrawRibbonMainButton(
    HDDC hDC,
)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonMainButton(hDC, pButton);
    return;
  }

  ASSERT(hDC);

  BOOL bHighlighted = IsHighlighted || IsFocused;
  BOOL bPressed = IsPressed;

  if (IsDroppedDown) {
    bPressed = TRUE;
    bHighlighted = TRUE;
  }

  RECT rect = rect;
  int index = 0;

  if (bPressed) {
    if (bHighlighted) {
      index = 2;
    }
  }
  else if (bHighlighted) {
    index = 1;
  }

  if (!pButton->GetParentRibbonBar()->IsScenicLook()) {
    RECT rectImage(s->m_RibbonBtnMain.GetParams().s->m_rectImage);
    CBCGPToolBarImages::ImageAlignHorz horz = CBCGPToolBarImages::ImageAlignHorzStretch;
    CBCGPToolBarImages::ImageAlignVert vert = CBCGPToolBarImages::ImageAlignVertStretch;

    if (RCW(&rect) >= rectImage RCW(&) &&
        RCH(&rect) >= rectImage RCH(&) &&
        (GetRibbonImageScale() == 1. || s->m_RibbonBtnMain.IsScaled())) {
      horz = CBCGPToolBarImages::ImageAlignHorzCenter;
      vert = CBCGPToolBarImages::ImageAlignVertCenter;
    }

    OffsetRect(&rect, 1, -1);
    s->m_RibbonBtnMain.FillInterior(hDC, rect, horz, vert, index);
  }
  else {
    s->m_ctrlRibbonBtnGroup_S.Draw(hDC, rect, index);
  }
}
COLORREF CBCGPVisualManager2007::OnDrawRibbonTabsFrame(
    HDDC hDC,
    CBCGPRibbonBar* pWndRibbonBar,
    RECT rectTab)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnDrawRibbonTabsFrame(hDC,
        pWndRibbonBar, rectTab);
  }

  return s->m_clrRibbonCategoryText;
}
void CBCGPVisualManager2007::OnDrawRibbonCategory(
    HDDC hDC,

    RECT rectCategory)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonCategory(hDC, pCategory, rectCategory);
    return;
  }

  if (pCategory->IsOnDialogBar()) {

    FillGradient(hDC, rectCategory, s->m_clrToolBarGradientDark, s->m_clrToolBarGradientLight, TRUE);
    return;
  }

  CBCGPControlRenderer* pRenderer = &s->m_ctrlRibbonCategoryBack;
  CBCGPBitmapCache* pCache = &s->m_cacheRibbonCategoryBack;
  CBCGPBaseRibbonElement* pParentButton = pCategory->GetParentButton();

  if (pCategory->GetTabColor() != BCGPCategoryColor_None &&
      (pParentButton == NULL || !pParentButton->IsQATMode())) {
    XRibbonContextCategory& context =
        s->m_ctrlRibbonContextCategory[pCategory->GetTabColor() - 1];
    pRenderer = &context.s->m_ctrlBack;
    pCache    = &context.s->m_cacheBack;
  }

  const CBCGPControlRendererParams& params = pRenderer->GetParams();
  CBCGPRibbonPanelMenuBar* pMenuBar = pCategory->GetParentMenuBar();

  if (pMenuBar != NULL) {
    if (pMenuBar->GetCategory() != NULL) {
      if (rectCategory.left < 0 || rectCategory.top < 0) {

        FillGradient(hDC, rectCategory, s->m_clrBtnGradientDark, s->m_clrBtnGradientLight, TRUE);
        return;
      }
    }
    else if (pMenuBar->GetPanel() != NULL) {
      if (IsBeta()) {
        pRenderer->FillInterior(hDC, rectCategory);
        return;
      }
    }
  }

  int nCacheIndex = -1;

  if (pCache != NULL) {
    SIZE size(params.s->m_rectImage RCW(&), rectCategory RCH(&));
    nCacheIndex = pCache->FindIndex(size);

    if (nCacheIndex == -1) {
      nCacheIndex = pCache->CacheY(size.cy, *pRenderer);
    }
  }

  if (nCacheIndex != -1) {
    pCache->Get(nCacheIndex)->DrawY(hDC, rectCategory,
        SIZE(params.s->m_rectInter.left, params.s->m_rectImage.right - params.s->m_rectInter.right));
  }
  else {
    pRenderer->Draw(hDC, rectCategory);
  }
}
void CBCGPVisualManager2007::OnDrawRibbonCategoryScroll(
    HDDC hDC,
)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonCategoryScroll(hDC, pScroll);
    return;
  }

  ASSERT(hDC);

  RECT rect = pScroll->GetRect();
  CBCGPControlRenderer* pRenderer =
      &s->m_ctrlRibbonCategoryBtnPage[pScroll->IsLeftScroll() ? 0 : 1];
  int index = 0;

  if (pScroll->IsPressed()) {
    index = 1;

    if (IsHighlighted) {
      index = 2;
    }
  }
  else if (IsHighlighted) {
    index = 1;
  }

  pRenderer->Draw(hDC, rect, index);
  BOOL bIsLeft = pScroll->IsLeftScroll();

  if (globalData.m_bIsRTL) {
    bIsLeft = !bIsLeft;
  }

  DrawMenuImages(hDC,
      bIsLeft ? IdArowLeftLarge : IdArowRightLarge,
      rect);
}
COLORREF CBCGPVisualManager2007::OnDrawRibbonCategoryTab(
    HDDC hDC,

    BOOL bIsActive)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnDrawRibbonCategoryTab(hDC,
        pTab, bIsActive);
  }

  ASSERT(hDC);

  CBCGPRibbonCategory* pCategory = pTab->GetParentCategory();

  CBCGPRibbonBar* pBar = pCategory->GetParentRibbonBar();
  bIsActive = bIsActive &&
      ((pBar->GetHideFlags() & BCGPRIBBONBAR_HIDE_ELEMENTS) == 0 || pTab->GetDroppedDown() != NULL);
  const BOOL bPressed     = pTab->IsPressed();
  const BOOL bIsFocused = pTab->IsFocused() && (pBar->GetHideFlags() & BCGPRIBBONBAR_HIDE_ELEMENTS);
  const BOOL bIsHighlight = (pTab->IsHighlighted() || bIsFocused) && !pTab->IsDroppedDown();
  RECT rectTab(pTab->GetRect());
  rectTab.bottom++;
  int ratio = 0;

  if (!IsBeta() && s->m_ctrlRibbonCategoryTabSep.IsValid()) {
    ratio = pBar->GetTabTrancateRatio();
  }

  if (ratio > 0) {
    rectTab.left++;
  }

  int nImage = bIsActive ? 3 : 0;

  if (bPressed) {
    if (bIsHighlight) {
      nImage = bIsActive ? 2 : 1;
    }
  }

  if (bIsHighlight) {
    nImage += 1;
  }

  CBCGPControlRenderer* pRenderer = &s->m_ctrlRibbonCategoryTab;
  COLORREF clrText = s->m_clrRibbonCategoryText;
  COLORREF clrTextHighlighted = s->m_clrRibbonCategoryTextHighlighted;

  if (pCategory->GetTabColor() != BCGPCategoryColor_None || IsSelected) {
    XRibbonContextCategory& context =
        s->m_ctrlRibbonContextCategory[
            (IsSelected || nImage == 4)
            ? BCGPCategoryColor_Orange - 1
            : pCategory->GetTabColor() - 1];
    pRenderer = &context.s->m_ctrlTab;
    clrText  = context.s->m_clrText;
    clrTextHighlighted = context.s->m_clrTextHighlighted;
  }

  pRenderer->Draw(hDC, rectTab, nImage);

  if (ratio > 0) {
    RECT rectSep(rectTab);
    rectSep.left = rectSep.right;
    rectSep.right++;
    rectSep.bottom--;
    s->m_ctrlRibbonCategoryTabSep.Draw(hDC, rectSep, 0, (BYTE)MIN(ratio * 255 / 100, 255));
  }

  return bIsActive
      ? clrTextHighlighted
      : clrText;
}
COLORREF CBCGPVisualManager2007::OnDrawRibbonPanel(
    HDDC hDC,

    RECT rectPanel,
    RECT rectCaption)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnDrawRibbonPanel(hDC,
        pPanel, rectPanel, rectCaption);
  }

  ASSERT(hDC);

  COLORREF clrText = s->m_clrRibbonPanelText;

  if (pPanel->IsKindOf(RUNTIME_CLASS(CBCGPRibbonMainPanel))) {
    const int nBorderSize = GetPopupMenuBorderSize();
    rectPanel InflateRect(&, nBorderSize, nBorderSize);
    s->m_ctrlRibbonMainPanel.Draw(hDC, rectPanel);
  }
  else {
    BOOL bHighlighted = IsHighlighted;

    if (bHighlighted) {
      clrText = s->m_clrRibbonPanelTextHighlighted;
    }

    if (!pPanel->IsScenicLook()) {
      CBCGPControlRenderer* pRendererB = &s->m_ctrlRibbonPanelBack_B;
      CBCGPControlRenderer* pRendererT = &s->m_ctrlRibbonPanelBack_T;
      CBCGPBitmapCache* pCacheB = &s->m_cacheRibbonPanelBack_B;
      CBCGPBitmapCache* pCacheT = &s->m_cacheRibbonPanelBack_T;
      CBCGPRibbonCategory* pCategory = pPanel->GetParentCategory();

      CBCGPBaseRibbonElement* pParentButton = pPanel->GetParentButton();

      if (pCategory->GetTabColor() != BCGPCategoryColor_None &&
          (pParentButton == NULL || !pParentButton->IsQATMode())) {
        pRendererB = &s->m_ctrlRibbonContextPanelBack_B;
        pRendererT = &s->m_ctrlRibbonContextPanelBack_T;
        pCacheB = &s->m_cacheRibbonContextPanelBack_B;
        pCacheT = &s->m_cacheRibbonContextPanelBack_T;
        clrText = bHighlighted
            ? s->m_clrRibbonContextPanelTextHighlighted
            : s->m_clrRibbonContextPanelText;
      }

      if (!IsCollapsed) {
        RECT rect(rectPanel);
        BOOL bDrawCaption = rectCaption RCH(&) > 0 && pRendererT->IsValid();

        if (bDrawCaption) {
          BOOL bBottomEnabled = pRendererB->IsValid();

          if (bBottomEnabled) {
            rect.bottom -= rectCaption RCH(&) == 0
                ? pRendererB->GetParams().s->m_rectImage RCH(&)
                : rectCaption RCH(&);
          }

          {
            const CBCGPControlRendererParams& params = pRendererT->GetParams();
            int nCacheIndex = -1;

            if (pCacheT != NULL) {
              SIZE size(params.s->m_rectImage RCW(&), RCH(&rect));
              nCacheIndex = pCacheT->FindIndex(size);

              if (nCacheIndex == -1) {
                nCacheIndex = pCacheT->CacheY(size.cy, *pRendererT);
              }
            }

            if (nCacheIndex != -1) {
              pCacheT->Get(nCacheIndex)->DrawY(hDC, rect,
                  SIZE(params.s->m_rectInter.left, params.s->m_rectImage.right - params.s->m_rectInter.right),
                  bHighlighted ? 1 : 0);
            }
            else {
              pRendererT->Draw(hDC, rect, bHighlighted ? 1 : 0);
            }
          }

          if (bBottomEnabled) {
            rect.top = rect.bottom;
            rect.bottom = rectPanel.bottom;
            const CBCGPControlRendererParams& params = pRendererB->GetParams();
            int nCacheIndex = -1;

            if (pCacheB != NULL) {
              SIZE size(params.s->m_rectImage RCW(&), RCH(&rect));
              nCacheIndex = pCacheB->FindIndex(size);

              if (nCacheIndex == -1) {
                nCacheIndex = pCacheB->CacheY(size.cy, *pRendererB);
              }
            }

            if (nCacheIndex != -1) {
              pCacheB->Get(nCacheIndex)->DrawY(hDC, rect,
                  SIZE(params.s->m_rectInter.left, params.s->m_rectImage.right - params.s->m_rectInter.right),
                  bHighlighted ? 1 : 0);
            }
            else {
              pRendererB->Draw(hDC, rect, bHighlighted ? 1 : 0);
            }
          }
        }
      }
    }
    else if (!pPanel->IsMenuMode() && !IsCollapsed) {
      rectPanel.left = rectPanel.right;
      rectPanel.right += 2;
      rectPanel DeflateRect(&, 0, 4);
      DrawSeparator(hDC, rectPanel, s->m_penSeparatorDark, s->m_penSeparatorLight, FALSE);
    }
  }

  return clrText;
}
void CBCGPVisualManager2007::OnDrawRibbonPanelCaption(
    HDDC hDC,

    RECT rectCaption)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonPanelCaption(hDC,
        pPanel, rectCaption);
    return;
  }

  if (pPanel->IsKindOf(RUNTIME_CLASS(CBCGPRibbonMainPanel))) {
    return;
  }

  const char* str = pPanel->GetName();

  if (!str.IsEmpty()) {
    if (pPanel->GetLaunchButton().GetID() > 0) {
      rectCaption.right = pPanel->GetLaunchButton().GetRect().left;
      rectCaption DeflateRect(&, 1, 1);
      rectCaption OffsetRect(&, -1, -1);
    }
    else {
      rectCaption DeflateRect(&, 1, 1);

      if ((rectCaption RCW(&) % 2) == 0) {
        rectCaption.right--;
      }

      rectCaption OffsetRect(&, 0, -1);
    }

    COLORREF clrTextOld = hDC->SetTextColor(IsHighlighted ?
        s->m_clrRibbonPanelCaptionTextHighlighted : s->m_clrRibbonPanelCaptionText);
    draw_textR(hDC, str, rectCaption,
        DT_SINGLELINE | DT_CENTER | DT_VCENTER | DT_END_ELLIPSIS | DT_NOPREFIX);

  }
}
void CBCGPVisualManager2007::OnDrawRibbonLaunchButton(
    HDDC hDC,

)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonLaunchButton(hDC,
        pButton, pPanel);
    return;
  }

  ASSERT(hDC);


  RECT rect(rect);

  if (!IsBeta()) {
    rect.right--;
    rect.bottom--;
  }

  BOOL bHighlighted = IsHighlighted || IsFocused;
  int index = 0;

  if (s->m_RibbonBtnLaunchIcon.GetCount() > 3) {
    if (IsDisabled) {
      index = 3;
    }
    else if (IsPressed) {
      if (bHighlighted) {
        index = 2;
      }
    }
    else if (bHighlighted) {
      index = 1;
    }
  }
  else {
    if (!IsDisabled) {
      if (IsPressed) {
        if (bHighlighted) {
          index = 2;
        }
      }
      else if (bHighlighted) {
        index = 1;
      }
    }
  }

  if (s->m_ctrlRibbonBtnLaunch.IsValid()) {
    s->m_ctrlRibbonBtnLaunch.Draw(hDC, rect, index);
  }

  if (s->m_RibbonBtnLaunchIcon.IsValid()) {
    s->m_RibbonBtnLaunchIcon.DrawEx(hDC, rect, index,
        CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter);
  }
}
COLORREF CBCGPVisualManager2007::OnFillRibbonButton(
    HDDC hDC,
)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnFillRibbonButton(hDC, pButton);
  }

  ASSERT(hDC);

  const BOOL bIsMenuMode = IsMenuMode;
  RECT rect(rect);
  CBCGPControlRenderer* pRenderer = NULL;
  CBCGPBitmapCache* pCache = NULL;
  int index = 0;
  BOOL bDisabled    = IsDisabled;
  BOOL bWasDisabled = bDisabled;
  BOOL bFocused     = IsFocused;
  BOOL bDroppedDown = IsDroppedDown;
  BOOL bPressed     = IsPressed && !bIsMenuMode;
  BOOL bChecked     = IsChecked;
  BOOL bHighlighted = IsHighlighted || bFocused;
  BOOL bDefaultPanelButton = pButton->IsDefaultPanelButton() && !IsQATMode;

  if (bFocused) {
    bDisabled = FALSE;
  }

  if (IsDroppedDown && !bIsMenuMode) {
    bChecked     = TRUE;
    bPressed     = FALSE;
    bHighlighted = FALSE;
  }

  CBCGPBaseRibbonElement::RibbonElementLocation location =
      pButton->GetLocationInGroup();

  if (IsRibbonEdit) {
    COLORREF color1 = s->m_clrRibbonEdit;

    if (bDisabled) {
      color1 = s->m_clrRibbonEditDisabled;
    }
    else if (bChecked || bHighlighted) {
      color1 = s->m_clrRibbonEditHighlighted;
    }

    COLORREF color2 = color1;
    rect.left = pButton->GetCommandRect().left;
    {

      FillGradient(hDC, rect, color1, color2, TRUE);
    }
    return 0;
  }

  if (bChecked && bIsMenuMode && !pButton->IsPaletteIcon()) {
    bChecked = FALSE;
  }

  if (location != CBCGPBaseRibbonElement::RibbonElementNotInGroup &&
      pButton->IsShowGroupBorder()) {
    if (!pButton->GetMenuRect().IsRectEmpty()) {
      RECT rectC = pButton->GetCommandRect();
      RECT rectM = pButton->GetMenuRect();
      CBCGPControlRenderer* pRendererC = NULL;
      CBCGPControlRenderer* pRendererM = NULL;
      CBCGPBitmapCache* pCacheC = NULL;
      CBCGPBitmapCache* pCacheM = NULL;

      if (location == CBCGPBaseRibbonElement::RibbonElementSingleInGroup) {
        pRendererC = &s->m_ctrlRibbonBtnGroupMenu_F[0];
        pRendererM = &s->m_ctrlRibbonBtnGroupMenu_L[1];
        pCacheC = &s->m_cacheRibbonBtnGroupMenu_F[0];
        pCacheM = &s->m_cacheRibbonBtnGroupMenu_L[1];
      }
      else if (location == CBCGPBaseRibbonElement::RibbonElementFirstInGroup) {
        pRendererC = &s->m_ctrlRibbonBtnGroupMenu_F[0];
        pRendererM = &s->m_ctrlRibbonBtnGroupMenu_F[1];
        pCacheC = &s->m_cacheRibbonBtnGroupMenu_F[0];
        pCacheM = &s->m_cacheRibbonBtnGroupMenu_F[1];
      }
      else if (location == CBCGPBaseRibbonElement::RibbonElementLastInGroup) {
        pRendererC = &s->m_ctrlRibbonBtnGroupMenu_L[0];
        pRendererM = &s->m_ctrlRibbonBtnGroupMenu_L[1];
        pCacheC = &s->m_cacheRibbonBtnGroupMenu_L[0];
        pCacheM = &s->m_cacheRibbonBtnGroupMenu_L[1];
      }
      else {
        pRendererC = &s->m_ctrlRibbonBtnGroupMenu_M[0];
        pRendererM = &s->m_ctrlRibbonBtnGroupMenu_M[1];
        pCacheC = &s->m_cacheRibbonBtnGroupMenu_M[0];
        pCacheM = &s->m_cacheRibbonBtnGroupMenu_M[1];
      }

      int indexC = 0;
      int indexM = 0;
      BOOL bHighlightedC = pButton->IsCommandAreaHighlighted();
      BOOL bHighlightedM = pButton->IsMenuAreaHighlighted();

      if (IsBeta()) {
        if (bChecked) {
          indexC = 3;
        }

        if (bDisabled) {
          indexC = 0;
        }
        else {
          if (IsDroppedDown && !bIsMenuMode) {
            indexC = IsChecked ? 3 : 0;
            indexM = 3;
          }
          else {
            if (bPressed) {
              if (bHighlightedC) {
                indexM = 1;
                indexC = 2;
              }
            }
            else if (bHighlighted) {
              indexC++;
              indexM = 1;
            }
          }
        }
      }
      else {
        if (bChecked) {
          indexC = 3;

          if (bHighlighted) {
            indexM = 5;
          }
        }

        if (bDisabled) {
          if (bChecked) {
            indexC = 5;
            indexM = 4;
          }
        }
        else {
          if (IsDroppedDown && !bIsMenuMode) {
            indexC = IsChecked ? 3 : 6;
            indexM = 3;
          }
          else {
            if (bFocused) {
              indexC = 6;
              indexM = 5;
            }

            if (bHighlightedC || bHighlightedM) {
              if (bChecked) {
                indexC = bHighlightedC ? 4 : 3;
              }
              else {
                indexC = bHighlightedC ? 1 : 6;
              }

              indexM = bHighlightedM ? 1 : 5;
            }

            if (bPressed) {
              if (bHighlightedC) {
                indexC = 2;
              }
            }
          }
        }
      }

      if (indexC != -1 && indexM != -1) {
        int nCacheIndex = -1;

        if (pCacheC != NULL) {
          SIZE size(rectC.Size());
          nCacheIndex = pCacheC->FindIndex(size);

          if (nCacheIndex == -1) {
            nCacheIndex = pCacheC->Cache(size, *pRendererC);
          }
        }

        if (nCacheIndex != -1) {
          pCacheC->Get(nCacheIndex)->Draw(hDC, rectC, indexC);
        }
        else {
          pRendererC->Draw(hDC, rectC, indexC);
        }

        nCacheIndex = -1;

        if (pCacheM != NULL) {
          SIZE size(rectM.Size());
          nCacheIndex = pCacheM->FindIndex(size);

          if (nCacheIndex == -1) {
            nCacheIndex = pCacheM->Cache(size, *pRendererM);
          }
        }

        if (nCacheIndex != -1) {
          pCacheM->Get(nCacheIndex)->Draw(hDC, rectM, indexM);
        }
        else {
          pRendererM->Draw(hDC, rectM, indexM);
        }
      }

      return 0;
    }
    else {
      if (location == CBCGPBaseRibbonElement::RibbonElementSingleInGroup) {
        pRenderer = &s->m_ctrlRibbonBtnGroup_S;
        pCache    = &s->m_cacheRibbonBtnGroup_S;
      }
      else if (location == CBCGPBaseRibbonElement::RibbonElementFirstInGroup) {
        pRenderer = &s->m_ctrlRibbonBtnGroup_F;
        pCache    = &s->m_cacheRibbonBtnGroup_F;
      }
      else if (location == CBCGPBaseRibbonElement::RibbonElementLastInGroup) {
        pRenderer = &s->m_ctrlRibbonBtnGroup_L;
        pCache    = &s->m_cacheRibbonBtnGroup_L;
      }
      else {
        pRenderer = &s->m_ctrlRibbonBtnGroup_M;
        pCache    = &s->m_cacheRibbonBtnGroup_M;
      }

      if (bChecked) {
        index = 3;
      }

      if (bDisabled && !bFocused) {
        index = 0;
      }
      else {
        if (bPressed) {
          if (bHighlighted) {
            index = 2;
          }
        }
        else if (bHighlighted) {
          index++;
        }
      }
    }
  }
  else if (bDefaultPanelButton) {
    if (bPressed) {
      if (bHighlighted) {
        index = 2;
      }
    }
    else if (bHighlighted) {
      index = 1;
    }
    else if (bChecked) {
      index = 2;
    }

    if (bFocused && !bDroppedDown && s->m_ctrlRibbonBtnDefault.GetImageCount() > 3) {
      index = 3;
    }

    if (index != -1) {
      pRenderer = &s->m_ctrlRibbonBtnDefault;
      CBCGPBitmapCache* pCache = &s->m_cacheRibbonBtnDefault;
      CBCGPRibbonCategory* pCategory = pButton->GetParentCategory();

      if (pCategory != NULL) {


        if (pCategory->GetTabColor() != BCGPCategoryColor_None) {
          XRibbonContextCategory& context =
              s->m_ctrlRibbonContextCategory[pCategory->GetTabColor() - 1];
          pRenderer = &context.s->m_ctrlBtnDefault;
          pCache    = &context.s->m_cacheBtnDefault;
        }
      }

      const CBCGPControlRendererParams& params = pRenderer->GetParams();
      int nCacheIndex = -1;

      if (pCache != NULL) {
        SIZE size(params.s->m_rectImage RCW(&), RCH(&rect));
        nCacheIndex = pCache->FindIndex(size);

        if (nCacheIndex == -1) {
          nCacheIndex = pCache->CacheY(size.cy, *pRenderer);
        }
      }

      if (nCacheIndex != -1) {
        pCache->Get(nCacheIndex)->DrawY(hDC, rect,
            SIZE(params.s->m_rectInter.left, params.s->m_rectImage.right - params.s->m_rectInter.right),
            index);
        return s->m_clrToolBarBtnTextHighlighted;
      }
    }
  }
  else if ((!bDisabled && (bPressed || bChecked || bHighlighted)) ||
      (bDisabled && bFocused)) {
    if (!pButton->GetMenuRect().IsRectEmpty()/* &&
      (pButton->IsHighlighted () || bChecked)*/) {
      RECT rectC = pButton->GetCommandRect();
      RECT rectM = pButton->GetMenuRect();
      CBCGPControlRenderer* pRendererC = IsMenuOnBottom
          ? &s->m_ctrlRibbonBtnMenuV[0]
          : &s->m_ctrlRibbonBtnMenuH[0];
      CBCGPControlRenderer* pRendererM = IsMenuOnBottom
          ? &s->m_ctrlRibbonBtnMenuV[1]
          : &s->m_ctrlRibbonBtnMenuH[1];
      int indexC = -1;
      int indexM = -1;
      BOOL bDropped      = IsDroppedDown;
      BOOL bHighlightedC = pButton->IsCommandAreaHighlighted();
      BOOL bHighlightedM = pButton->IsMenuAreaHighlighted();

      if (IsBeta()) {
        if (bChecked) {
          indexC = 2;
          indexM = 2;
        }

        if (bDisabled) {
          if (bChecked) {
            // TODO
          }
        }
        else {
          if (bDropped && !bIsMenuMode) {
            indexC = bChecked ? 2 : 4;
            indexM = 2;
          }
          else {
            if (bPressed) {
              if (bHighlighted) {
                if (bHighlightedC) {
                  indexC = 1;
                }
                else {
                  indexC = bChecked ? indexC : 0;
                }

                indexM = bChecked ? indexM : 0;
              }
            }
            else if (bHighlighted) {
              indexC++;
              indexM++;
            }
          }
        }
      }
      else {
        if (bDisabled) {
          if (bHighlightedC || bHighlightedM) {
            indexC = 4;
            indexM = 4;

            if (bHighlightedM) {
              indexM = 0;

              if (bDropped && !bIsMenuMode) {
                indexC = 5;
                indexM = 2;
              }
              else if (bPressed) {
                indexM = 1;
              }
            }
          }
        }
        else {
          if (bDropped && !bIsMenuMode) {
            indexC = 5;
            indexM = 2;
          }
          else {
            if (bFocused) {
              indexC = 5;
              indexM = 4;
            }

            if (bChecked) {
              indexC = 2;
              indexM = 2;
            }

            if (bHighlightedC || bHighlightedM) {
              indexM = 4;

              if (bPressed) {
                if (bHighlightedC) {
                  indexC = 1;
                }
                else if (bHighlightedM) {
                  indexC = bChecked ? 3 : 5;
                }
              }
              else {
                indexC = bChecked ? 3 : 0;

                if (bHighlightedM) {
                  indexC = bChecked ? 3 : 5;
                  indexM = 0;
                }
              }
            }
          }
        }
      }

      if (indexC != -1) {
        pRendererC->Draw(hDC, rectC, indexC);
      }

      if (indexM != -1) {
        pRendererM->Draw(hDC, rectM, indexM);
      }

      return 0;
    }
    else {
      index = -1;
      pRenderer = &s->m_ctrlRibbonBtn[0];

      if (RCH(&rect) > pRenderer->GetParams().s->m_rectImage RCH(&) * 1.5 &&
          s->m_ctrlRibbonBtn[1].IsValid()) {
        pRenderer = &s->m_ctrlRibbonBtn[1];
      }

      if (bDisabled && bFocused) {
        if (pRenderer->GetImageCount() > 4) {
          index = 4;
        }
        else {
          index = 0;
        }
      }

      if (!bDisabled) {
        if (bChecked) {
          index = 2;
        }

        if (bPressed) {
          if (bHighlighted) {
            index = 1;
          }
        }
        else if (bHighlighted) {
          index++;
        }
      }
    }
  }

  COLORREF clrText = bWasDisabled
      ? s->m_clrToolBarBtnTextDisabled
      : COLORREF(-1);

  if (pRenderer != NULL) {
    if (index != -1) {
      int nCacheIndex = -1;

      if (pCache != NULL) {
        SIZE size(rect.Size());
        nCacheIndex = pCache->FindIndex(size);

        if (nCacheIndex == -1) {
          nCacheIndex = pCache->Cache(size, *pRenderer);
        }
      }

      if (nCacheIndex != -1) {
        pCache->Get(nCacheIndex)->Draw(hDC, rect, index);
      }
      else {
        pRenderer->Draw(hDC, rect, index);
      }

      if (!bWasDisabled) {
        clrText = s->m_clrToolBarBtnTextHighlighted;
      }
    }
  }

  return clrText;
}
void CBCGPVisualManager2007::OnDrawRibbonButtonBorder(
    HDDC hDC,
)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonButtonBorder(hDC, pButton);
  }

  if (IsRibbonEdit) {
    RECT rect(rect);
    COLORREF colorBorder = s->m_clrRibbonEditBorder;

    if (IsDisabled) {
      colorBorder = s->m_clrRibbonEditBorderDisabled;
    }
    else if (IsHighlighted || IsDroppedDown || IsFocused) {
      colorBorder = IsDroppedDown
          ? s->m_clrRibbonEditBorderPressed
          : s->m_clrRibbonEditBorderHighlighted;
    }

    rect.left = pButton->GetCommandRect().left;

    if (bIsDrawOnGlass) {

      DrawRect(hDC, rect, 0, colorBorder);
    }
    else {
      draw_3drect_inR(hDC, &rect, colorBorder, colorBorder);
    }
  }
}
void CBCGPVisualManager2007::OnDrawRibbonMenuCheckFrame(
    HDDC hDC,
    ,
    RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonMenuCheckFrame(hDC, pButton, rect);
    return;
  }

  ASSERT(hDC);
  s->m_ctrlMenuItemBack.Draw(hDC, rect);
}
void CBCGPVisualManager2007::OnDrawRibbonDefaultPaneButton(
    HDDC hDC,
)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonDefaultPaneButton(hDC, pButton);
    return;
  }

  ASSERT(hDC);

  OnFillRibbonButton(hDC, pButton);
  BOOL bIsQATMode = IsQATMode;
  RECT rectFrame(rect);

  if (!bIsQATMode) {
    if (s->m_ctrlRibbonBtnDefaultIcon.IsValid()) {
      const SIZE sizeImage = pButton->GetImageSize(RibbonImageSmall);
      const int nMarginX = 11;
      const int nMarginY = 10;
      rectFrame.top += nMarginY / 2;
      rectFrame.bottom = rectFrame.top + sizeImage.cy + 2 * nMarginY;
      rectFrame.top -= 2;
      rectFrame.left = rectFrame CenterPoint(&).x - sizeImage.cx / 2 - nMarginX;
      rectFrame.right = rectFrame.left + sizeImage.cx + 2 * nMarginX;
      s->m_ctrlRibbonBtnDefaultIcon.Draw(hDC, rectFrame);
    }
  }
  else {
    if (s->m_ctrlRibbonBtnDefaultQAT.IsValid()) {
      int index = 0;

      if (IsDroppedDown) {
        index = 2;
      }
      else if (IsPressed) {
        if (IsHighlighted) {
          index = 2;
        }
      }
      else if (IsHighlighted || IsFocused) {
        index = 1;
      }

      s->m_ctrlRibbonBtnDefaultQAT.Draw(hDC, rectFrame, index);
    }
    else if (s->m_ctrlRibbonBtnDefaultQATIcon.IsValid()) {
      int nHeight = s->m_ctrlRibbonBtnDefaultQATIcon.GetParams().s->m_rectImage RCH(&);

      if (rectFrame RCH(&) < nHeight) {
        nHeight = rectFrame RCH(&) / 2;
      }

      rectFrame DeflateRect(&, 1, 0);
      rectFrame.top = rectFrame.bottom - nHeight;
      s->m_ctrlRibbonBtnDefaultQATIcon.Draw(hDC, rectFrame);
    }
  }

  OnDrawRibbonDefaultPaneButtonContext(hDC, pButton);
}
void CBCGPVisualManager2007::OnDrawRibbonDefaultPaneButtonIndicator(
    HDDC hDC,
    ,
    RECT rect,
    BOOL bIsSelected,
    BOOL bHighlighted)
{
  if (!CanDrawImage() || !s->m_ctrlRibbonBtnDefaultIcon.IsValid()) {
    CBCGPVisualManager2003::OnDrawRibbonDefaultPaneButtonIndicator(
        hDC, pButton, rect, bIsSelected, bHighlighted);
    return;
  }

  ASSERT(hDC);

  rect.left = rect.right - s->m_ctrlRibbonBtnDefaultIcon.GetParams().s->m_rectImage RCW(&);
  s->m_ctrlRibbonBtnDefaultIcon.Draw(hDC, rect);
  RECT rectWhite = rect;
  rectWhite OffsetRect(&, 0, 1);
  DrawMenuImages(hDC, IdArowDown, rectWhite,
      ImageWhite);
  DrawMenuImages(hDC, IdArowDown, rect,
      ImageBlack);
}
void CBCGPVisualManager2007::OnFillRibbonEdit(
    HDDC hDC,
    CBCGPRibbonEditCtrl* pEdit,
    RECT rect,
    BOOL bIsHighlighted,
    BOOL bIsPaneHighlighted,
    BOOL bIsDisabled,
    COLORREF clrText, COLORREF clrSelBackground, COLORREF clrSelText)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillRibbonEdit(hDC,
        pEdit, rect, bIsHighlighted, bIsPaneHighlighted, bIsDisabled,
        clrText, clrSelBackground, clrSelText);
    return;
  }

  ASSERT(hDC);
  COLORREF color = s->m_clrRibbonEdit;

  if (bIsDisabled) {
    color = s->m_clrRibbonEditDisabled;
  }
  else {
    if (bIsHighlighted) {
      color = s->m_clrRibbonEditHighlighted;
    }
  }

  DrawRect(hDC, rect, color, 0);

  if (bIsDisabled) {
    clrText = globalData.clrGrayedText;
  }
  else {
    clrText = s->m_clrMenuText;  // TODO
    clrSelText = s->m_clrMenuText; // TODO
    clrSelBackground = s->m_clrRibbonEditSelection;
  }
}
COLORREF CBCGPVisualManager2007::GetRibbonEditBackgroundColor(
    CBCGPRibbonEditCtrl* pEdit,
    BOOL bIsHighlighted,
    BOOL bIsPaneHighlighted,
    BOOL bIsDisabled)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetRibbonEditBackgroundColor(
        pEdit, bIsHighlighted, bIsPaneHighlighted, bIsDisabled);
  }

  COLORREF color = s->m_clrRibbonEdit;

  if (bIsDisabled) {
    color = s->m_clrRibbonEditDisabled;
  }
  else {
    if (bIsHighlighted) {
      color = s->m_clrRibbonEditHighlighted;
    }
  }

  return color;
}
void CBCGPVisualManager2007::OnDrawRibbonMainPanelFrame(
    HDDC hDC,
    CBCGPRibbonMainPanel* pPanel,
    RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonMainPanelFrame(hDC,
        pPanel, rect);
    return;
  }

  if (!IsBeta()) {
    ASSERT(hDC);
    rect.right += 2; //TODO
    s->m_ctrlRibbonMainPanelBorder.DrawFrame(hDC, rect);
  }
}
void CBCGPVisualManager2007::OnFillRibbonMenuFrame(
    HDDC hDC,
    CBCGPRibbonMainPanel* pPanel,
    RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillRibbonMenuFrame(hDC,
        pPanel, rect);
    return;
  }

  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &s->m_clrMenuLight);
}
void CBCGPVisualManager2007::OnDrawRibbonRecentFilesFrame(
    HDDC hDC,
    CBCGPRibbonMainPanel* pPanel,
    RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonRecentFilesFrame(hDC,
        pPanel, rect);
    return;
  }

  ASSERT(hDC);
  rect.right += 2; //TODO
  draw_fillrectR(hDC, &rect, &s->m_clrBtnBkgnd);
  RECT rectSeparator = rect;
  rectSeparator.right = rectSeparator.left + 2;
  DrawSeparator(hDC, rectSeparator, FALSE);
}
COLORREF CBCGPVisualManager2007::OnFillRibbonMainPanelButton(
    HDDC hDC,
)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnFillRibbonMainPanelButton(hDC, pButton);
  }

  BOOL bHighlighted = IsHighlighted;
  COLORREF clrText = bHighlighted
      ? s->m_clrMenuTextHighlighted
      : IsDisabled
      ? s->m_clrMenuTextDisabled
      : s->m_clrMenuText;
  const int index = bHighlighted ? 1 : 0;
  s->m_ctrlRibbonBtnMainPanel.Draw(hDC, rect, index);
  return clrText;
}
void CBCGPVisualManager2007::OnDrawRibbonMainPanelButtonBorder(
    HDDC hDC)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonMainPanelButtonBorder(hDC, pButton);
    return;
  }
}
void CBCGPVisualManager2007::OnDrawRibbonPaletteButton(
    HDDC hDC,
    CBCGPRibbonPaletteIcon* pButton)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonPaletteButton(hDC, pButton);
    return;
  }

  ASSERT(hDC);

  int index = 0;

  if (IsDisabled) {
    index = 3;
  }
  else {
    if (IsPressed) {
      if (IsHighlighted) {
        index = 2;
      }
    }
    else if (IsHighlighted || IsFocused) {
      index = 1;
    }
  }

  int nBtn = 1;

  if (pButton->IsLast()) {
    nBtn = 2;
  }
  else if (pButton->IsFirst()) {
    nBtn = 0;
  }

  s->m_ctrlRibbonBtnPalette[nBtn].Draw(hDC, rect, index);
}
void CBCGPVisualManager2007::OnDrawRibbonPaletteBorder(
    HDDC hDC,
    CBCGPRibbonPaletteButton* pButton,
    RECT rectBorder)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonPaletteBorder(hDC, pButton, rectBorder);
    return;
  }

  rectBorder.right -= 5;
  ASSERT(hDC);
  draw_3drect_inR(hDC, &rectBorder, globalData.clrBtnShadow, globalData.clrBtnShadow);
}
COLORREF CBCGPVisualManager2007::OnDrawRibbonCategoryCaption(
    HDDC hDC,
    CBCGPRibbonContextCaption* pContextCaption)
{
  if (!CanDrawImage() || pContextCaption->GetColor() == BCGPCategoryColor_None) {
    return CBCGPVisualManager2003::OnDrawRibbonCategoryCaption(hDC, pContextCaption);
  }

  XRibbonContextCategory& context =
      s->m_ctrlRibbonContextCategory[pContextCaption->GetColor() - 1];
  RECT rect(pContextCaption->GetRect());
  context.s->m_ctrlCaption.Draw(hDC, rect);
  int xTabRight = pContextCaption->GetRightTabX();

  if (xTabRight > 0) {
    RECT rectTab(pContextCaption->GetParentRibbonBar()->GetActiveCategory()->GetTabRect());
    rect.top = rectTab.top;
    rect.bottom = rectTab.bottom;
    rect.right = xTabRight;
    s->m_ctrlRibbonContextSeparator.DrawFrame(hDC, rect);
  }

  return context.s->m_clrCaptionText;
}
COLORREF CBCGPVisualManager2007::OnDrawRibbonStatusBarPane(HDDC hDC, CBCGPRibbonStatusBar* pBar,
    CBCGPRibbonStatusBarPane* pPane)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnDrawRibbonStatusBarPane(hDC, pBar, pPane);
  }

  ASSERT(hDC);
  ASSERT(pPane);
  RECT rectPane = pPane->GetRect();
  const BOOL bHighlighted = pPane->IsHighlighted() || pPane->IsFocused();
  const BOOL bChecked     = pPane->IsChecked();
  const BOOL bExtended  = pPane->IsExtended();

  if (bHighlighted || bChecked) {
    RECT rectButton = rectPane;
    rectButton DeflateRect(&, 1, 1);
    int index = 0;

    if (pPane->IsPressed()) {
      if (bHighlighted) {
        index = 1;
      }
    }
    else if (bChecked) {
      if (bHighlighted) {
        index = 0;
      }
      else {
        index = 1;
      }
    }

    s->m_ctrlRibbonBtnStatusPane.Draw(hDC, rectButton, index);
  }

  if (pPane->IsDisabled()) {
    return bExtended ? s->m_clrExtenedStatusBarTextDisabled : s->m_clrStatusBarTextDisabled;
  }

  return bHighlighted ?
      s->m_clrToolBarBtnTextHighlighted :
      s->m_clrStatusBarText;
}
void CBCGPVisualManager2007::OnDrawRibbonSliderZoomButton(
    HDDC hDC, CBCGPRibbonSlider* pSlider,
    RECT rect, BOOL bIsZoomOut,
    BOOL bIsHighlighted, BOOL bIsPressed, BOOL bIsDisabled)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonSliderZoomButton(
        hDC, pSlider, rect, bIsZoomOut, bIsHighlighted, bIsPressed, bIsDisabled);
    return;
  }

  ASSERT(hDC);
  CBCGPControlRenderer* pRenderer = bIsZoomOut
      ? &s->m_ctrlRibbonSliderBtnMinus
      : &s->m_ctrlRibbonSliderBtnPlus;
  int index = 0;

  if (bIsDisabled) {
    index = 3;
  }
  else {
    if (bIsPressed) {
      if (bIsHighlighted) {
        index = 2;
      }
    }
    else if (bIsHighlighted) {
      index = 1;
    }
  }

  pRenderer->FillInterior(hDC, rect,
      CBCGPToolBarImages::ImageAlignHorzCenter,
      CBCGPToolBarImages::ImageAlignVertCenter,
      index);
}
void CBCGPVisualManager2007::OnDrawRibbonSliderChannel(
    HDDC hDC, CBCGPRibbonSlider* pSlider,
    RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonSliderChannel(
        hDC, pSlider, rect);
    return;
  }

  ASSERT(hDC);
  DrawSeparator(hDC, rect, s->m_penSeparatorDark, s->m_penSeparator2, !pSlider->IsVert());

  if (pSlider->IsVert()) {
    rect.top += RCH(&rect) / 2 - 1;
    rect.bottom = rect.top + 2;
    InflateRect(&rect, 2, 0);
  }
  else {
    rect.left += RCW(&rect) / 2 - 1;
    rect.right = rect.left + 2;
    InflateRect(&rect, 0, 2);
  }

  DrawSeparator(hDC, rect, s->m_penSeparatorDark, s->m_penSeparator2, pSlider->IsVert());
}
void CBCGPVisualManager2007::OnDrawRibbonSliderThumb(
    HDDC hDC, CBCGPRibbonSlider* pSlider,
    RECT rect, BOOL bIsHighlighted, BOOL bIsPressed, BOOL bIsDisabled)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonSliderThumb(
        hDC, pSlider, rect, bIsHighlighted, bIsPressed, bIsDisabled);
    return;
  }

  ASSERT(hDC);
  BOOL bIsVert = FALSE;
  BOOL bLeftTop = FALSE;
  BOOL bRightBottom = FALSE;

  if (pSlider != NULL) {
    ASSERT(pSlider);
    bIsVert = pSlider->IsVert();
    bLeftTop = pSlider->IsThumbLeftTop();
    bRightBottom = pSlider->IsThumbRightBottom();
  }

  int indexRen = 0;

  if (bLeftTop && bRightBottom) {
    indexRen = 1;
  }
  else if (bLeftTop) {
    indexRen = 2;
  }

  if (bIsVert) {
    indexRen += 3;
  }

  CBCGPControlRenderer* pRenderer = NULL;

  if (indexRen == 0) {
    pRenderer = &s->m_ctrlRibbonSliderThumb;
  }
  else {
    pRenderer = &s->m_ctrlRibbonSliderThumbA[indexRen - 1];
  }

  if (pRenderer != NULL) {
    int index = 0;

    if (bIsDisabled) {
      index = 3;
    }
    else {
      if (bIsPressed) {
        index = 2;
      }
      else if (bIsHighlighted) {
        index = 1;
      }
    }

    pRenderer->FillInterior(hDC, rect,
        CBCGPToolBarImages::ImageAlignHorzCenter,
        CBCGPToolBarImages::ImageAlignVertCenter,
        index);
  }
}
void CBCGPVisualManager2007::OnDrawRibbonProgressBar(HDDC hDC,
    CBCGPRibbonProgressBar* pProgress,
    RECT rectProgress, RECT rectChunk,
    BOOL bInfiniteMode)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawRibbonProgressBar(hDC, pProgress,
        rectProgress, rectChunk, bInfiniteMode);
    return;
  }

  ASSERT(hDC);
  ASSERT(pProgress);
  s->m_ctrlRibbonProgressBack.Draw(hDC, rectProgress);
  RECT rectInternal(rectProgress);
  RECT rectBorders(s->m_ctrlRibbonProgressBack.GetParams().s->m_rectCorners);
  rectInternal DeflateRect(&, rectBorders.left, rectBorders.top, rectBorders.right, rectBorders.bottom);

  if (!bInfiniteMode) {
    // normal
    rectChunk.IntersectRect(rectChunk, rectInternal);

    if (!rectChunk.IsRectEmpty() || pProgress->GetPos() != pProgress->GetRangeMin()) {
      CRgn rgn;
      rgn.CreateRectRgnIndirect(rectInternal);
      hDC->SelectClipRgn(&rgn);

      if (!rectChunk.IsRectEmpty()) {
        rectChunk.left = rectChunk.right - rectInternal RCW(&);
        s->m_ctrlRibbonProgressNormal.Draw(hDC, rectChunk);
      }
      else {
        rectChunk = rectInternal;
        rectChunk.right  = rectInternal.left;
      }

      if (rectChunk.right != rectInternal.right) {
        rectChunk.left = rectChunk.right;
        rectChunk.right += s->m_ctrlRibbonProgressNormalExt.GetParams().s->m_rectImage RCW(&);
        s->m_ctrlRibbonProgressNormalExt.Draw(hDC, rectChunk);
      }

      hDC->SelectClipRgn(NULL);
    }
  }
  else if (pProgress->GetPos() != pProgress->GetRangeMin()) {
    int index = (pProgress->GetPos() - pProgress->GetRangeMin()) %
        s->m_ctrlRibbonProgressInfinity.GetImageCount();
    s->m_ctrlRibbonProgressInfinity.Draw(hDC, rectInternal, index);
  }
}
void CBCGPVisualManager2007::OnFillRibbonQATPopup(
    HDDC hDC, CBCGPRibbonPanelMenuBar* pMenuBar, RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillRibbonQATPopup(hDC, pMenuBar, rect);
    return;
  }

  ASSERT(hDC);

  if (s->m_ctrlRibbonBorder_QAT.IsValid()) {
    s->m_ctrlRibbonBorder_QAT.FillInterior(hDC, rect);
  }
  else {

    FillGradient(hDC, rect, s->m_clrBtnGradientDark, s->m_clrBtnGradientLight, TRUE);
  }
}
int CBCGPVisualManager2007::GetRibbonPopupBorderSize(const CBCGPRibbonPanelMenu* pPopup)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetRibbonPopupBorderSize(pPopup);
  }

  if (pPopup != NULL) {
    ASSERT(pPopup);
    CBCGPRibbonPanelMenuBar* pRibbonMenuBar =
        DYNAMIC_DOWNCAST(CBCGPRibbonPanelMenuBar,
            (const_cast<CBCGPRibbonPanelMenu*>(pPopup))->GetMenuBar());

    if (pRibbonMenuBar != NULL) {
      if (pRibbonMenuBar->IsMainPanel()) {
        return (int)GetPopupMenuBorderSize();
      }

      if (!pRibbonMenuBar->IsMenuMode()) {
        if (pRibbonMenuBar->IsQATPopup()) {
          if (s->m_ctrlRibbonBorder_QAT.IsValid()) {
            return s->m_ctrlRibbonBorder_QAT.GetParams().s->m_rectSides.left;
          }
        }
        else if (pRibbonMenuBar->IsCategoryPopup()) {
          return 0;
        }
        else if (pRibbonMenuBar->IsFloaty()) {
          if (s->m_ctrlRibbonBorder_Floaty.IsValid()) {
            return s->m_ctrlRibbonBorder_Floaty.GetParams().s->m_rectSides.left;
          }
        }
        else {
          if (pRibbonMenuBar->GetPanel() != NULL) {
            if (!IsBeta1()) {
              return 0;
            }
          }

          // standard size
        }
      }
    }
  }

  return (int)GetPopupMenuBorderSize();
}
void CBCGPVisualManager2007::OnDrawRibbonKeyTip(HDDC hDC,
    CBCGPBaseRibbonElement* pElement,
    RECT rect, const char* str)
{
  if (!CanDrawImage() ||
      !s->m_ctrlRibbonKeyTip.IsValid()) {
    CBCGPVisualManager2003::OnDrawRibbonKeyTip(hDC, pElement, rect, str);
    return;
  }

  ASSERT(hDC);
  ASSERT(pElement);
  BOOL bDisabled = pElement->IsDisabled();
  s->m_ctrlRibbonKeyTip.Draw(hDC, rect, 0);
  str.MakeUpper();
  COLORREF clrTextOld = hDC->SetTextColor(
      bDisabled ? s->m_clrRibbonKeyTipTextDisabled : s->m_clrRibbonKeyTipTextNormal);
  draw_textR(hDC, str, rect, DT_SINGLELINE | DT_VCENTER | DT_CENTER);

}
void CBCGPVisualManager2007::OnDrawRibbonCheckBoxOnList(HDDC hDC, CBCGPRibbonCheckBox* pCheckBox,
    RECT rect, BOOL bIsSelected, BOOL bHighlighted)
{
  ASSERT(hDC);
  CBCGPToolBarImages& img = s->m_MenuItemMarkerC;

  if (!CanDrawImage() || img.GetCount() == 0) {
    CBCGPVisualManager2003::OnDrawRibbonCheckBoxOnList(hDC, pCheckBox, rect, bIsSelected, bHighlighted);
    return;
  }

  if (GetRibbonImageScale() != 1.0) {
    DeflateRect(&rect, 5, 5);
    img.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzStretch, CBCGPToolBarImages::ImageAlignVertStretch);
  }
  else {
    img.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter);
  }
}
void CBCGPVisualManager2007::OnDrawRibbonRadioButtonOnList(HDDC hDC, CBCGPRibbonRadioButton* pRadioButton,
    RECT rect, BOOL bIsSelected, BOOL bHighlighted)
{
  ASSERT(hDC);
  CBCGPToolBarImages& img = s->m_MenuItemMarkerR;

  if (!CanDrawImage() || img.GetCount() == 0) {
    CBCGPVisualManager2003::OnDrawRibbonRadioButtonOnList(hDC, pRadioButton, rect, bIsSelected, bHighlighted);
    return;
  }

  if (GetRibbonImageScale() != 1.0) {
    DeflateRect(&rect, 5, 5);
    img.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzStretch, CBCGPToolBarImages::ImageAlignVertStretch);
  }
  else {
    img.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter);
  }
}
COLORREF CBCGPVisualManager2007::GetRibbonHyperlinkTextColor(CBCGPRibbonHyperlink* pHyperLink)
{
  ASSERT(pHyperLink);

  if (!CanDrawImage() || pHyperLink->IsDisabled()) {
    return CBCGPVisualManager2003::GetRibbonHyperlinkTextColor(pHyperLink);
  }

  COLORREF clrText = pHyperLink->IsHighlighted() ?
      s->m_clrRibbonHyperlinkActive : s->m_clrRibbonHyperlinkInactive;

  if (s->m_clrRibbonStatusbarHyperlinkActive != 0 &&
      s->m_clrRibbonStatusbarHyperlinkInactive != 0) {
    CBCGPRibbonStatusBar* pParentStatusBar = DYNAMIC_DOWNCAST(
        CBCGPRibbonStatusBar, pHyperLink->GetParentRibbonBar());

    if (pParentStatusBar != NULL) {
      ASSERT(pParentStatusBar);

      if (!pParentStatusBar->IsExtendedElement(pHyperLink)) {
        clrText = pHyperLink->IsHighlighted() ?
            s->m_clrRibbonStatusbarHyperlinkActive : s->m_clrRibbonStatusbarHyperlinkInactive;
      }
    }
  }

  if (clrText == 0) {
    return CBCGPVisualManager2003::GetRibbonHyperlinkTextColor(pHyperLink);
  }

  return clrText;
}
COLORREF CBCGPVisualManager2007::GetRibbonStatusBarTextColor(CBCGPRibbonStatusBar* pStatusBar)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetRibbonStatusBarTextColor(pStatusBar);
  }

  return s->m_clrStatusBarText;
}
void CBCGPVisualManager2007::OnFillPlanner(HDDC hDC, CBCGPPlannerView* pView,
    RECT rect, BOOL bWorkingArea)
{
  ASSERT(hDC);
  ASSERT(pView);

  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillPlanner(hDC, pView, rect, bWorkingArea);
    return;
  }

  if (s->m_bPlannerBackItemSelected) {
    COLORREF br = (GetPlannerHourLineColor(pView, TRUE, FALSE));
    draw_fillrectR(hDC, &rect, br);
  }
  else {
    CBCGPVisualManager2003::OnFillPlanner(hDC, pView, rect, bWorkingArea);
  }

  if (s->m_bPlannerBackItemToday && DYNAMIC_DOWNCAST(CBCGPPlannerViewDay, pView) == NULL) {
    rect.right--;
    draw_3drect_inR(hDC, &rect, s->m_clrPlannerTodayBorder, s->m_clrPlannerTodayBorder);
    rect.left--;
    rect.right++;
    rect.bottom++;
    draw_3drect_inR(hDC, &rect, s->m_clrPlannerTodayBorder, s->m_clrPlannerTodayBorder);
  }
}
COLORREF CBCGPVisualManager2007::OnFillPlannerCaption(HDDC hDC,
    RECT rect, BOOL bIsToday, BOOL bIsSelected,
    BOOL bNoBorder/* = FALSE*/, BOOL bHorz /*= TRUE*/)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnFillPlannerCaption(hDC,
        pView, rect, bIsToday, bIsSelected, bNoBorder, bHorz);
  }

  const BOOL bMonth = DYNAMIC_DOWNCAST(CBCGPPlannerViewMonth, pView) != NULL;

  if (bMonth && s->m_bPlannerCaptionBackItemHeader) {
    return s->m_clrPlannerNcText;
  }

  ASSERT(hDC);
  BOOL bDay = FALSE;

  if (!bMonth) {
    bDay = pView->IsKindOf(RUNTIME_CLASS(CBCGPPlannerViewDay));

    if (bDay) {
      if (!bIsToday) {
        DeflateRect(&rect, 1, 1);
      }
    }
  }
  else {
    if (!bIsToday) {
      rect.bottom--;
    }
  }

  COLORREF clrText   = _RGB(0, 0, 0);
  COLORREF clrBorder = CLR_DEFAULT;

  if (bIsToday) {
    RECT rectHalf(rect);

    if (bHorz) {
      rectHalf.bottom = rectHalf.top + rectHalf RCH(&) / 2;
      dm.Fill4ColorsGradient(rectHalf,
          s->m_clrPlannerTodayCaption[0], s->m_clrPlannerTodayCaption[1],
          s->m_clrPlannerTodayCaption[1], s->m_clrPlannerTodayCaption[0], FALSE);
      rectHalf.top = rectHalf.bottom;
      rectHalf.bottom = rect.bottom;
      dm.Fill4ColorsGradient(rectHalf,
          s->m_clrPlannerTodayCaption[2], s->m_clrPlannerTodayCaption[3],
          s->m_clrPlannerTodayCaption[3], s->m_clrPlannerTodayCaption[2], FALSE);
    }
    else {
      rectHalf.right = rectHalf.left + rectHalf RCW(&) / 2;
      dm.Fill4ColorsGradient(rectHalf,
          s->m_clrPlannerTodayCaption[1], s->m_clrPlannerTodayCaption[0],
          s->m_clrPlannerTodayCaption[0], s->m_clrPlannerTodayCaption[1], TRUE);
      rectHalf.left = rectHalf.right;
      rectHalf.right = rect.right;
      dm.Fill4ColorsGradient(rectHalf,
          s->m_clrPlannerTodayCaption[3], s->m_clrPlannerTodayCaption[2],
          s->m_clrPlannerTodayCaption[2], s->m_clrPlannerTodayCaption[3], TRUE);
    }

    clrBorder = s->m_clrPlannerTodayBorder;
  }
  else {
    COLORREF clrBack = GetPlannerViewBackgroundColor(pView);
    double H, S, V;
    RGBtoHSV(GetPlannerViewBackgroundColor(pView), &H, &S, &V);

    if (bHorz) {
      dm.Fill4ColorsGradient(rect,
          HSVtoRGB(H, S * 0.40, MIN(V * 1.09, 1.0)),
          HSVtoRGB(H, S * 0.20, MIN(V * 1.12, 1.0)),
          HSVtoRGB(H, S * 0.37, MIN(V * 1.10, 1.0)),
          HSVtoRGB(H, S * 0.48, MIN(V * 1.08, 1.0)),
          TRUE);
    }
    else {
      dm.Fill4ColorsGradient(rect,
          HSVtoRGB(H, S * 0.20, MIN(V * 1.12, 1.0)),
          HSVtoRGB(H, S * 0.40, MIN(V * 1.09, 1.0)),
          HSVtoRGB(H, S * 0.48, MIN(V * 1.08, 1.0)),
          HSVtoRGB(H, S * 0.37, MIN(V * 1.10, 1.0)),
          FALSE);
    }

    if (!bDay) {
      clrBorder = clrBack;
    }
  }

  if (clrBorder != CLR_DEFAULT && !bNoBorder) {
    if (!bDay) {
      InflateRect(&rect, 1, 0);
    }

    draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
  }

  return clrText;
}
void CBCGPVisualManager2007::OnDrawPlannerCaptionText(HDDC hDC,
    RECT rect, const char* strText,
    COLORREF clrText, int nAlign, BOOL bHighlight)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawPlannerCaptionText(hDC,
        pView, rect, strText, clrText, nAlign, bHighlight);
    return;
  }

  const int nTextMargin = 2;
  DeflateRect(&rect, nTextMargin, 0);
  COLORREF clrOld = hDC->SetTextColor(clrText);
  draw_textR(hDC, strText, rect, DT_SINGLELINE | DT_VCENTER | nAlign);
  hDC->SetTextColor(clrOld);
}
COLORREF CBCGPVisualManager2007::GetPlannerAppointmentTimeColor(CBCGPPlannerView* pView,
    BOOL bSelected, BOOL bSimple, DWORD dwDrawFlags)
{
  if (!CanDrawImage() ||
      (bSelected && (dwDrawFlags & BCGP_PLANNER_DRAW_APP_OVERRIDE_SELECTION) == 0)) {
    return CBCGPVisualManager2003::GetPlannerAppointmentTimeColor(pView,
        bSelected, bSimple, dwDrawFlags);
  }

  double H, S, V;
  RGBtoHSV(GetPlannerViewBackgroundColor(pView), &H, &S, &V);
  return HSVtoRGB(H, MIN(S * 1.88, 1.0), V * 0.5);
}
// in the future versions use base function
COLORREF CBCGPVisualManager2007::GetPlannerViewBackgroundColor(CBCGPPlannerView* pView)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetPlannerViewBackgroundColor(pView);
  }

  ASSERT(pView);
  CBCGPPlannerManagerCtrl* pCtrl = pView->GetPlanner();

  return pCtrl->GetBackgroundColor() == CLR_DEFAULT
      ? s->m_clrPlannerWork
      : pCtrl->GetBackgroundColor();
}
COLORREF CBCGPVisualManager2007::GetPlannerHourLineColor(CBCGPPlannerView* pView,
    BOOL bWorkingHours, BOOL bHour)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetPlannerHourLineColor(pView,
        bWorkingHours, bHour);
  }

  ASSERT(pView);
  return CalculateHourLineColor(GetPlannerViewBackgroundColor(pView), bWorkingHours, bHour);
}
COLORREF CBCGPVisualManager2007::GetPlannerViewWorkingColor(CBCGPPlannerView* pView)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetPlannerViewWorkingColor(pView);
  }

  ASSERT(pView);
  return CalculateWorkingColor(GetPlannerViewBackgroundColor(pView));
}
COLORREF CBCGPVisualManager2007::GetPlannerViewNonWorkingColor(CBCGPPlannerView* pView)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetPlannerViewNonWorkingColor(pView);
  }

  ASSERT(pView);
  return CalculateNonWorkingColor(GetPlannerViewBackgroundColor(pView),
      pView->IsKindOf(RUNTIME_CLASS(CBCGPPlannerViewDay)));
}
COLORREF CBCGPVisualManager2007::GetPlannerSelectionColor(CBCGPPlannerView* pView)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetPlannerSelectionColor(pView);
  }

  ASSERT(pView);
  return CalculateSelectionColor(GetPlannerViewBackgroundColor(pView));
}
COLORREF CBCGPVisualManager2007::GetPlannerSeparatorColor(CBCGPPlannerView* pView)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetPlannerSeparatorColor(pView);
  }

  ASSERT(pView);
  return CalculateSeparatorColor(GetPlannerViewBackgroundColor(pView));
}
COLORREF CBCGPVisualManager2007::OnFillPlannerTimeBar(HDDC hDC,
    RECT rect, COLORREF clrLine)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnFillPlannerTimeBar(hDC, pView, rect, clrLine);
  }

  ASSERT(hDC);
  COLORREF br = (s->m_clrPlannerNcArea);
  draw_fillrectR(hDC, &rect, br);
  clrLine = s->m_clrPlannerNcLine;
  return s->m_clrPlannerNcText;
}
void CBCGPVisualManager2007::OnFillPlannerWeekBar(HDDC hDC,
    RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillPlannerWeekBar(hDC, pView, rect);
    return;
  }

  ASSERT(hDC);
  COLORREF br = (s->m_clrPlannerNcArea);
  draw_fillrectR(hDC, &rect, br);
}
void CBCGPVisualManager2007::OnDrawPlannerHeader(HDDC hDC,
    RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawPlannerHeader(hDC, pView, rect);
    return;
  }

  ASSERT(hDC);
  COLORREF clr = GetPlannerViewBackgroundColor(pView);

  if (DYNAMIC_DOWNCAST(CBCGPPlannerViewMonth, pView) != NULL) {
    clr = s->m_clrPlannerNcArea;
  }

  COLORREF br = (clr);
  draw_fillrectR(hDC, &rect, br);
}
void CBCGPVisualManager2007::OnDrawPlannerHeaderPane(HDDC hDC,
    RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawPlannerHeaderPane(hDC, pView, rect);
    return;
  }

  if (DYNAMIC_DOWNCAST(CBCGPPlannerViewMonth, pView) != NULL) {
    draw_3drect_inR(hDC, &rect.right - 1, rect.top - 2, 1, RCH(&rect) + 4,
        s->m_clrPlannerNcText, s->m_clrPlannerNcText);
  }
}
void CBCGPVisualManager2007::OnFillPlannerHeaderAllDay(HDDC hDC,
    RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillPlannerHeaderAllDay(hDC, pView, rect);
    return;
  }

  ASSERT(hDC);
  COLORREF br = (GetPlannerHourLineColor(pView, FALSE, TRUE));
  draw_fillrectR(hDC, &rect, br);
}
void CBCGPVisualManager2007::OnDrawPlannerHeaderAllDayItem(HDDC hDC,
    RECT rect, BOOL bIsToday, BOOL bIsSelected)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawPlannerHeaderAllDayItem(hDC, pView, rect,
        bIsToday, bIsSelected);
    return;
  }

  ASSERT(hDC);
  rect.left++;

  if (bIsSelected) {
    COLORREF br = (GetPlannerSelectionColor(pView));
    draw_fillrectR(hDC, &rect, br);
  }

  if (bIsToday) {
    rect.top--;
    rect.right--;
    draw_3drect_inR(hDC, &rect, s->m_clrPlannerTodayBorder, s->m_clrPlannerTodayBorder);
    rect.left--;
    rect.right++;
    rect.bottom++;
    draw_3drect_inR(hDC, &rect, s->m_clrPlannerTodayBorder, s->m_clrPlannerTodayBorder);
  }
}
void CBCGPVisualManager2007::PreparePlannerBackItem(BOOL bIsToday, BOOL bIsSelected)
{
  s->m_bPlannerBackItemToday    = bIsToday;
  s->m_bPlannerBackItemSelected = bIsSelected;
}
DWORD CBCGPVisualManager2007::GetPlannerDrawFlags()
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetPlannerDrawFlags();
  }

  return BCGP_PLANNER_DRAW_APP_GRADIENT_FILL |
      BCGP_PLANNER_DRAW_APP_ROUNDED_CORNERS |
      BCGP_PLANNER_DRAW_APP_OVERRIDE_SELECTION |
      BCGP_PLANNER_DRAW_APP_NO_MULTIDAY_CLOCKS |
      BCGP_PLANNER_DRAW_APP_DURATION_SHAPE |
      BCGP_PLANNER_DRAW_VIEW_NO_DURATION |
      BCGP_PLANNER_DRAW_VIEW_WEEK_BAR |
      BCGP_PLANNER_DRAW_VIEW_CAPTION_DAY_BOLD |
      BCGP_PLANNER_DRAW_VIEW_CAPTION_DAY_COMPACT;
}
SIZE CBCGPVisualManager2007::GetSystemBorders(BOOL bRibbonPresent)
{
  SIZE size(GetSystemMetrics(Ss->m_CYSIZEFRAME),
      GetSystemMetrics(Ss->m_CXSIZEFRAME));

  if (bRibbonPresent) {
    size.cx--;
    size.cy--;
  }

  return size;
}
BOOL CBCGPVisualManager2007::OnEraseMDIClientArea(HDDC hDC, RECT rectClient)
{
  if (!CanDrawImage() ||
      s->m_clrMainClientArea == NULL) {
    return CBCGPVisualManager2003::OnEraseMDIClientArea(hDC, rectClient);
  }

  draw_fillrectR(hDC, &rectClient, &s->m_clrMainClientArea);
  return TRUE;
}
BOOL CBCGPVisualManager2007::GetToolTipParams(CBCGPToolTipParams& params,
    UINT /*nType*/ /*= (UINT)(-1)*/)
{
  if (!CanDrawImage() ||
      !s->m_bToolTipParams) {
    return CBCGPVisualManager2003::GetToolTipParams(params);
  }

  params = s->m_ToolTipParams;
  return TRUE;
}
void CBCGPVisualManager2007::OnScrollBarDrawThumb(HDDC hDC, CBCGPScrollBar* pScrollBar, RECT rect,
    BOOL bHorz, BOOL bHighlighted, BOOL bPressed, BOOL bDisabled)
{
  if (!CanDrawImage()) {
    return;
  }

  int nScroll = bHorz ? 0 : 1;
  BOOL bIsFrame = pScrollBar->GetVisualStyle() == CBCGPScrollBar::BCGP_SBSTYLE_VISUAL_MANAGER_FRAME;
  int nIndex  = bIsFrame ? 0 : 1;
  s->m_ctrlScrollBar_Back[nScroll][nIndex].Draw(hDC, rect, 0);

  if (!bDisabled) {
    if (!IsBeta()) {
      if (bHorz) {
        DeflateRect(&rect, 0, 1);
      }
      else {
        DeflateRect(&rect, 1, 0);
      }
    }

    s->m_ctrlScrollBar_ThumbBack[nScroll][nIndex].Draw(hDC, rect, bPressed ? 2 : bHighlighted ? 1 : 0);

    if (RCW(&rect) - 4 > s->m_ctrlScrollBar_ThumbIcon[nScroll][nIndex].GetParams().s->m_rectImage RCW(&) &&
        RCH(&rect) - 4 > s->m_ctrlScrollBar_ThumbIcon[nScroll][nIndex].GetParams().s->m_rectImage RCH(&)) {
      OffsetRect(&rect, 1, 1);
      s->m_ctrlScrollBar_ThumbIcon[nScroll][nIndex].FillInterior(hDC, rect,
          CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter,
          bPressed ? 2 : bHighlighted ? 1 : 0);
    }
  }
}
void CBCGPVisualManager2007::OnScrollBarDrawButton(HDDC hDC, CBCGPScrollBar* pScrollBar, RECT rect,
    BOOL bHorz, BOOL bHighlighted, BOOL bPressed, BOOL bFirst, BOOL bDisabled)
{
  if (!CanDrawImage()) {
    return;
  }

  int nScroll = bHorz ? 0 : 1;
  BOOL bIsFrame = pScrollBar->GetVisualStyle() == CBCGPScrollBar::BCGP_SBSTYLE_VISUAL_MANAGER_FRAME;
  int nIndex  = bIsFrame ? 0 : 1;
  s->m_ctrlScrollBar_Back[nScroll][nIndex].Draw(hDC, rect, 0);

  if (!bDisabled) {
    if (!IsBeta()) {
      if (bHorz) {
        DeflateRect(&rect, 0, 1);
      }
      else {
        DeflateRect(&rect, 1, 0);
      }
    }

    s->m_ctrlScrollBar_Item[nScroll][nIndex].Draw(hDC, rect, bPressed ? 3 : bHighlighted ? 2 : pScrollBar->IsActive() ? 1 : 0);
  }

  int ids;

  if (bHorz) {
    ids = bFirst ? IdArowLeftLarge : IdArowRightLarge;
  }
  else {
    ids = bFirst ? IdArowUpLarge : IdArowDownLarge;
  }

  int state = bDisabled ? ImageGray : ImageBlack2;

  if (!pScrollBar->IsActive() && s->m_Style == VS2007_ObsidianBlack && bIsFrame) {
    state = ImageLtGray;
  }

  DrawMenuImages(hDC, ids, rect, state);
}
void CBCGPVisualManager2007::OnScrollBarFillBackground(HDDC hDC, CBCGPScrollBar* pScrollBar, RECT rect,
    BOOL bHorz, BOOL /*bHighlighted*/, BOOL bPressed, BOOL /*bFirst*/, BOOL /*bDisabled*/)
{
  if (!CanDrawImage()) {
    return;
  }

  int nScroll = bHorz ? 0 : 1;
  BOOL bIsFrame = pScrollBar->GetVisualStyle() == CBCGPScrollBar::BCGP_SBSTYLE_VISUAL_MANAGER_FRAME;
  int nIndex  = bIsFrame ? 0 : 1;
  s->m_ctrlScrollBar_Back[nScroll][nIndex].Draw(hDC, rect, bPressed ? 1 : 0);
}
void CBCGPVisualManager2007::GetCalendarColors(const CBCGPCalendar* pCalendar,
    CBCGPCalendarColors& colors)
{
  CBCGPVisualManager2003::GetCalendarColors(pCalendar, colors);

  if (!CanDrawImage()) {
    return;
  }

  colors->clrCaption = s->m_clrCaptionBarGradientDark;
  colors->clrCaptionText = s->m_clrCaptionBarText;
  colors->clrSelected = s->m_clrHighlightGradientDark;
  colors->clrSelectedText = s->m_clrOutlookPageTextHighlighted;
}
void CBCGPVisualManager2007::OnFillPopupWindowBackground(HDDC hDC, RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnFillPopupWindowBackground(hDC, rect);
    return;
  }

  ASSERT(hDC);

  FillGradient(hDC, rect, s->m_clrPopupGradientDark, s->m_clrPopupGradientLight);
}
COLORREF CBCGPVisualManager2007::OnDrawPopupWindowCaption(HDDC hDC, RECT rectCaption, CBCGPPopupWindow* pPopupWnd)
{
  COLORREF clrText = CBCGPVisualManager2003::OnDrawPopupWindowCaption(hDC, rectCaption, pPopupWnd);

  if (CanDrawImage()) {
    clrText = s->m_clrOutlookCaptionTextNormal;
  }

  return clrText;
}
COLORREF CBCGPVisualManager2007::OnFillListBoxItem(HDDC hDC, CBCGPListBox* pListBox, int nItem, RECT rect, BOOL bIsHighlihted, BOOL bIsSelected)
{
  if (!CanDrawImage() || !s->m_ctrlRibbonBtn[0].IsValid()) {
    return CBCGPVisualManager2003::OnFillListBoxItem(hDC, pListBox, nItem, rect, bIsHighlihted, bIsSelected);
  }

  DeflateRect(&rect, 2, 1);
  int nIndex = 0;

  if (bIsSelected) {
    nIndex = bIsHighlihted ? 1 : 2;
  }

  s->m_ctrlRibbonBtn[0].Draw(hDC, rect, nIndex);
  return s->m_clrToolBarBtnTextHighlighted;
}
COLORREF CBCGPVisualManager2007::OnDrawMenuLabel(HDDC hDC, RECT rect)
{
  ASSERT(hDC);
  draw_fillrectR(hDC, &rect,
      s->m_clrGroupBackground != NULL ? &s->m_clrGroupBackground : &s->m_clrBtnBkgnd);
  RECT rectSeparator = rect;
  rectSeparator.top = rectSeparator.bottom - 2;
  DrawSeparator(hDC, rectSeparator, TRUE);
  return s->m_clrGroupText != 0 ? s->m_clrGroupText : s->m_clrMenuText;
}
COLORREF CBCGPVisualManager2007::OnFillCaptionBarButton(HDDC hDC,
    RECT rect, BOOL bIsPressed, BOOL bIsHighlighted,
    BOOL bIsDisabled, BOOL bHasDropDownArrow,
    BOOL bIsSysButton)
{
  COLORREF clrText = CBCGPVisualManager2003::OnFillCaptionBarButton(hDC, pBar,
      rect, bIsPressed, bIsHighlighted,
      bIsDisabled, bHasDropDownArrow, bIsSysButton);

  if (CanDrawImage() &&
      pBar->IsMessageBarMode() && bIsSysButton && !bIsHighlighted) {
    clrText = s->m_clrMenuBarBtnText;
  }

  return clrText;
}
BOOL CBCGPVisualManager2007::OnDrawPushButton(HDDC hDC, RECT rect, CBCGPButton* pButton, COLORREF clrText)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnDrawPushButton(hDC, rect, pButton, clrText);
  }

  ASSERT(hDC);

  int index = 0;
  BOOL bDisabled    = !pButton->IsWindowEnabled();
  BOOL bFocused     = pButton->GetSafeHwnd() == ::GetFocus();
  BOOL bDefault     = pButton->IsDefaultButton();
  BOOL bPressed     = IsPressed;
  BOOL bChecked     = IsChecked;
  BOOL bHighlighted = IsHighlighted;
  bHighlighted |= bFocused;

  if (bDisabled) {
    index = 6;
  }
  else {
    if (bChecked) {
      index = 3;
    }
    else {
      if (bDefault && !bHighlighted) {
        index = 5;
      }
    }

    if (bPressed) {
      if (bHighlighted) {
        index = 2;
      }
    }
    else if (bHighlighted) {
      index++;
    }
  }

  globalData.DrawParentBackground(pButton, hDC);
  s->m_ctrlRibbonBtnPush.Draw(hDC, rect, index);

  if (bDisabled) {
    clrText = s->m_clrToolBarBtnTextDisabled;
  }
  else if (bHighlighted) {
    clrText = s->m_clrToolBarBtnTextHighlighted;
  }

  return TRUE;
}
void CBCGPVisualManager2007::OnDrawGroup(HDDC hDC, CBCGPGroup* pGroup, RECT rect, const char* strName)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawGroup(hDC, pGroup, rect, strName);
    return;
  }

  ASSERT(hDC);
  ASSERT(pGroup);
  SIZE sizeText = FontGetTextExtent(hDC, strName);
  RECT rectFrame = rect;
  rectFrame.top += sizeText.cy / 2;

  if (sizeText == SIZE(0, 0)) {
    rectFrame.top += FontGetTextExtent(hDC, _T("A")).cy / 2;
  }

  int xMargin = sizeText.cy / 2;
  RECT rectText = rect;
  rectText.left += xMargin;
  rectText.right = rectText.left + sizeText.cx + xMargin;
  rectText.bottom = rectText.top + sizeText.cy;

  if (!strName.IsEmpty()) {
    hDC->ExcludeClipRect(rectText);
  }

  s->m_ctrlRibbonBtnGroup.DrawFrame(hDC, rectFrame);
  hDC->SelectClipRgn(NULL);

  if (strName.IsEmpty()) {
    return;
  }

  DWORD dwTextStyle = DT_SINGLELINE | DT_VCENTER | DT_CENTER | DT_NOCLIP;

  if (bOnGlass) {
    DrawTextOnGlass(hDC, strName, rectText, dwTextStyle, 10, globalData.clrBtnText);
  }
  else {
    const char* strCaption = strName;
    draw_textR(hDC, strCaption, rectText, dwTextStyle);
  }
}
BOOL CBCGPVisualManager2007::OnFillDialog(HDDC hDC, CWnd* pDlg, RECT rect)
{
  if (!CanDrawImage() || s->m_clrDlgBackground == NULL) {
    return CBCGPVisualManager2003::OnFillDialog(hDC, pDlg, rect);
  }

  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &GetDlgBackBrush(pDlg));
  return TRUE;
}
void CBCGPVisualManager2007::OnDrawSliderChannel(HDDC hDC, CBCGPSliderCtrl* pSlider, BOOL bVert, RECT rect, BOOL bDrawOnGlass)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawSliderChannel(hDC, pSlider, bVert, rect, bDrawOnGlass);
    return;
  }

  ASSERT(hDC);
  DrawSeparator(hDC, rect, s->m_penSeparatorDark, s->m_penSeparator2, !bVert);
}
void CBCGPVisualManager2007::OnDrawSliderThumb(HDDC hDC, CBCGPSliderCtrl* pSlider,
    RECT rect, BOOL bIsHighlighted, BOOL bIsPressed, BOOL bIsDisabled,
    BOOL bVert, BOOL bLeftTop, BOOL bRightBottom,
    BOOL bDrawOnGlass)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawSliderThumb(
        hDC, pSlider, rect, bIsHighlighted, bIsPressed, bIsDisabled,
        bVert, bLeftTop, bRightBottom, bDrawOnGlass);
    return;
  }

  ASSERT(hDC);
  int indexRen = 0;

  if (bLeftTop && bRightBottom) {
    indexRen = 1;
  }
  else if (bLeftTop) {
    indexRen = 2;
  }

  if (bVert) {
    indexRen += 3;
  }

  CBCGPControlRenderer* pRenderer = &s->m_ctrlSliderThumb[indexRen];

  if (pRenderer != NULL) {
    int index = 0;

    if (bIsDisabled) {
      index = 3;
    }
    else {
      if (bIsPressed) {
        index = 2;
      }
      else if (bIsHighlighted) {
        index = 1;
      }
    }

    pRenderer->Draw(hDC, rect, index);
  }
}
BCGP_SMARTDOCK_THEME CBCGPVisualManager2007::GetSmartDockingTheme()
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() || !globalData.IsWindowsLayerSupportAvailable() ||
      !globalData.bIsWindowsVista) {
    return CBCGPVisualManager2003::GetSmartDockingTheme();
  }

  return BCGP_SDT_VS2008;
}
#define UPDATE_COLOR(clr, dblHue, dblSaturation) \
  { \
    double H, L, S; \
    RGBtoHSL (clr, &H, &S, &L); \
    H = H * 360.0 + dblHue; \
    H = H - ((int)(H / 360)) * 360; \
    S = MAX (0.0, MIN (S + dblSaturation, 1.0)); \
    clr = HLStoRGB_TWO (H, L, S); \
  } \
#define RT_BCG_STYLE_XML _T("STYLE_XML")
IMPLEMENT_DYNCREATE(CBCGPVisualManagerCarbon, CBCGPVisualManager2007)
//
// Construction/Destruction
//
const char* CBCGPVisualManagerCarbon::GetStyleResourceID()
{
  const char* strResID(_T("IDX_STYLE"));
  strResID = _T("CARBON_") + strResID;
  return strResID;
};
BOOL CBCGPVisualManagerCarbon::SetStyle(LPCTSTR lpszPath)
{
  const char* strVer;
  strVer.Format(_T("%d%d"), _BCGCBPRO_VERSION_MAJOR, _BCGCBPRO_VERSION_MINOR);
  const char* strStyleDLLName = _T("BCGPStyleCarbon") + strVer + _T(".dll");
  const char* strStyleDLLPath;

  if (lpszPath != NULL && _tcslen(lpszPath) > 0) {
    strStyleDLLPath = lpszPath;

    if (strStyleDLLPath[strStyleDLLPath.GetLength() - 1] != _T('\\')) {
      strStyleDLLPath += _T('\\');
    }

    strStyleDLLPath += strStyleDLLName;
  }
  else {
    strStyleDLLPath = strStyleDLLName;
  }

  HINSTANCE hinstRes = LoadLibrary(strStyleDLLPath);

  if (hinstRes <= (HINSTANCE) 32) {
    TRACE(_T("Cannot load Style DLL: %s\r\n"), strStyleDLLPath);
    ASSERT(FALSE);
    return FALSE;
  }

  SetResourceHandle(hinstRes);
  s->m_bAutoFreeRes = TRUE;
  return TRUE;
}
CBCGPVisualManagerCarbon::CBCGPVisualManagerCarbon()
{
  s->m_bUpdateColors = FALSE;
  s->m_dblHue = 0.0;
  s->m_dblSaturation = 0.0;
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseMainBorderCaption.GetImages(), &s->m_ctrlMainBorderCaption.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseMainBorderL.GetImages(), &s->m_ctrlMainBorderL.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseMainBorderR.GetImages(), &s->m_ctrlMainBorderR.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseMainBorderTB.GetImages(), &s->m_ctrlMainBorderTB.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseMainBorder.GetImages(), &s->m_ctrlMainBorder.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseMDIChildBorder.GetImages(), &s->m_ctrlMDIChildBorder.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseMiniBorderCaption.GetImages(), &s->m_ctrlMiniBorderCaption.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseMiniBorderTB.GetImages(), &s->m_ctrlMiniBorderTB.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseMiniBorder.GetImages(), &s->m_ctrlMiniBorder.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseDialogBorder.GetImages(), &s->m_ctrlDialogBorder.GetImages()));

  for (int i = 0; i < 2; i++) {
    s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseSysBtnBack[i].GetImages(), &s->m_SysBtnBack[i].GetImages()));
    s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseSysBtnBackC[i].GetImages(), &s->m_SysBtnBackC[i].GetImages()));
  }

  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseStatusBarBack.GetImages(), &s->m_ctrlStatusBarBack.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseStatusBarBack_Ext.GetImages(), &s->m_ctrlStatusBarBack_Ext.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseMenuBarBtn.GetImages(), &s->m_ctrlMenuBarBtn.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBasePopupBorder.GetImages(), &s->m_ctrlPopupBorder.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_BaseToolBarGripper, &s->m_ToolBarGripper));
  s->m_arLinkImages.Add(XLinkImages(&s->m_BaseToolBarTear, &s->m_ToolBarTear));
  s->m_arLinkImages.Add(XLinkImages(&s->m_BaseStatusBarPaneBorder, &s->m_StatusBarPaneBorder));
  s->m_arLinkImages.Add(XLinkImages(&s->m_BaseStatusBarSizeBox, &s->m_StatusBarSizeBox));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseToolBarBtn.GetImages(), &s->m_ctrlToolBarBtn.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseMenuItemBack.GetImages(), &s->m_ctrlMenuItemBack.GetImages()));
  s->m_arLinkImages.Add(XLinkImages(&s->m_BaseMenuItemMarkerC, &s->m_MenuItemMarkerC));
  s->m_arLinkImages.Add(XLinkImages(&s->m_BaseMenuItemMarkerR, &s->m_MenuItemMarkerR));
  s->m_arLinkImages.Add(XLinkImages(&s->m_ctrlBaseRibbonBtnPush.GetImages(), &s->m_ctrlRibbonBtnPush.GetImages()));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseBarFace, globalData.clrBtnFace));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseActiveCaption, globalData.clrActiveCaption));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseInactiveCaption, globalData.clrInactiveCaption));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseBarShadow, globalData.clrBtnShadow));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseBarDkShadow, globalData.clrBtnDkShadow));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseBarLight, globalData.clrBtnLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseFloatToolBarBorder, &s->m_clrFloatToolBarBorder));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseHighlightGradientDark, &s->m_clrHighlightGradientDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseHighlightGradientLight, &s->m_clrHighlightGradientLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseHighlightDnGradientDark, &s->m_clrHighlightDnGradientDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseHighlightDnGradientLight, &s->m_clrHighlightDnGradientLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseHighlightCheckedGradientDark, &s->m_clrHighlightCheckedGradientDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseHighlightCheckedGradientLight, &s->m_clrHighlightCheckedGradientLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBasePressedButtonBorder, &s->m_clrPressedButtonBorder));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseDlgBackground, &s->m_clrDlgBackground));
  s->m_arLinkColors.Add(XLinkColors(&s->m_BaseToolTipParams.s->m_clrFill, &s->m_ToolTipParams.s->m_clrFill));
  s->m_arLinkColors.Add(XLinkColors(&s->m_BaseToolTipParams.s->m_clrFillGradient, &s->m_ToolTipParams.s->m_clrFillGradient));
  s->m_arLinkColors.Add(XLinkColors(&s->m_BaseToolTipParams.s->m_clrBorder, &s->m_ToolTipParams.s->m_clrBorder));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseMainClientArea, &s->m_clrMainClientArea));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseMenuLight, &s->m_clrMenuLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseMenuBorder, &s->m_clrMenuBorder));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseMenuRarelyUsed, &s->m_clrMenuRarelyUsed));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseMenuItemBorder, &s->m_clrMenuItemBorder));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseMenuGutterLight, &s->m_clrMenuGutterLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseMenuGutterDark, &s->m_clrMenuGutterDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseSeparator1, &s->m_clrSeparator1));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseSeparator2, &s->m_clrSeparator2));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseSeparatorLight, &s->m_clrSeparatorLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseSeparatorDark, &s->m_clrSeparatorDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseBarBkgnd, &s->m_clrBtnBkgnd));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseBarGradientLight, &s->m_clrBtnGradientLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseBarGradientDark, &s->m_clrBtnGradientDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseToolBarGradientLight, &s->m_clrToolBarGradientLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseToolBarGradientDark, &s->m_clrToolBarGradientDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseToolbarDisabled, &s->m_clrToolbarDisabled));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseToolBarGradientVertLight, &s->m_clrToolBarGradientVertLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseToolBarGradientVertDark, &s->m_clrToolBarGradientVertDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseCustomizeButtonGradientLight, &s->m_clrCustomizeButtonGradientLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseCustomizeButtonGradientDark, &s->m_clrCustomizeButtonGradientDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseToolBarBottomLine, &s->m_clrToolBarBottomLine));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseSeparatorLight, &s->m_clrSeparatorLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseSeparatorDark, &s->m_clrSeparatorDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseMenuBarGradientLight, &s->m_clrMenuBarGradientLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseMenuBarGradientDark, &s->m_clrMenuBarGradientDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseMenuBarGradientVertLight, &s->m_clrMenuBarGradientVertLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseMenuBarGradientVertDark, &s->m_clrMenuBarGradientVertDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseCaptionBarGradientLight, &s->m_clrCaptionBarGradientLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseCaptionBarGradientDark, &s->m_clrCaptionBarGradientDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTab3DFace, &s->m_clrTab3DFace));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTab3DBlack, &s->m_clrTab3DBlack));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTab3DDark, &s->m_clrTab3DDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTab3DDarkShadow, &s->m_clrTab3DDarkShadow));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTab3DLight, &s->m_clrTab3DLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTab3DHighlight, &s->m_clrTab3DHighlight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTabFlatFace, &s->m_clrTabFlatFace));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTabFlatBlack, &s->m_clrTabFlatBlack));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTabFlatDark, &s->m_clrTabFlatDark));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTabFlatDarkShadow, &s->m_clrTabFlatDarkShadow));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTabFlatLight, &s->m_clrTabFlatLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBaseTabFlatHighlight, &s->m_clrTabFlatHighlight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBasePopupGradientLight, &s->m_clrPopupGradientLight));
  s->m_arLinkColors.Add(XLinkColors(&s->m_clrBasePopupGradientDark, &s->m_clrPopupGradientDark));
}
CBCGPVisualManagerCarbon::~CBCGPVisualManagerCarbon()
{
}
void CBCGPVisualManagerCarbon::CleanUp()
{
  if (s->m_bUpdateColors) {
    return;
  }

  CBCGPVisualManager2007::CleanUp();
  int i = 0;
  s->m_ctrlBaseMainBorderCaption.CleanUp();
  s->m_ctrlBaseMainBorderL.CleanUp();
  s->m_ctrlBaseMainBorderR.CleanUp();
  s->m_ctrlBaseMainBorderTB.CleanUp();
  s->m_ctrlBaseMainBorder.CleanUp();
  s->m_ctrlBaseMDIChildBorder.CleanUp();
  s->m_ctrlBaseMiniBorderCaption.CleanUp();
  s->m_ctrlBaseMiniBorderTB.CleanUp();
  s->m_ctrlBaseMiniBorder.CleanUp();
  s->m_ctrlBaseDialogBorder.CleanUp();

  for (i = 0; i < 2; i++) {
    s->m_ctrlBaseSysBtnBack[i].CleanUp();
    s->m_ctrlBaseSysBtnBackC[i].CleanUp();
  }

  s->m_ctrlBaseStatusBarBack.CleanUp();
  s->m_ctrlBaseStatusBarBack_Ext.CleanUp();
  s->m_ctrlBaseMenuBarBtn.CleanUp();
  s->m_ctrlBasePopupBorder.CleanUp();
  s->m_BaseToolBarGripper.Clear();
  s->m_BaseToolBarTear.Clear();
  s->m_BaseStatusBarPaneBorder.Clear();
  s->m_BaseStatusBarSizeBox.Clear();
  s->m_ctrlBaseToolBarBtn.CleanUp();
  s->m_ctrlBaseMenuItemBack.CleanUp();
  s->m_BaseMenuItemMarkerC.Clear();
  s->m_BaseMenuItemMarkerR.Clear();
  s->m_clrBaseBarFace = 0;
  s->m_clrBaseActiveCaption = 0;
  s->m_clrBaseInactiveCaption = 0;
  s->m_clrBaseFloatToolBarBorder = 0;
  s->m_clrBaseDlgBackground = 0;
  s->m_clrBaseMainClientArea = 0;
  s->m_clrBaseBarBkgnd = 0;
  s->m_clrBaseBarGradientLight = 0;
  s->m_clrBaseBarGradientDark = 0;
  s->m_clrBaseToolBarGradientLight = 0;
  s->m_clrBaseToolBarGradientDark = 0;
  s->m_clrBaseToolbarDisabled = 0;
  s->m_clrBaseToolBarGradientVertLight = 0;
  s->m_clrBaseToolBarGradientVertDark = 0;
  s->m_clrBaseCustomizeButtonGradientLight = 0;
  s->m_clrBaseCustomizeButtonGradientDark = 0;
  s->m_clrBaseToolBarBottomLine = 0;
  s->m_clrBaseSeparatorLight = 0;
  s->m_clrBaseSeparatorDark = 0;
  s->m_clrBaseMenuBarGradientLight = 0;
  s->m_clrBaseMenuBarGradientDark = 0;
  s->m_clrBaseMenuBarGradientVertLight = 0;
  s->m_clrBaseMenuBarGradientVertDark = 0;
  s->m_clrBaseTab3DFace = CLR_DEFAULT;
  s->m_clrBaseTab3DBlack = CLR_DEFAULT;
  s->m_clrBaseTab3DDark = CLR_DEFAULT;
  s->m_clrBaseTab3DDarkShadow = CLR_DEFAULT;
  s->m_clrBaseTab3DLight = CLR_DEFAULT;
  s->m_clrBaseTab3DHighlight = CLR_DEFAULT;
  s->m_clrBaseTabFlatFace = CLR_DEFAULT;
  s->m_clrBaseTabFlatBlack = CLR_DEFAULT;
  s->m_clrBaseTabFlatDark = CLR_DEFAULT;
  s->m_clrBaseTabFlatDarkShadow = CLR_DEFAULT;
  s->m_clrBaseTabFlatLight = CLR_DEFAULT;
  s->m_clrBaseTabFlatHighlight = CLR_DEFAULT;
  s->m_clrLinkText = CLR_DEFAULT;
  s->m_clrLinkHotText = CLR_DEFAULT;
  s->m_clrActionText = CLR_DEFAULT;
  CBCGPToolTipParams dummy;
  s->m_BaseToolTipParams = dummy;

  for (i = 0; i < 2; i++) {
    s->m_SysBtnBackC[i].CleanUp();
    s->m_SysBtnBackH[i].CleanUp();
    s->m_SysBtnBackCH[i].CleanUp();
  }

  s->m_ctrlMiniSysBtn.CleanUp();
  s->m_clrBaseMenuGutterLight = CLR_DEFAULT;
  s->m_clrBaseMenuGutterDark = CLR_DEFAULT;
  s->m_bLoaded = FALSE;
}
void CBCGPVisualManagerCarbon::UpdateColors(double h, double s)
{
  if (s->m_dblHue != h || s->m_dblSaturation != s) {
    s->m_dblHue = h;
    s->m_dblSaturation = s;
    UpdateLinked();
  }
}
void CBCGPVisualManagerCarbon::UpdateLinked()
{
  if (s->m_arLinkImages.GetSize() == 0 &&
      s->m_arLinkColors.GetSize() == 0) {
    return;
  }

  int i = 0;

  for (i = 0; i < s->m_arLinkImages.GetSize(); i++) {
    HBITMAP bmpSrc = s->m_arLinkImages[i].bmpSrc->GetImageWell();
    HBITMAP bmpDst = s->m_arLinkImages[i].bmpDst->GetImageWell();

    if (bmpSrc == NULL) {
      continue;
    }

    if (bmpDst == NULL) {
      s->m_arLinkImages[i].bmpSrc->CopyTo(*s->m_arLinkImages[i].bmpDst);
      bmpDst = s->m_arLinkImages[i].bmpDst->GetImageWell();

      if (bmpDst == NULL) {
        continue;
      }
    }

    DIBSECTION dibSrc;
    ZeroMemory(&dibSrc, sizeof(DIBSECTION));

    if (::GetObject(bmpSrc, sizeof(DIBSECTION), &dibSrc) != sizeof(DIBSECTION) ||
        dibSrc.dsBm.bmBits == NULL) {
      continue;
    }

    DIBSECTION dibDst;
    ZeroMemory(&dibDst, sizeof(DIBSECTION));

    if (::GetObject(bmpDst, sizeof(DIBSECTION), &dibDst) != sizeof(DIBSECTION) ||
        dibDst.dsBm.bmBits == NULL) {
      continue;
    }

    if (dibSrc.dsBm.bmWidth != dibDst.dsBm.bmWidth ||
        dibSrc.dsBm.bmHeight != dibDst.dsBm.bmHeight ||
        dibSrc.dsBm.bmBitsPixel != dibDst.dsBm.bmBitsPixel) {
      continue;
    }

    const int width  = dibSrc.dsBm.bmWidth;
    const int height = dibSrc.dsBm.bmHeight;
    const int pitch  = dibSrc.dsBm.bmWidthBytes;
    LPBYTE pBitsSrc  = (LPBYTE)dibSrc.dsBm.bmBits;
    LPBYTE pBitsDst  = (LPBYTE)dibDst.dsBm.bmBits;

    for (int y = 0; y < height; y++) {
      LPBYTE pRowSrc = pBitsSrc;
      LPBYTE pRowDst = pBitsDst;

      for (int x = 0; x < width; x++) {
        if (pRowSrc[2] != pRowSrc[1] || pRowSrc[1] != pRowSrc[0]) {
          COLORREF clr = _RGB(pRowSrc[2], pRowSrc[1], pRowSrc[0]);
          UPDATE_COLOR(clr, s->m_dblHue, s->m_dblSaturation);
          *pRowDst++ = GetBValue(clr);
          *pRowDst++ = GetGValue(clr);
          *pRowDst++ = GetRValue(clr);
          *pRowDst++;
        }
        else {
          memcpy(pRowDst, pRowSrc, 4);
          pRowDst += 4;
        }

        pRowSrc += 4;
      }

      pBitsSrc += pitch;
      pBitsDst += pitch;
    }
  }

  for (i = 0; i < s->m_arLinkColors.GetSize(); i++) {
    *s->m_arLinkColors[i].clrDst = *s->m_arLinkColors[i].clrSrc;

    if (*s->m_arLinkColors[i].clrSrc != 0) {
      UPDATE_COLOR(*s->m_arLinkColors[i].clrDst, s->m_dblHue, s->m_dblSaturation);
    }
  }

  if (globalData.clrBtnFace != 0) {
    globalData.clrBtnFace.DeleteObject();
    globalData.clrBtnFace.CreateSolidBrush(globalData.clrBtnFace);
  }

  if (globalData.clrActiveCaption != 0) {
    globalData.clrActiveCaption.DeleteObject();
    globalData.clrActiveCaption.CreateSolidBrush(globalData.clrActiveCaption);
  }

  if (globalData.clrInactiveCaption != 0) {
    globalData.clrInactiveCaption.DeleteObject();
    globalData.clrInactiveCaption.CreateSolidBrush(globalData.clrInactiveCaption);
  }

  if (s->m_clrFloatToolBarBorder != 0) {
    s->m_clrFloatToolBarBorder.DeleteObject();
    s->m_clrFloatToolBarBorder.CreateSolidBrush(s->m_clrFloatToolBarBorder);
  }

  if (s->m_clrDlgBackground != 0) {
    s->m_clrDlgBackground.DeleteObject();
    s->m_clrDlgBackground.CreateSolidBrush(s->m_clrDlgBackground);
  }

  if (s->m_clrMainClientArea != 0) {
    s->m_clrMainClientArea.DeleteObject();
    s->m_clrMainClientArea.CreateSolidBrush(s->m_clrMainClientArea);
  }

  if (s->m_clrMenuLight != 0) {
    s->m_clrMenuLight.DeleteObject();
    s->m_clrMenuLight.CreateSolidBrush(s->m_clrMenuLight);
  }

  if (s->m_clrMenuRarelyUsed != 0) {
    s->m_clrMenuRarelyUsed.DeleteObject();
    s->m_clrMenuRarelyUsed.CreateSolidBrush(s->m_clrMenuRarelyUsed);
  }

  if (s->m_clrSeparator1 != 0) {
    s->m_penSeparator.DeleteObject();
    s->m_penSeparator.CreatePen = (s->m_clrSeparator1);
  }

  if (s->m_clrSeparator2 != 0) {
    s->m_penSeparator2.DeleteObject();
    s->m_penSeparator2.CreatePen = (s->m_clrSeparator2);
  }

  if (s->m_clrMenuItemBorder != 0) {
    s->m_penMenuItemBorder.DeleteObject();
    s->m_penMenuItemBorder.CreatePen = (s->m_clrMenuItemBorder);
  }

  if (s->m_clrBtnBkgnd != 0) {
    s->m_clrBtnBkgnd.DeleteObject();
    s->m_clrBtnBkgnd.CreateSolidBrush(s->m_clrBtnBkgnd);
  }

  if (s->m_clrToolBarBottomLine != 0) {
    s->m_penBottomLine.DeleteObject();
    s->m_penBottomLine.CreatePen = (s->m_clrToolBarBottomLine);
  }

  if (s->m_clrSeparatorDark != 0) {
    s->m_penSeparatorDark.DeleteObject();
    s->m_penSeparatorDark.CreatePen = (s->m_clrSeparatorDark);
  }

  if (s->m_clrSeparatorLight != 0) {
    s->m_penSeparatorLight.DeleteObject();
    s->m_penSeparatorLight.CreatePen = (s->m_clrSeparatorLight);
  }

  s->m_clrEditBorder            = s->m_clrPressedButtonBorder;
  s->m_clrEditBorderDisabled    = globalData.clrBtnShadow;
  s->m_clrEditBorderHighlighted = s->m_clrEditBorder;
  s->m_clrEditSelection         = globalData.clrHilite;
  s->m_clrComboBorder               = s->m_clrEditBorder;
  s->m_clrComboBorderDisabled       = s->m_clrEditBorderDisabled;
  s->m_clrComboBorderHighlighted    = s->m_clrEditBorderHighlighted;
  s->m_clrComboBorderPressed        = s->m_clrComboBorderHighlighted;
  s->m_clrComboBtnBorder            = s->m_clrComboBorder;
  s->m_clrComboBtnBorderDisabled    = globalData.clrBtnHilite;
  s->m_clrComboBtnBorderHighlighted = s->m_clrComboBorderHighlighted;
  s->m_clrComboBtnBorderPressed     = s->m_clrComboBorderPressed;
  s->m_clrComboSelection            = s->m_clrEditSelection;
  s->m_clrComboBtnStart             = s->m_clrHighlightGradientDark;
  s->m_clrComboBtnFinish            = s->m_clrHighlightGradientLight;
  s->m_clrComboBtnDisabledStart     = globalData.clrBtnFace;
  s->m_clrComboBtnDisabledFinish    = s->m_clrComboBtnDisabledStart;
  s->m_clrComboBtnHighlightedStart  = s->m_clrHighlightCheckedGradientDark;
  s->m_clrComboBtnHighlightedFinish = s->m_clrHighlightCheckedGradientLight;
  s->m_clrComboBtnPressedStart      = s->m_clrHighlightDnGradientDark;
  s->m_clrComboBtnPressedFinish     = s->m_clrHighlightDnGradientLight;
  s->m_clrTaskPaneGroupBorder = s->m_clrToolBarBottomLine;
}
void CBCGPVisualManagerCarbon::OnUpdateSystemColors()
{
  if (s->m_bUpdateColors || CBCGPVisualManager::GetInstance() != this) {
    return;
  }

  if (globalData.bIsWindows9x) {
    CBCGPVisualManager2007::OnUpdateSystemColors();
    return;
  }

  if (!globalData.bIsOSAlphaBlendingSupport ||
      globalData.IsHighContastMode() ||
      globalData.m_nBitsPerPixel <= 8) {
    CBCGPVisualManager2007::OnUpdateSystemColors();
    return;
  }

  s->m_bUpdateColors = TRUE;
  CBCGPVisualManager2007::Style style = CBCGPVisualManager2007::s->m_Style;
  HINSTANCE hinstRes       = CBCGPVisualManager2007::s->m_hinstRes;
  const char*   strStylePrefix = CBCGPVisualManager2007::s->m_strStylePrefix;
  BOOL    bAutoFreeRes   = CBCGPVisualManager2007::s->m_bAutoFreeRes;
  s->m_bAutoFreeRes = FALSE;

  if (!CBCGPVisualManager2007::SetStyle(CBCGPVisualManager2007::VS2007_ObsidianBlack)) {
    return;
  }

  CBCGPVisualManager2007::OnUpdateSystemColors();
  HINSTANCE hinstResOld = NULL;

  if (!SetStyle()) {
    return;
  }

  if (s->m_hinstRes != NULL) {
    hinstResOld = AfxGetResourceHandle();
    AfxSetResourceHandle(s->m_hinstRes);
  }

  CBCGPTagManager tm;
  CBCGPTagManager::SetBaseColor(0, 0);

  if (!tm.LoadFromResource(GetStyleResourceID(), RT_BCG_STYLE_XML)) {
    if (hinstResOld != NULL) {
      AfxSetResourceHandle(hinstResOld);
    }

    return;
  }

  {
    const char* strStyle;
    tm.ExcludeTag(_T("STYLE"), strStyle);
    tm.SetBuffer(strStyle);
  }

  const char* strItem;
  s->m_nType = 20;

  if (!tm.IsEmpty()) {
    int nVersion = 0;

    if (tm.ExcludeTag(_T("VERSION"), strItem)) {
      CBCGPTagManager tmItem(strItem);
      tmItem.ReadInt(_T("NUMBER"), nVersion);

      if (nVersion == 2007) {
        tmItem.ReadInt(_T("TYPE"), s->m_nType);

        if (s->m_nType < 10) {
          s->m_nType *= 10;
        }

        s->m_bLoaded = TRUE;
      }

      if (s->m_bLoaded) {
        if (tmItem.ExcludeTag(_T("ID_PREFIX"), strItem)) {
          strItem.TrimLeft();
          strItem.TrimRight();
          s->m_strStylePrefix = strItem;
        }
      }
    }
  }

  if (!s->m_bLoaded) {
    if (hinstResOld != NULL) {
      ::AfxSetResourceHandle(hinstResOld);
    }

    CBCGPTagManager::SetBaseColor(0, 0);
    return;
  }

  s->m_szNcBtnSize[0] = SIZE(GetSystemMetrics(Ss->m_CXSIZE),
      GetSystemMetrics(Ss->m_CYSIZE));
  s->m_szNcBtnSize[1] = SIZE(GetSystemMetrics(Ss->m_CXSMSIZE),
      GetSystemMetrics(Ss->m_CYSMSIZE));

  // globals
  if (tm.ExcludeTag(_T("GLOBALS"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadColor(_T("BarText"), globalData.clrBtnText);
    tmItem.ReadColor(_T("BarFace"), s->m_clrBaseBarFace);
    tmItem.ReadColor(_T("ActiveCaption"), s->m_clrBaseActiveCaption);
    s->m_clrBaseInactiveCaption     = s->m_clrBaseActiveCaption;

    if (tmItem.ReadColor(_T("CaptionText"), globalData.clrCaptionText)) {
      globalData.clrInactiveCaptionText = globalData.clrCaptionText;
    }

    tmItem.ReadColor(_T("InactiveCaption"), s->m_clrBaseInactiveCaption);
    tmItem.ReadColor(_T("InactiveCaptionText"), globalData.clrInactiveCaptionText);
    tmItem.ReadColor(_T("BarShadow"), s->m_clrBaseBarShadow);
    tmItem.ReadColor(_T("BarDkShadow"), s->m_clrBaseBarDkShadow);
    tmItem.ReadColor(_T("BarLight"), s->m_clrBaseBarLight);
    tmItem.ReadColor(_T("FloatToolBarBorder"), s->m_clrBaseFloatToolBarBorder);
    tmItem.ReadColor(_T("HighlightGradientDark"), s->m_clrBaseHighlightGradientDark);
    tmItem.ReadColor(_T("HighlightGradientLight"), s->m_clrBaseHighlightGradientLight);
    s->m_clrBaseHighlightDnGradientDark = s->m_clrBaseHighlightGradientLight;
    s->m_clrBaseHighlightDnGradientLight = s->m_clrBaseHighlightGradientDark;
    tmItem.ReadColor(_T("HighlightDnGradientDark"), s->m_clrBaseHighlightDnGradientDark);
    tmItem.ReadColor(_T("HighlightDnGradientLight"), s->m_clrBaseHighlightDnGradientLight);
    s->m_clrBaseHighlightCheckedGradientDark = s->m_clrBaseHighlightDnGradientLight;
    s->m_clrBaseHighlightCheckedGradientLight = s->m_clrBaseHighlightDnGradientDark;
    tmItem.ReadColor(_T("HighlightCheckedGradientDark"), s->m_clrBaseHighlightCheckedGradientDark);
    tmItem.ReadColor(_T("HighlightCheckedGradientLight"), s->m_clrBaseHighlightCheckedGradientLight);
    tmItem.ReadColor(_T("PressedButtonBorder"), s->m_clrBasePressedButtonBorder);
    COLORREF clrHB = globalData.clrHilite;
    COLORREF clrHT = globalData.clrTextHilite;

    if (tmItem.ReadColor(_T("Highlight"), clrHB) &&
        tmItem.ReadColor(_T("HighlightText"), clrHT)) {
      globalData.clrHilite = clrHB;
      globalData.clrHilite.DeleteObject();
      globalData.clrHilite.CreateSolidBrush(clrHB);
      globalData.clrTextHilite = clrHT;
    }

    tmItem.ReadColor(_T("LinkText"), s->m_clrLinkText);
    tmItem.ReadColor(_T("LinkHotText"), s->m_clrLinkHotText);
    tmItem.ReadColor(_T("ActionText"), s->m_clrActionText);
    tmItem.ReadColor(_T("MenuShadowColor"), s->m_clrMenuShadowBase);
    // dialog background
    s->m_clrBaseDlgBackground = s->m_clrBaseBarLight;
    tmItem.ReadColor(_T("DlgBackColor"), s->m_clrBaseDlgBackground);
    // ToolTipParams
    s->m_bToolTipParams = tmItem.ReadToolTipParams(_T("TOOLTIP"), s->m_BaseToolTipParams);
    s->m_ToolTipParams = s->m_BaseToolTipParams;
  }

  // mainwnd
  if (tm.ExcludeTag(_T("MAINWND"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    // caption
    const char* strCaption;

    if (tmItem.ExcludeTag(_T("CAPTION"), strCaption)) {
      CBCGPTagManager tmCaption(strCaption);
      NONCLIENTMETRICS ncm;

      if (globalData.GetNonClientMetrics(ncm)) {
        tmCaption.ReadFont(_T("FONT"), ncm.lfCaptionFont);
        s->m_AppCaptionFont.DeleteObject();
        s->m_AppCaptionFont.CreateFontIndirect(&ncm.lfCaptionFont);
      }

      tmCaption.ReadColor(_T("ActiveText"), s->m_clrAppCaptionActiveText);
      tmCaption.ReadColor(_T("InactiveText"), s->m_clrAppCaptionInactiveText);
      tmCaption.ReadColor(_T("ActiveTitleText"), s->m_clrAppCaptionActiveTitleText);
      tmCaption.ReadColor(_T("InactiveTitleText"), s->m_clrAppCaptionInactiveTitleText);
      tmCaption.ReadBool(_T("TextCenter"), s->m_bNcTextCenter);
      tmCaption.ReadControlRenderer(_T("BORDER"), s->m_ctrlBaseMainBorderCaption, MakeResourceID(_T("IDB_MAINBORDER_CAPTION")));
      s->m_ctrlBaseMainBorderCaption.CopyTo(s->m_ctrlMainBorderCaption);
      // buttons
      const char* strButtons;

      if (tmCaption.ExcludeTag(_T("BUTTONS"), strButtons)) {
        CBCGPTagManager tmButtons(strButtons);
        LPCTSTR szTags[4] = {
          _T("NORMAL"),
          _T("NORMAL_SMALL"),
          _T("CLOSE"),
          _T("CLOSE_SMALL")
        };

        for (int i = 0; i < 2; i++) {
          const char* str;
          const char* suffix;

          if (i == 1) {
            suffix = _T("_S");
          }

          if (tmButtons.ExcludeTag(szTags[i], str)) {
            CBCGPTagManager tmBtn(str);
            SIZE sizeIcon(0, 0);

            if (tmBtn.ReadSize(_T("IconSize"), sizeIcon)) {
              s->m_SysBtnRestore[i].Clear();
              s->m_SysBtnRestore[i].SetPreMultiplyAutoCheck(TRUE);
              s->m_SysBtnRestore[i].SetImageSize(sizeIcon);
              s->m_SysBtnRestore[i].LoadStr(MakeResourceID(_T("IDB_SYS_BTN_RESTORE") + suffix));
              s->m_SysBtnMaximize[i].Clear();
              s->m_SysBtnMaximize[i].SetPreMultiplyAutoCheck(TRUE);
              s->m_SysBtnMaximize[i].SetImageSize(sizeIcon);
              s->m_SysBtnMaximize[i].LoadStr(MakeResourceID(_T("IDB_SYS_BTN_MAXIMIZE") + suffix));
              s->m_SysBtnMinimize[i].Clear();
              s->m_SysBtnMinimize[i].SetPreMultiplyAutoCheck(TRUE);
              s->m_SysBtnMinimize[i].SetImageSize(sizeIcon);
              s->m_SysBtnMinimize[i].LoadStr(MakeResourceID(_T("IDB_SYS_BTN_MINIMIZE") + suffix));
              s->m_SysBtnHelp[i].Clear();
              s->m_SysBtnHelp[i].SetPreMultiplyAutoCheck(TRUE);
              s->m_SysBtnHelp[i].SetImageSize(sizeIcon);
              s->m_SysBtnHelp[i].LoadStr(MakeResourceID(_T("IDB_SYS_BTN_HELP") + suffix));
            }

            CBCGPTagManager::ParseControlRenderer(tmBtn.GetBuffer(),
                s->m_ctrlBaseSysBtnBack[i], MakeResourceID(_T("IDB_SYS_BTN_BACK")));
            s->m_ctrlBaseSysBtnBack[i].CopyTo(s->m_SysBtnBack[i]);
            CBCGPTagManager::ParseControlRenderer(tmBtn.GetBuffer(),
                s->m_SysBtnBackH[i], MakeResourceID(_T("IDB_SYS_BTN_BACK_H")));
          }

          if (tmButtons.ExcludeTag(szTags[i + 2], str)) {
            CBCGPTagManager tmBtn(str);
            SIZE sizeIcon(0, 0);

            if (tmBtn.ReadSize(_T("IconSize"), sizeIcon)) {
              s->m_SysBtnClose[i].Clear();
              s->m_SysBtnClose[i].SetPreMultiplyAutoCheck(TRUE);
              s->m_SysBtnClose[i].SetImageSize(sizeIcon);
              s->m_SysBtnClose[i].LoadStr(MakeResourceID(_T("IDB_SYS_BTN_CLOSE") + suffix));
            }

            CBCGPTagManager::ParseControlRenderer(tmBtn.GetBuffer(),
                s->m_ctrlBaseSysBtnBackC[i], MakeResourceID(_T("IDB_SYS_BTN_BACK_C") + suffix));
            s->m_ctrlBaseSysBtnBackC[i].CopyTo(s->m_SysBtnBackC[i]);
            CBCGPTagManager::ParseControlRenderer(tmBtn.GetBuffer(),
                s->m_SysBtnBackCH[i], MakeResourceID(_T("IDB_SYS_BTN_BACK_C_H") + suffix));
          }
        }
      }
    }

    // border
    tmItem.ReadControlRenderer(_T("BORDER"), s->m_ctrlBaseMainBorder, MakeResourceID(_T("IDB_MAINBORDER")));
    s->m_ctrlBaseMainBorder.CopyTo(s->m_ctrlMainBorder);
    tmItem.ReadControlRenderer(_T("BORDER_L"), s->m_ctrlBaseMainBorderL, MakeResourceID(_T("IDB_MAINBORDER_L")));
    s->m_ctrlBaseMainBorderL.CopyTo(s->m_ctrlMainBorderL);
    tmItem.ReadControlRenderer(_T("BORDER_R"), s->m_ctrlBaseMainBorderR, MakeResourceID(_T("IDB_MAINBORDER_R")));
    s->m_ctrlBaseMainBorderR.CopyTo(s->m_ctrlMainBorderR);
    tmItem.ReadControlRenderer(_T("BORDER_TB"), s->m_ctrlBaseMainBorderTB, MakeResourceID(_T("IDB_MAINBORDER_TB")));
    s->m_ctrlBaseMainBorderTB.CopyTo(s->m_ctrlMainBorderTB);
    tmItem.ReadControlRenderer(_T("BORDER_MDICHILD"), s->m_ctrlBaseMDIChildBorder, MakeResourceID(_T("IDB_MDICHILDBORDER")));
    s->m_ctrlBaseMDIChildBorder.CopyTo(s->m_ctrlMDIChildBorder);

    if (tmItem.ReadColor(_T("MainClientArea"), s->m_clrMainClientArea)) {
      s->m_clrMainClientArea.DeleteObject();
      s->m_clrMainClientArea.CreateSolidBrush(s->m_clrMainClientArea);
    }
  }

  // miniwnd
  if (tm.ExcludeTag(_T("MINIWND"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    // caption
    const char* strCaption;

    if (tmItem.ExcludeTag(_T("CAPTION"), strCaption)) {
      CBCGPTagManager tmCaption(strCaption);
      tmCaption.ReadControlRenderer(_T("BORDER"), s->m_ctrlBaseMiniBorderCaption, MakeResourceID(_T("IDB_MINIBORDER_CAPTION")));
      s->m_ctrlBaseMiniBorderCaption.CopyTo(s->m_ctrlMiniBorderCaption);
      tmCaption.ReadControlRenderer(_T("BUTTONS"), s->m_ctrlMiniSysBtn, MakeResourceID(_T("IDB_MINI_SYS_BTN")));
    }

    // border
    tmItem.ReadControlRenderer(_T("BORDER"), s->m_ctrlBaseMiniBorder, MakeResourceID(_T("IDB_MINIBORDER")));
    s->m_ctrlBaseMiniBorder.CopyTo(s->m_ctrlMiniBorder);
    tmItem.ReadControlRenderer(_T("BORDER_TB"), s->m_ctrlBaseMiniBorderTB, MakeResourceID(_T("IDB_MINIBORDER_TB")));
    s->m_ctrlBaseMiniBorderTB.CopyTo(s->m_ctrlMiniBorderTB);
  }

  // menu
  if (tm.ExcludeTag(_T("MENU"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadColor(_T("Light"), s->m_clrBaseMenuLight);
    tmItem.ReadColor(_T("GutterLight"), s->m_clrBaseMenuGutterLight);
    tmItem.ReadColor(_T("GutterDark"), s->m_clrBaseMenuGutterDark);
    s->m_clrMenuRarelyUsed = CLR_DEFAULT;
    tmItem.ReadColor(_T("Rarely"), s->m_clrBaseMenuRarelyUsed);
    tmItem.ReadColor(_T("Border"), s->m_clrBaseMenuBorder);
    tmItem.ReadColor(_T("Separator1"), s->m_clrBaseSeparator1);
    tmItem.ReadColor(_T("Separator2"), s->m_clrBaseSeparator2);
    COLORREF clrGroupBack = 0;

    if (tmItem.ReadColor(_T("GroupBackground"), clrGroupBack)) {
      s->m_clrGroupBackground.DeleteObject();
      s->m_clrGroupBackground.CreateSolidBrush(clrGroupBack);
    }

    tmItem.ReadColor(_T("GroupText"), s->m_clrGroupText);
    tmItem.ReadColor(_T("ItemBorder"), s->m_clrBaseMenuItemBorder);
    tmItem.ReadControlRenderer(_T("ItemBack"), s->m_ctrlBaseMenuItemBack, MakeResourceID(_T("IDB_MENU_ITEs->m_BACK")));
    s->m_ctrlBaseMenuItemBack.CopyTo(s->m_ctrlMenuItemBack);
    tmItem.ReadToolBarImages(_T("ItemCheck"), s->m_BaseMenuItemMarkerC, MakeResourceID(_T("IDB_MENU_ITEs->m_MARKER_C")));
    s->m_BaseMenuItemMarkerC.CopyTo(s->m_MenuItemMarkerC);
    tmItem.ReadToolBarImages(_T("ItemRadio"), s->m_BaseMenuItemMarkerR, MakeResourceID(_T("IDB_MENU_ITEs->m_MARKER_R")));
    s->m_BaseMenuItemMarkerR.CopyTo(s->m_MenuItemMarkerR);
    tmItem.ReadColor(_T("TextNormal"), s->m_clrMenuText);
    tmItem.ReadColor(_T("TextHighlighted"), s->m_clrMenuTextHighlighted);
    tmItem.ReadColor(_T("TextDisabled"), s->m_clrMenuTextDisabled);
    COLORREF clrImages = s->m_clrMenuText;
    const char* strColors;

    if (tmItem.ExcludeTag(_T("COLORS"), strColors)) {
      CBCGPTagManager tmColors(strColors);
      tmColors.ReadColor(_T("Black"), clrImages);
      CBCGPMenuImages::SetColor(ImageBlack, clrImages);
      tmColors.ReadColor(_T("Black2"), clrImages);
      CBCGPMenuImages::SetColor(ImageBlack2, clrImages);
      struct XColors {
        int state;
        LPCTSTR name;
      };
      XColors colors[4] = {
        {ImageGray, _T("Gray")},
        {ImageLtGray, _T("LtGray")},
        {ImageWhite, _T("White")},
        {ImageDkGray, _T("DkGray")}
      };

      for (int ic = 0; ic < 4; ic++) {
        if (tmColors.ReadColor(colors[ic].name, clrImages)) {
          CBCGPMenuImages::SetColor(colors[ic].state, clrImages);
        }
      }
    }
    else {
      tmItem.ReadColor(_T("ImagesColor"), clrImages);
      CBCGPMenuImages::SetColor(ImageBlack, clrImages);
      CBCGPMenuImages::SetColor(ImageBlack2, clrImages);
    }

    // TODO:
    //CBCGPMenuImages::SetColor (ImageBlack2, _RGB (21, 66, 139));
  }

  // bars
  if (tm.ExcludeTag(_T("BARS"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    const char* strBar;

    if (tmItem.ExcludeTag(_T("DEFAULT"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      tmBar.ReadColor(_T("Bkgnd"), s->m_clrBaseBarBkgnd);
      tmBar.ReadColor(_T("GradientLight"), s->m_clrBaseBarGradientLight);
      s->m_clrBaseBarGradientDark = s->m_clrBaseBarGradientLight;
      tmBar.ReadColor(_T("GradientDark"), s->m_clrBaseBarGradientDark);
    }

    if (tmItem.ExcludeTag(_T("TOOLBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      s->m_clrBaseToolBarGradientLight = s->m_clrBaseBarGradientLight;
      s->m_clrBaseToolBarGradientDark  = s->m_clrBaseBarGradientDark;
      s->m_clrBaseToolbarDisabled = SmartMixColors(
          s->m_clrBaseToolBarGradientDark, s->m_clrBaseToolBarGradientLight);
      tmBar.ReadColor(_T("GradientLight"), s->m_clrBaseToolBarGradientLight);
      tmBar.ReadColor(_T("GradientDark"), s->m_clrBaseToolBarGradientDark);
      s->m_clrBaseToolBarGradientVertLight = s->m_clrBaseToolBarGradientLight;
      s->m_clrBaseToolBarGradientVertDark  = s->m_clrBaseToolBarGradientDark;
      tmBar.ReadColor(_T("GradientVertLight"), s->m_clrBaseToolBarGradientVertLight);
      tmBar.ReadColor(_T("GradientVertDark"), s->m_clrBaseToolBarGradientVertDark);
      tmBar.ReadColor(_T("CustomizeButtonGradientLight"), s->m_clrBaseCustomizeButtonGradientLight);
      tmBar.ReadColor(_T("CustomizeButtonGradientDark"), s->m_clrBaseCustomizeButtonGradientDark);
      tmBar.ReadToolBarImages(_T("GRIPPER"), s->m_BaseToolBarGripper, MakeResourceID(_T("IDB_GRIPPER")));
      s->m_BaseToolBarGripper.CopyTo(s->m_ToolBarGripper);
      tmBar.ReadToolBarImages(_T("TEAR"), s->m_BaseToolBarTear, MakeResourceID(_T("IDB_TEAR")));
      s->m_BaseToolBarTear.CopyTo(s->m_ToolBarTear);
      tmBar.ReadControlRenderer(_T("BUTTON"), s->m_ctrlBaseToolBarBtn, MakeResourceID(_T("IDB_TOOLBAR_BTN")));
      s->m_ctrlBaseToolBarBtn.CopyTo(s->m_ctrlToolBarBtn);
      s->m_clrToolBarBtnText            = globalData.clrBtnText;
      s->m_clrToolBarBtnTextHighlighted = s->m_clrToolBarBtnText;
      tmBar.ReadColor(_T("TextNormal"), s->m_clrToolBarBtnText);
      tmBar.ReadColor(_T("TextHighlighted"), s->m_clrToolBarBtnTextHighlighted);
      tmBar.ReadColor(_T("TextDisabled"), s->m_clrToolBarBtnTextDisabled);
      tmBar.ReadColor(_T("BottomLineColor"), s->m_clrBaseToolBarBottomLine);

      if (!tmBar.ReadColor(_T("SeparatorDark"), s->m_clrBaseSeparatorDark)) {
        s->m_clrBaseSeparatorDark =
            PixelAlpha(s->m_clrBaseToolBarBottomLine, _RGB(255, 255, 255), 95);
      }

      if (!tmBar.ReadColor(_T("SeparatorLight"), s->m_clrBaseSeparatorLight)) {
        s->m_clrBaseSeparatorLight = _RGB(255, 255, 255);
      }
    }

    if (tmItem.ExcludeTag(_T("MENUBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      s->m_clrBaseMenuBarGradientLight = s->m_clrBaseToolBarGradientLight;
      s->m_clrBaseMenuBarGradientDark  = s->m_clrBaseToolBarGradientDark;
      tmBar.ReadColor(_T("GradientLight"), s->m_clrBaseMenuBarGradientLight);
      tmBar.ReadColor(_T("GradientDark"), s->m_clrBaseMenuBarGradientDark);
      s->m_clrBaseMenuBarGradientVertLight = s->m_clrBaseMenuBarGradientLight;
      s->m_clrBaseMenuBarGradientVertDark  = s->m_clrBaseMenuBarGradientDark;
      tmBar.ReadColor(_T("GradientVertLight"), s->m_clrBaseMenuBarGradientVertLight);
      tmBar.ReadColor(_T("GradientVertDark"), s->m_clrBaseMenuBarGradientVertDark);
      s->m_clrMenuBarBtnText            = s->m_clrToolBarBtnText;
      s->m_clrMenuBarBtnTextHighlighted = s->m_clrToolBarBtnTextHighlighted;
      s->m_clrMenuBarBtnTextDisabled    = s->m_clrToolBarBtnTextDisabled;
      tmBar.ReadColor(_T("TextNormal"), s->m_clrMenuBarBtnText);
      tmBar.ReadColor(_T("TextHighlighted"), s->m_clrMenuBarBtnTextHighlighted);
      tmBar.ReadColor(_T("TextDisabled"), s->m_clrMenuBarBtnTextDisabled);
      tmBar.ReadControlRenderer(_T("BUTTON"), s->m_ctrlBaseMenuBarBtn, MakeResourceID(_T("IDB_MENUBAR_BTN")));
      s->m_ctrlBaseMenuBarBtn.CopyTo(s->m_ctrlMenuBarBtn);
    }

    if (tmItem.ExcludeTag(_T("POPUPBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      tmBar.ReadControlRenderer(_T("BORDER"), s->m_ctrlBasePopupBorder, MakeResourceID(_T("IDB_POPUPMENU_BORDER")));
      s->m_ctrlBasePopupBorder.CopyTo(s->m_ctrlPopupBorder);
    }

    if (tmItem.ExcludeTag(_T("STATUSBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      tmBar.ReadControlRenderer(_T("BACK"), s->m_ctrlBaseStatusBarBack, MakeResourceID(_T("IDB_STATUSBAR_BACK")));
      s->m_ctrlBaseStatusBarBack.CopyTo(s->m_ctrlStatusBarBack);
      tmBar.ReadControlRenderer(_T("BACK_EXT"), s->m_ctrlBaseStatusBarBack_Ext, MakeResourceID(_T("IDB_STATUSBAR_BACK_EXT")));
      s->m_ctrlBaseStatusBarBack_Ext.CopyTo(s->m_ctrlStatusBarBack_Ext);
      tmBar.ReadToolBarImages(_T("PANEBORDER"), s->m_BaseStatusBarPaneBorder, MakeResourceID(_T("IDB_STATUSBAR_PANEBORDER")));
      s->m_BaseStatusBarPaneBorder.CopyTo(s->m_StatusBarPaneBorder);
      tmBar.ReadToolBarImages(_T("SIZEBOX"), s->m_BaseStatusBarSizeBox, MakeResourceID(_T("IDB_STATUSBAR_SIZEBOX")));
      s->m_BaseStatusBarSizeBox.CopyTo(s->m_StatusBarSizeBox);
      s->m_clrStatusBarText         = s->m_clrMenuBarBtnText;
      s->m_clrStatusBarTextDisabled = s->m_clrMenuBarBtnTextDisabled;
      s->m_clrExtenedStatusBarTextDisabled = s->m_clrMenuBarBtnTextDisabled;
      tmBar.ReadColor(_T("TextNormal"), s->m_clrStatusBarText);
      tmBar.ReadColor(_T("TextDisabled"), s->m_clrStatusBarTextDisabled);
      tmBar.ReadColor(_T("TextExtendedDisabled"), s->m_clrExtenedStatusBarTextDisabled);
    }

    s->m_clrBaseCaptionBarGradientLight = s->m_clrBaseToolBarGradientLight;
    s->m_clrBaseCaptionBarGradientDark = s->m_clrBaseToolBarGradientDark;

    if (tmItem.ExcludeTag(_T("CAPTIONBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      tmBar.ReadColor(_T("GradientLight"), s->m_clrBaseCaptionBarGradientLight);
      tmBar.ReadColor(_T("GradientDark"), s->m_clrBaseCaptionBarGradientDark);
      tmBar.ReadColor(_T("TextNormal"), s->m_clrCaptionBarText);
    }
  }

  if (tm.ExcludeTag(_T("TABS"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadColor(_T("TextColorActive"), s->m_clrTabTextActive);
    tmItem.ReadColor(_T("TextColorInactive"), s->m_clrTabTextInactive);
    const char* strTab;

    if (tmItem.ExcludeTag(_T("3D"), strTab)) {
      CBCGPTagManager tmTab(strTab);
      tmTab.ReadColor(_T("Face"), s->m_clrBaseTab3DFace);
      tmTab.ReadColor(_T("Black"), s->m_clrBaseTab3DBlack);
      tmTab.ReadColor(_T("Dark"), s->m_clrBaseTab3DDark);
      tmTab.ReadColor(_T("DarkShadow"), s->m_clrBaseTab3DDarkShadow);
      tmTab.ReadColor(_T("Light"), s->m_clrBaseTab3DLight);
      tmTab.ReadColor(_T("Highlight"), s->m_clrBaseTab3DHighlight);
    }

    if (tmItem.ExcludeTag(_T("FLAT"), strTab)) {
      CBCGPTagManager tmTab(strTab);
      tmTab.ReadColor(_T("Face"), s->m_clrBaseTabFlatFace);
      tmTab.ReadColor(_T("Black"), s->m_clrBaseTabFlatBlack);
      tmTab.ReadColor(_T("Dark"), s->m_clrBaseTabFlatDark);
      tmTab.ReadColor(_T("DarkShadow"), s->m_clrBaseTabFlatDarkShadow);
      tmTab.ReadColor(_T("Light"), s->m_clrBaseTabFlatLight);
      tmTab.ReadColor(_T("Highlight"), s->m_clrBaseTabFlatHighlight);
    }
  }

  if (tm.ExcludeTag(_T("RIBBON"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    const char* str;

    if (tmItem.ExcludeTag(_T("PANEL"), str)) {
      CBCGPTagManager tmPanel(str);
      const char* strButtons;

      if (tmPanel.ExcludeTag(_T("BUTTONS"), strButtons)) {
        CBCGPTagManager tmButtons(strButtons);
        tmButtons.ReadControlRenderer(_T("BUTTON_PUSH"), s->m_ctrlBaseRibbonBtnPush, MakeResourceID(_T("IDB_RIBBON_BTN_PUSH")));
        s->m_ctrlBaseRibbonBtnPush.CopyTo(s->m_ctrlRibbonBtnPush);
      }
    }
  }

  s->m_clrOutlookCaptionTextNormal   = s->m_clrCaptionBarText;
  s->m_clrOutlookPageTextNormal      = s->m_clrOutlookCaptionTextNormal;
  s->m_clrOutlookPageTextHighlighted = s->m_clrOutlookPageTextNormal;
  s->m_clrOutlookPageTextPressed     = s->m_clrOutlookPageTextNormal;
  s->m_ctrlOutlookWndBar.CleanUp();
  s->m_ctrlOutlookWndPageBtn.CleanUp();

  if (tm.ExcludeTag(_T("OUTLOOK"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    const char* str;

    if (tmItem.ExcludeTag(_T("CAPTION"), str)) {
      CBCGPTagManager tmCaption(str);
      tmCaption.ReadColor(_T("TextNormal"), s->m_clrOutlookCaptionTextNormal);
    }

    if (tmItem.ExcludeTag(_T("PAGEBUTTON"), str)) {
      CBCGPTagManager tmPage(str);
      tmPage.ReadColor(_T("TextNormal"), s->m_clrOutlookPageTextNormal);
      tmPage.ReadColor(_T("TextHighlighted"), s->m_clrOutlookPageTextHighlighted);
      tmPage.ReadColor(_T("TextPressed"), s->m_clrOutlookPageTextPressed);
    }
  }

  // Popup Window:
  s->m_clrBasePopupGradientLight = s->m_clrBaseBarGradientLight;
  s->m_clrBasePopupGradientDark = s->m_clrBaseBarGradientDark;

  if (tm.ExcludeTag(_T("POPUP"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadColor(_T("GradientFillLight"), s->m_clrBasePopupGradientLight);
    tmItem.ReadColor(_T("GradientFillDark"), s->m_clrBasePopupGradientDark);
  }

  if (s->m_clrBaseMenuGutterLight == CLR_DEFAULT) {
    s->m_clrBaseMenuGutterLight = s->m_clrBaseToolBarGradientLight;
  }

  if (s->m_clrBaseMenuGutterDark == CLR_DEFAULT) {
    s->m_clrBaseMenuGutterDark = s->m_clrBaseToolBarGradientLight;
  }

  if (hinstResOld != NULL) {
    AfxSetResourceHandle(hinstResOld);
  }

  CleanStyle();
  CBCGPVisualManager2007::s->m_hinstRes       = hinstRes;
  CBCGPVisualManager2007::s->m_strStylePrefix = strStylePrefix;
  CBCGPVisualManager2007::s->m_bAutoFreeRes   = bAutoFreeRes;
  CBCGPVisualManager2007::SetStyle(style);
  s->m_clrTabBack.DeleteObject();
  s->m_clrTabBack.CreateSolidBrush(globalData.clrBtnFace);
  s->m_clrInactiveTabText = s->m_clrTabTextInactive;
  CBCGPTagManager::SetBaseColor(0, 0);
  UpdateLinked();
  s->m_bUpdateColors = FALSE;
}
BOOL CBCGPVisualManagerCarbon::OnNcActivate(CWnd* pWnd, BOOL bActive)
{
  ASSERT(pWnd);

  if (pWnd->GetSafeHwnd() == NULL) {
    return FALSE;
  }

  if (globalData.DwmIsCompositionEnabled()) {
    return FALSE;
  }

  // stay active if WF_STAYACTIVE bit is on
  if (pWnd->s->m_nFlags & WF_STAYACTIVE) {
    bActive = TRUE;
  }

  // but do not stay active if the window is disabled
  if (!pWnd->IsWindowEnabled()) {
    bActive = FALSE;
  }

  s->m_ActivateFlag[pWnd->GetSafeHwnd()] = bActive;
  pWnd->SendMessage(Ws->m_NCPAINT, 0, 0);
  return TRUE;
}
BOOL CBCGPVisualManagerCarbon::OnSetWindowRegion(CWnd* pWnd, SIZE sizeWindow)
{
  ASSERT(pWnd);

  if (pWnd->GetSafeHwnd() == NULL) {
    return FALSE;
  }

  if (!CanDrawImage()) {
    return FALSE;
  }

  if (globalData.DwmIsCompositionEnabled()) {
    return FALSE;
  }

  SIZE sz(0, 0);
  BOOL bMainWnd = FALSE;
  {
    if (pWnd->IsZoomed()) {
      pWnd->SetWindowRgn(NULL, TRUE);
      return TRUE;
    }

    sz  = SIZE(9, 9);
    bMainWnd = TRUE;
  }

  if (sz != SIZE(0, 0)) {
    CRgn rgn;
    BOOL bCreated = FALSE;
    bCreated = rgn.CreateRoundRectRgn(0, 0, sizeWindow.cx + 1, sizeWindow.cy + 1, sz.cx, sz.cy);

    if (bCreated) {
      if (pWnd->IsKindOf(RUNTIME_CLASS(CMDIChildWnd)) ||
          pWnd->IsKindOf(RUNTIME_CLASS(CBCGPDialog)) ||
          pWnd->IsKindOf(RUNTIME_CLASS(CBCGPPropertySheet))) {
        CRgn rgnWinodw;
        rgnWinodw.CreateRectRgn(0, sz.cy, sizeWindow.cx, sizeWindow.cy);
        rgn.CombineRgn(&rgn, &rgnWinodw, RGN_OR);
      }

      pWnd->SetWindowRgn((HRGN)rgn.Detach(), TRUE);
      return TRUE;
    }
  }

  return FALSE;
}
void CBCGPVisualManagerCarbon::DrawNcBtn(HDDC hDC, RECT  rect, UINT nButton,
    int state, BOOL bSmall,
    BOOL bActive, BOOL /*bMDI = FALSE*/)
{
  ASSERT(hDC);
  CBCGPControlRenderer* pBack = NULL;
  CBCGPControlRenderer* pBackH = NULL;
  CBCGPToolBarImages* pImage = NULL;
  int nIndex = bSmall ? 1 : 0;

  if (nButton == SC_CLOSE) {
    pBack = &s->m_SysBtnBackC[nIndex];
    pBackH = &s->m_SysBtnBackCH[nIndex];
    pImage = &s->m_SysBtnClose[nIndex];
  }
  else {
    pBack = &s->m_SysBtnBack[nIndex];
    pBackH = &s->m_SysBtnBackH[nIndex];

    if (nButton == SC_MINIMIZE) {
      pImage = &s->m_SysBtnMinimize[nIndex];
    }
    else if (nButton == SC_MAXIMIZE) {
      pImage = &s->m_SysBtnMaximize[nIndex];
    }
    else if (nButton == SC_RESTORE) {
      pImage = &s->m_SysBtnRestore[nIndex];
    }
    else if (nButton == SC_CONTEXTHELP) {
      pImage = &s->m_SysBtnHelp[nIndex];
    }
  }

  CBCGPToolBarImages::ImageAlignHorz horz = GetRibbonImageScale() != 1. ? CBCGPToolBarImages::ImageAlignHorzStretch : CBCGPToolBarImages::ImageAlignHorzCenter;
  CBCGPToolBarImages::ImageAlignVert vert = GetRibbonImageScale() != 1. ? CBCGPToolBarImages::ImageAlignVertStretch : CBCGPToolBarImages::ImageAlignVertCenter;
  BYTE alphaSrc = 255;
  pBack->Draw(hDC, rect, 0);

  if (state != ButtonsIsRegular) {
    pBackH->Draw(hDC, rect, state == ButtonsIsHighlighted ? 0 : 1);
  }
  else if (!bActive) {
    alphaSrc = 189;
  }

  if (pImage != NULL) {
    pImage->DrawEx(hDC, rect, 0, horz, vert, RECT(0, 0, 0, 0), alphaSrc);
  }
}
void CBCGPVisualManagerCarbon::DrawNcCaption(HDDC hDC, RECT rectCaption,
    DWORD dwStyle, DWORD dwStyleEx,
    const char* strTitle, const char* strDocument,
    HICON hIcon, BOOL bPrefix, BOOL bActive,
    BOOL bTextCenter,
    const CObList& lstSysButtons)
{
  const BOOL bIsRTL           = (dwStyleEx & WS_EX_LAYOUTRTL) == WS_EX_LAYOUTRTL;
  const BOOL bIsSmallCaption  = (dwStyleEx & WS_EX_TOOLWINDOW) != 0;
  const int nSysCaptionHeight = bIsSmallCaption ? GetSystemMetrics(Ss->m_CYSMCAPTION) : GetSystemMetrics(Ss->m_CYCAPTION);
  SIZE szSysBorder(GetSystemBorders(FALSE));
  CDC memDC;
  memDC.CreateCompatibleDC(hDC);
  CBitmap memBmp;
  memBmp.CreateCompatibleBitmap(hDC, rectCaption RCW(&), rectCaption RCH(&));
  CBitmap* pBmpOld = memDC.SelectObject(&memBmp);
  memDC.BitBlt(0, 0, rectCaption RCW(&), rectCaption RCH(&), hDC, 0, 0, SRCCOPY);
  BOOL bMaximized = (dwStyle & WS_MAXIMIZE) == WS_MAXIMIZE;
  int indexBorder = 0;
  RECT rectBorderCaption(rectCaption);

  if (bMaximized) {
    rectBorderCaption OffsetRect(&, -rectBorderCaption.TopLeft());
    rectBorderCaption.bottom -= szSysBorder.cy;
  }

  s->m_ctrlMainBorderCaption.Draw(&memDC, rectBorderCaption, indexBorder);
  RECT rectCaptionB(rectCaption);
  rectCaptionB DeflateRect(&, (bMaximized ? 0 : szSysBorder.cx) - 2, 0);
  rectCaptionB.top = rectCaptionB.bottom - s->m_ctrlMainBorderTB.GetParams().s->m_rectImage RCH(&);
  s->m_ctrlMainBorderTB.Draw(&memDC, rectCaptionB, indexBorder);
  RECT rect(rectCaption);
  DeflateRect(&rect, szSysBorder.cx, szSysBorder.cy, szSysBorder.cx, 0);
  rect.top = rect.bottom - nSysCaptionHeight - 1;

  // Draw icon:
  if (hIcon != NULL && !bIsSmallCaption) {
    SIZE szIcon(GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON));
    long x = rect.left + (bMaximized ? szSysBorder.cx : 0) + 2;
    long y = rect.top + MAX(0, (nSysCaptionHeight - szIcon.cy) / 2);
    ::DrawIconEx(memDC.GetSafeHdc(), x, y, hIcon, szIcon.cx, szIcon.cy,
        0, NULL, DI_NORMAL);
    rect.left = x + szIcon.cx + (bMaximized ? szSysBorder.cx : 4);
  }
  else {
    int xOffset = (bMaximized ? szSysBorder.cx : 0) + 2;
    rect.left += xOffset;
  }

  // Draw system buttons:
  int xButtonsRight = rect.right;

  for (POSITION pos = lstSysButtons.GetHeadPosition(); pos != NULL;) {
    CBCGPFrameCaptionButton* pButton = (CBCGPFrameCaptionButton*)
        lstSysButtons.GetNext(pos);

    int state = ButtonsIsRegular;

    if (bPushed && bFocused) {
      state = ButtonsIsPressed;
    }
    else if (bFocused) {
      state = ButtonsIsHighlighted;
    }

    UINT uiHit = pButton->GetHit();
    UINT nButton = 0;

    switch (uiHit) {
    case HTCLOSE_BCG:
      nButton = SC_CLOSE;
      break;

    case HTMAXBUTTON_BCG:
      nButton =
          (dwStyle & WS_MAXIMIZE) == WS_MAXIMIZE ? SC_RESTORE : SC_MAXIMIZE;
      break;

    case HTMINBUTTON_BCG:
      nButton =
          (dwStyle & WS_MINIMIZE) == WS_MINIMIZE ? SC_RESTORE : SC_MINIMIZE;
      break;

    case HTHELPBUTTON_BCG:
      nButton = SC_CONTEXTHELP;
      break;
    }

    RECT rectBtn(rect);

    if (bMaximized) {
      rectBtn OffsetRect(&, szSysBorder.cx, szSysBorder.cy);
    }

    DrawNcBtn(&memDC, rectBtn, nButton, state, FALSE, bActive, FALSE);
    xButtonsRight = MIN(xButtonsRight, rect.left);
  }

  // Draw text:
  if ((!strTitle.IsEmpty() || !strDocument.IsEmpty()) &&
      rect.left < rect.right) {
    CFont* pOldFont = (CFont*)memDC.SelectObject(&s->m_AppCaptionFont);
    RECT rectText = rect;
    rectText.right = xButtonsRight - 1;
    DrawNcText(&memDC, rectText, strTitle, strDocument, bPrefix, bActive, bIsRTL, bTextCenter);
    memDC.SelectObject(pOldFont);
  }

  hDC->BitBlt(rectCaption.left, rectCaption.top, rectCaption RCW(&), rectCaption RCH(&),
      &memDC, 0, 0, SRCCOPY);
  memDC.SelectObject(pBmpOld);
}
BOOL CBCGPVisualManagerCarbon::OnNcPaint(CWnd* pWnd, const CObList& lstSysButtons, RECT rectRedraw)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnNcPaint(pWnd, lstSysButtons, rectRedraw);
  }

  ASSERT(pWnd);

  if (pWnd->GetSafeHwnd() == NULL) {
    return FALSE;
  }

  CWindowDC hDC(pWnd);

  if (hDC.GetSafeHdc() != NULL) {
    CRgn rgn;

    if (!rectRedraw.IsRectEmpty()) {
      rgn.CreateRectRgnIndirect(rectRedraw);
      hDC.SelectClipRgn(&rgn);
    }

    BOOL bRibbonCaption = FALSE;
    RECT rtWindow;
    pWnd->GetWindowRect(rtWindow);
    pWnd->ScreenToClient(rtWindow);
    RECT rtClient;
    pWnd->GetClientRect(rtClient);
    rtClient OffsetRect(&, -rtWindow.TopLeft());
    hDC.ExcludeClipRect(rtClient);
    rtWindow OffsetRect(&, -rtWindow.TopLeft());
    BOOL bActive = IsWindowActive(pWnd);
    RECT rectCaption(rtWindow);
    SIZE szSysBorder(GetSystemBorders(bRibbonCaption));
    BOOL bDialog = pWnd->IsKindOf(RUNTIME_CLASS(CBCGPDialog)) || pWnd->IsKindOf(RUNTIME_CLASS(CBCGPPropertySheet));

    if (bDialog && (pWnd->GetStyle() & WS_THICKFRAME) == 0) {
      szSysBorder.cy = GetSystemMetrics(Ss->m_CYFIXEDFRAME);
    }

    rectCaption.bottom = rectCaption.top + szSysBorder.cy;
    const DWORD dwStyle = pWnd->GetStyle();
    BOOL bMaximized = (dwStyle & WS_MAXIMIZE) == WS_MAXIMIZE;

    if (!bRibbonCaption) {
      const DWORD dwStyleEx = pWnd->GetExStyle();
      const BOOL bIsSmallCaption = (dwStyleEx & WS_EX_TOOLWINDOW) != 0;
      const int nSysCaptionHeight = bIsSmallCaption ? GetSystemMetrics(Ss->m_CYSMCAPTION) : GetSystemMetrics(Ss->m_CYCAPTION);
      rectCaption.bottom += nSysCaptionHeight;
      BOOL bDestroyIcon = FALSE;
      HICON hIcon = globalUtils.GetWndIcon(pWnd, &bDestroyIcon);
      const char* strText;
      pWnd->GetWindowText(strText);
      const char* strTitle(strText);
      const char* strDocument;
      BOOL bPrefix = FALSE;

      if ((dwStyle & FWS_ADDTOTITLE) == FWS_ADDTOTITLE) {
        bPrefix = (dwStyle & FWS_PREFIXTITLE) == FWS_PREFIXTITLE;
        CFrameWnd* pFrameWnd = DYNAMIC_DOWNCAST(CFrameWnd, pWnd);

        if (pFrameWnd != NULL) {
          strTitle = pFrameWnd->GetTitle();

          if (!strTitle.IsEmpty()) {
            if (strText.GetLength() >= strTitle.GetLength()) {
              if (bPrefix) {
                int pos = strText.Find(strTitle, strText.GetLength() - strTitle.GetLength());

                if (pos != -1) {
                  strTitle = strText.Right(strTitle.GetLength() + 3);
                  strDocument = strText.Left(strText.GetLength() - strTitle.GetLength());
                }
              }
              else {
                int pos = strText.Find(strTitle);

                if (pos != -1) {
                  strTitle = strText.Left(strTitle.GetLength() + 3);
                  strDocument = strText.Right(strText.GetLength() - strTitle.GetLength());
                }
              }
            }
          }
          else {
            strDocument = strText;
          }
        }
      }

      if (bMaximized) {
        rectCaption InflateRect(&, szSysBorder.cx, szSysBorder.cy, szSysBorder.cx, 0);
      }

      DrawNcCaption(&hDC, rectCaption, dwStyle, dwStyleEx,
          strTitle, strDocument, hIcon, bPrefix, bActive, s->m_bNcTextCenter,
          lstSysButtons);

      if (bDestroyIcon) {
        ::DestroyIcon(hIcon);
      }

      if (bMaximized) {
        return TRUE;
      }
    }
    else {
      if (bMaximized) {
        return TRUE;
      }

      rectCaption.bottom += pBar->GetCaptionHeight();
      s->m_ctrlMainBorderCaption.Draw(&hDC, rectCaption, bActive ? 0 : 1);
    }

    rtWindow.top = rectCaption.bottom;
    hDC.ExcludeClipRect(rectCaption);
    int indexBorder = 0;
    //-------------------------------
    // Find status bar extended area:
    //-------------------------------
    RECT rectExt(0, 0, 0, 0);
    BOOL bExtended    = FALSE;
    BOOL bIsStatusBar = FALSE;
    CWnd* pStatusBar = pWnd->GetDescendantWindow(AFX_IDW_STATUS_BAR, TRUE);

    if (pStatusBar->GetSafeHwnd() != NULL && pStatusBar->IsWindowVisible()) {
      CBCGPStatusBar* pClassicStatusBar = DYNAMIC_DOWNCAST(
          CBCGPStatusBar, pStatusBar);

      if (pClassicStatusBar != NULL) {
        bExtended = pClassicStatusBar->GetExtendedArea(rectExt);
        bIsStatusBar = TRUE;
      }
    }

    RECT rectStatus(0, 0, 0, szSysBorder.cy);

    if (bIsStatusBar) {
      pStatusBar->GetClientRect(rectStatus);
      int nHeight = rectStatus RCH(&) + szSysBorder.cy;
      rectStatus.bottom = rtWindow.bottom;
      rectStatus.top    = rectStatus.bottom - nHeight;
      rectStatus.left   = rtWindow.left;
      rectStatus.right  = rtWindow.right;

      if (bExtended) {
        rectExt.left   = rectStatus.right - rectExt RCW(&) - szSysBorder.cx;
        rectExt.top    = rectStatus.top;
        rectExt.bottom = rectStatus.bottom;
        rectExt.right  = rtWindow.right;
      }

      s->m_ctrlStatusBarBack.Draw(&hDC, rectStatus, indexBorder);

      if (bExtended) {
        rectExt.left -= s->m_ctrlStatusBarBack_Ext.GetParams().s->m_rectCorners.left;
        s->m_ctrlStatusBarBack_Ext.Draw(&hDC, rectExt, indexBorder);
      }
    }

    RECT rectPart(rtWindow);
    rectPart.bottom -= rectStatus RCH(&);
    rectPart.right = rectPart.left + szSysBorder.cx;
    s->m_ctrlMainBorderL.Draw(&hDC, rectPart, indexBorder);
    rectPart.right = rtWindow.right;
    rectPart.left  = rectPart.right - szSysBorder.cx;
    s->m_ctrlMainBorderR.Draw(&hDC, rectPart, indexBorder);
    BOOL bBottomLine = TRUE;

    if (!bIsStatusBar) {
      RECT rectBottom(rtWindow);
      rectBottom.top = rectBottom.bottom - szSysBorder.cy;

      if (pWnd->IsKindOf(RUNTIME_CLASS(CMDIChildWnd)) ||
          (bDialog && !s->m_ctrlDialogBorder.IsValid())) {
        if (bDialog) {
          RECT rtDialog(rtWindow);
          rtDialog DeflateRect(&, 1, 0, 1, 1);
          hDC.FillRect(rtDialog, &GetDlgBackBrush(pWnd));
          hDC.ExcludeClipRect(rtDialog);
          bBottomLine = FALSE;
        }

        s->m_ctrlMDIChildBorder.DrawFrame(&hDC, rectBottom, indexBorder);
      }
      else if (bDialog) {
        s->m_ctrlDialogBorder.DrawFrame(&hDC, rectBottom, indexBorder);
      }
      else {
        s->m_ctrlMainBorder.DrawFrame(&hDC, rectBottom, indexBorder);
      }
    }

    if (bBottomLine) {
      RECT rectBottom(rtWindow);
      rectBottom.top = rectBottom.bottom - rectStatus RCH(&);
      rectBottom DeflateRect(&, (bMaximized ? 0 : szSysBorder.cx) - 2, 0);
      rectBottom.bottom = rectBottom.top + s->m_ctrlMainBorderTB.GetParams().s->m_rectImage RCH(&);
      s->m_ctrlMainBorderTB.Draw(&hDC, rectBottom, indexBorder + s->m_ctrlMainBorderTB.GetImageCount() / 2);
    }

    hDC.SelectClipRgn(NULL);
    return TRUE;
  }

  return CBCGPVisualManager2003::OnNcPaint(pWnd, lstSysButtons, rectRedraw);
}
BOOL CBCGPVisualManagerCarbon::OnUpdateNcButtons(CWnd* pWnd, const CObList& lstSysButtons, RECT rectCaption)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2007::OnUpdateNcButtons(pWnd, lstSysButtons, rectCaption);
  }

  ASSERT(pWnd);

  if (pWnd->GetSafeHwnd() == NULL) {
    return FALSE;
  }

  BOOL bRibbonCaption = FALSE;
  SIZE szSysBorder(GetSystemBorders(bRibbonCaption));
  BOOL bDialog = pWnd->IsKindOf(RUNTIME_CLASS(CBCGPDialog)) || pWnd->IsKindOf(RUNTIME_CLASS(CBCGPPropertySheet));

  if (bDialog && (pWnd->GetStyle() & WS_THICKFRAME) == 0) {
    szSysBorder.cy = GetSystemMetrics(Ss->m_CYFIXEDFRAME);
  }

  int x = rectCaption.right + 2;
  rectCaption.top -= szSysBorder.cy;
  int index = 0; // normal, small

  for (POSITION pos = lstSysButtons.GetHeadPosition(); pos != NULL;) {
    SIZE sizeButton(0, 0);
    CBCGPFrameCaptionButton* pButton = (CBCGPFrameCaptionButton*)
        lstSysButtons.GetNext(pos);


    if (pButton->GetHit() == HTCLOSE_BCG) {
      sizeButton = s->m_SysBtnBackC[index].GetParams().s->m_rectImage.Size();
    }
    else {
      sizeButton = s->m_SysBtnBack[index].GetParams().s->m_rectImage.Size();
    }

    x -= sizeButton.cx;
    pButton->SetRect(RECT(cPOINT(x, rectCaption.top), sizeButton));
  }

  return TRUE;
}
void CBCGPVisualManagerCarbon::OnFillBarBackground(HDDC hDC, CBCGPBaseControlBar* pBar,
    RECT rectClient, RECT rectClip,
    BOOL bNCArea/* = FALSE*/)
{
  if (IsOnGlass) {
    draw_fillrectR(hDC, &rectClient, _RGB(0, 0, 0));
    return;
  }

  CRuntimeClass* pBarClass = pBar->GetRuntimeClass();

  if (!CanDrawImage() ||
      IsDialogControl ||
      pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPColorBar)) ||
      pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPCalculator)) ||
      pBarClass->IsDerivedFrom(RUNTIME_CLASS(CBCGPCalendarBar))) {
    CBCGPVisualManager2007::OnFillBarBackground(hDC, pBar, rectClient, rectClip, bNCArea);
    return;
  }

  if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar))) {
    draw_fillrectR(hDC, &rectClip, &s->m_clrMenuLight);
    CBCGPPopupMenuBar* pMenuBar = DYNAMIC_DOWNCAST(CBCGPPopupMenuBar, pBar);

    if (!pMenuBar->s->m_bDisableSideBarInXPMode) {
      RECT rectImages = rectClient;
      rectImages.right = rectImages.left + pMenuBar->GetGutterWidth();

      FillGradient(hDC, rectImages, s->m_clrMenuGutterLight, s->m_clrMenuGutterDark, FALSE,
          35);
      rectImages.left = rectImages.right;
      rectImages.right += 2;
      DrawSeparator(hDC, rectImages, FALSE);
    }

    return;
  }
  else if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPStatusBar))) {
    SIZE szSysBorder(GetSystemBorders(FALSE));
    RECT rect(rectClient);
    RECT rectExt(0, 0, 0, 0);
    BOOL bExtended = ((CBCGPStatusBar*)pBar)->GetExtendedArea(rectExt);

    if (bExtended) {
      rect.right = rectExt.left;
    }

    CWnd* pWnd = ((CBCGPStatusBar*)pBar)->GetParent();
    ASSERT(pWnd);
    InflateRect(&rect, szSysBorder.cx, 0, szSysBorder.cx, szSysBorder.cy);
    s->m_ctrlStatusBarBack.Draw(hDC, rect, 0);

    if (bExtended) {
      rectExt InflateRect(&, 0, 0, szSysBorder.cx, szSysBorder.cy);
      rectExt.left -= s->m_ctrlStatusBarBack_Ext.GetParams().s->m_rectCorners.left;
      s->m_ctrlStatusBarBack_Ext.Draw(hDC, rectExt, 0);
    }

    rect = rectClient;
    InflateRect(&rect, 2, 0);
    rect.bottom = rect.top + s->m_ctrlMainBorderTB.GetParams().s->m_rectImage RCH(&);
    s->m_ctrlMainBorderTB.Draw(hDC, rect, 1);
    return;
  }

  CBCGPVisualManager2007::OnFillBarBackground(hDC, pBar, rectClient, rectClip, bNCArea);
}
COLORREF CBCGPVisualManagerCarbon::OnFillMiniFrameCaption(HDDC hDC,
    RECT rectCaption,
    BOOL bActive)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnFillMiniFrameCaption(hDC,
        rectCaption, pFrameWnd, bActive);
  }

  ASSERT(hDC);
  RECT rectCaptionB(rectCaption);
  RECT rectBorderSize(0, 0, 0, 0);

  if (pFrameWnd != NULL) {
    pFrameWnd->CalcBorderSize(rectBorderSize);
  }
  else {
    rectBorderSize.left   = GetSystemMetrics(Ss->m_CYSIZEFRAME);
    rectBorderSize.right  = rectBorderSize.left;
    rectBorderSize.top    = GetSystemMetrics(Ss->m_CXSIZEFRAME);
    rectBorderSize.bottom = rectBorderSize.top;
  }

  rectCaption InflateRect(&, rectBorderSize.left, rectBorderSize.top, rectBorderSize.right, 0);
  s->m_ctrlMiniBorderCaption.Draw(hDC, rectCaption);
  rectCaptionB InflateRect(&, 2, 0);
  rectCaptionB.top = rectCaptionB.bottom - s->m_ctrlMiniBorderTB.GetParams().s->m_rectImage RCH(&);
  s->m_ctrlMiniBorderTB.Draw(hDC, rectCaptionB, 0);
  //rectCaption
  // get the text color
  return bActive
      ? s->m_clrAppCaptionActiveTitleText
      : s->m_clrAppCaptionInactiveTitleText;
}
void CBCGPVisualManagerCarbon::OnDrawMiniFrameBorder(
    HDDC hDC,
    RECT rectBorder, RECT rectBorderSize)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawMiniFrameBorder(hDC,
        pFrameWnd, rectBorder, rectBorderSize);
    return;
  }

  ASSERT(hDC);
  rectBorder.top += rectBorderSize.top + GetSystemMetrics(Ss->m_CYSMCAPTION);
  RECT rtPart(rectBorder);
  rtPart.right  = rtPart.left + rectBorderSize.left;
  rtPart.bottom -= rectBorderSize.bottom;
  s->m_ctrlMainBorderL.Draw(hDC, rtPart);
  rtPart = rectBorder;
  rtPart.left   = rtPart.right - rectBorderSize.right;
  rtPart.bottom -= rectBorderSize.bottom;
  s->m_ctrlMainBorderR.Draw(hDC, rtPart);
  rectBorder.top = rtPart.bottom;
  s->m_ctrlMiniBorder.Draw(hDC, rectBorder);
  DeflateRect(&rectBorder, GetSystemMetrics(Ss->m_CXSIZEFRAME), 0);
  InflateRect(&rectBorder, 2, 0);
  rectBorder.bottom = rectBorder.top + s->m_ctrlMiniBorderTB.GetParams().s->m_rectImage RCH(&);
  s->m_ctrlMiniBorderTB.Draw(hDC, rectBorder, 1);
}
void CBCGPVisualManagerCarbon::OnDrawFloatingToolbarBorder(
    HDDC hDC, CBCGPBaseToolBar* pToolBar,
    RECT rectBorder, RECT rectBorderSize)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawFloatingToolbarBorder(hDC,
        pToolBar, rectBorder, rectBorderSize);
    return;
  }

  OnDrawMiniFrameBorder(hDC, NULL, rectBorder, rectBorderSize);
}
void CBCGPVisualManagerCarbon::OnDrawMenuBorder(HDDC hDC, CBCGPPopupMenu* pMenu, RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawMenuBorder(hDC, pMenu, rect);
    return;
  }

  if (pMenu != NULL) {
    CBCGPRibbonPanelMenuBar* pRibbonMenuBar =
        DYNAMIC_DOWNCAST(CBCGPRibbonPanelMenuBar, pMenu->GetMenuBar());

    if (pRibbonMenuBar != NULL) {
      CBCGPVisualManager2007::OnDrawMenuBorder(hDC, pMenu, rect);
      return;
    }
  }

  s->m_ctrlPopupBorder.DrawFrame(hDC, rect);
}
void CBCGPVisualManagerCarbon::OnDrawCaptionButton(
    HDDC hDC, CBCGPCaptionButton* pButton, BOOL bActive,
    BOOL bHorz, BOOL bMaximized, BOOL bDisabled,
    int nImageID/* = -1*/)
{
  if (!CanDrawImage() || bDisabled) {
    CBCGPVisualManager2007::OnDrawCaptionButton(hDC, pButton,
        bActive, bHorz, bMaximized, bDisabled, nImageID);
    return;
  }

  int id =  - 1;

  if (nImageID != -1) {
    id = nImageID;
  }
  else if (pButton != NULL) {
    id = pButton->GetIconID(bHorz, bMaximized);
  }

  ASSERT(hDC);
  RECT rc = rect;
  rc DeflateRect(&, 0, 1);
  BOOL bPushed = bPushed;
  BOOL bFocused = bFocused ;
  int nIndex = 0;

  if (bPushed && bFocused) {
    nIndex = 2;
  }
  else if (bFocused) {
    nIndex = 1;
  }

  if (id == IdClose) {
    nIndex += 3;
  }

  s->m_ctrlMiniSysBtn.Draw(hDC, rc, nIndex);

  if (id != -1) {
    int imageState = ImageWhite;

    if (!bActive && !bPushed && !bFocused) {
      imageState = ImageGray;
    }

    DrawMenuImages(hDC, id, rc, imageState);
  }
}
void CBCGPVisualManagerCarbon::GetTabFrameColors(const CBCGPBaseTabWnd* pTabWnd,
    COLORREF clrDark,
    COLORREF clrBlack,
    COLORREF clrHighlight,
    COLORREF clrFace,
    COLORREF clrDarkShadow,
    COLORREF clrLight,
    COLORREF& pbrFace,
    COLORREF& pbrBlack)
{
  CBCGPVisualManager2007::GetTabFrameColors(pTabWnd,
      clrDark, clrBlack,
      clrHighlight, clrFace,
      clrDarkShadow, clrLight,
      pbrFace, pbrBlack);
  pbrFace  = &s->m_clrTabBack;
  pbrBlack = &s->m_clrTabBack;
  /*
    clrFace       = s->m_clrTabFlatFace;
    clrBlack      = s->m_clrTabFlatBlack;
    clrDark       = s->m_clrTabFlatDark;
    clrDarkShadow = s->m_clrTabFlatDarkShadow;
    clrLight      = s->m_clrTabFlatLight;
    clrHighlight  = s->m_clrTabFlatHighlight;
  */
}
void CBCGPVisualManagerCarbon::OnEraseTabsArea(HDDC hDC, RECT rect,
    const CBCGPBaseTabWnd* pTabWnd)
{
  CBCGPVisualManager2003::OnEraseTabsArea(hDC, rect, pTabWnd);
}
void CBCGPVisualManagerCarbon::OnDrawTab(HDDC hDC, RECT rectTab,
    int iTab, BOOL bIsActive, const CBCGPBaseTabWnd* pTabWnd)
{
  CBCGPVisualManager2003::OnDrawTab(hDC, rectTab, iTab, bIsActive, pTabWnd);
}
void CBCGPVisualManagerCarbon::OnFillTab(HDDC hDC, RECT rectFill, COLORREF  pbrFill,
    int iTab, BOOL bIsActive,
    const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(pTabWnd);
  CBCGPVisualManager2003::OnFillTab(hDC, rectFill, pbrFill,
      iTab, bIsActive, pTabWnd);
}
COLORREF CBCGPVisualManagerCarbon::GetTabTextColor(const CBCGPBaseTabWnd* pTabWnd, int iTab, BOOL bIsActive)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetTabTextColor(pTabWnd, iTab, bIsActive);
  }

  ASSERT(pTabWnd);

  if (!bIsActive && (IsOneNoteStyle || IsVS2005Style) && pTabWnd->GetTabBkColor(iTab) == 0) {
    return s->m_clrTabTextInactive;
  }

  return CBCGPVisualManager2003::GetTabTextColor(pTabWnd, iTab, bIsActive);
}
int CBCGPVisualManagerCarbon::GetTabHorzMargin(const CBCGPBaseTabWnd* pTabWnd)
{
  return CBCGPVisualManager2003::GetTabHorzMargin(pTabWnd);
}
BOOL CBCGPVisualManagerCarbon::OnEraseTabsFrame(HDDC hDC, RECT rect, const CBCGPBaseTabWnd* pTabWnd)
{
  return CBCGPVisualManager2003::OnEraseTabsFrame(hDC, rect, pTabWnd);
}
void CBCGPVisualManagerCarbon::OnEraseTabsButton(HDDC hDC, RECT rect,
    CBCGPButton* pButton,
    CBCGPBaseTabWnd* pBaseTab)
{
  CBCGPVisualManager2003::OnEraseTabsButton(hDC, rect, pButton, pBaseTab);
}
void CBCGPVisualManagerCarbon::OnDrawTabsButtonBorder(HDDC hDC, RECT& rect,
    CBCGPButton* pButton, UINT uiState,
    CBCGPBaseTabWnd* pWndTab)
{
  CBCGPVisualManager2003::OnDrawTabsButtonBorder(hDC, rect,
      pButton, uiState,
      pWndTab);
}
void CBCGPVisualManagerCarbon::OnDrawSlider(HDDC hDC,  RECT rect, BOOL bAutoHideMode)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawSlider(hDC, pSlider, rect, bAutoHideMode);
    return;
  }

  ASSERT(hDC);
  ASSERT(pSlider);
  draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
}
void CBCGPVisualManagerCarbon::OnHighlightMenuItem(HDDC hDC, CBCGPToolbarMenuButton* pButton,
    RECT rect, COLORREF clrText)
{
  CBCGPVisualManager2003::OnHighlightMenuItem(hDC, pButton, rect, clrText);
}
void CBCGPVisualManagerCarbon::OnDrawOutlookPageButtonBorder(
    HDDC hDC, RECT& rectBtn, BOOL bIsHighlighted, BOOL bIsPressed)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2003::OnDrawOutlookPageButtonBorder(hDC, rectBtn, bIsHighlighted, bIsPressed);
    return;
  }

  if (bIsHighlighted || (bIsPressed && bIsHighlighted)) {
    draw_3drect_inR(hDC, &rectBtn, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }
  else {
    draw_3drect_inR(hDC, &rectBtn, s->m_clrToolBarGradientLight, s->m_clrToolBarBottomLine);
  }
}
COLORREF CBCGPVisualManagerCarbon::GetPropListGroupTextColor()
{
  ASSERT(pPropList);

  if (!CanDrawImage() || !pPropList->DrawControlBarColors()) {
    return CBCGPVisualManager2003::GetPropListGroupTextColor(pPropList);
  }

  return globalData.clrBtnText;
}
COLORREF CBCGPVisualManagerCarbon::GetPropListDesciptionTextColor()
{
  ASSERT(pPropList);

  if (!CanDrawImage() || !pPropList->DrawControlBarColors()) {
    return CBCGPVisualManager2003::GetPropListDesciptionTextColor(pPropList);
  }

  return globalData.clrBtnText;
}
COLORREF CBCGPVisualManagerCarbon::GetPropListCommandTextColor()
{
  ASSERT(pPropList);

  if (!CanDrawImage() || !pPropList->DrawControlBarColors()) {
    return CBCGPVisualManager2003::GetPropListCommandTextColor(pPropList);
  }

  return s->m_clrActionText == CLR_DEFAULT ? globalData.clrHotText : s->m_clrActionText;
}
COLORREF CBCGPVisualManagerCarbon::GetToolBoxButtonTextColor(CBCGPToolBoxButton* pButton)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetToolBoxButtonTextColor(pButton);
  }

  return pButton->s->m_bIsHighlighted || pButton->s->m_bIsChecked ? s->m_clrToolBarBtnTextHighlighted : s->m_clrToolBarBtnText;
}
COLORREF CBCGPVisualManagerCarbon::GetURLLinkColor(CBCGPURLLinkButton* pButton, BOOL bHover)
{


  if (!CanDrawImage() || !pButton->s->m_bVisualManagerStyle || pButton->s->m_bOnGlass) {
    return CBCGPVisualManager2003::GetURLLinkColor(pButton, bHover);
  }

  return bHover
      ? s->m_clrLinkHotText == CLR_DEFAULT
      ? globalData.clrHotLinkText
      : s->m_clrLinkHotText
    : s->m_clrLinkText == CLR_DEFAULT
      ? globalData.clrHotText
      : s->m_clrLinkText;
}
COLORREF CBCGPVisualManagerCarbon::GetToolbarButtonTextColor(CBCGPToolbarButton* pButton,
    CBCGPVisualManager::int state)
{
  if (CanDrawImage()) {
    BOOL bDisabled = (CBCGPToolBar::IsCustomizeMode() && !pButton->IsEditable()) ||
        (!CBCGPToolBar::IsCustomizeMode() && (pButton->s->m_nStyle & UIS_DISABLED));

    if (pButton->IsKindOf(RUNTIME_CLASS(CBCGPOutlookButton)) != NULL ||
        pButton->IsKindOf(RUNTIME_CLASS(CBCGPToolbarComboBoxButton)) != NULL ||
        pButton->IsKindOf(RUNTIME_CLASS(CBCGPToolbarEditBoxButton)) != NULL) {
      return bDisabled ? s->m_clrToolBarBtnTextDisabled : s->m_clrToolBarBtnText;
    }
  }

  return CBCGPVisualManager2007::GetToolbarButtonTextColor(pButton, state);
}
COLORREF CBCGPVisualManagerCarbon::OnFillGridItem(
    HDDC hDC, RECT rectFill,
    BOOL bSelected, BOOL bActiveItem, BOOL bSortedColumn)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnFillGridItem(pCtrl,
        hDC, rectFill, bSelected, bActiveItem, bSortedColumn);
  }

  ASSERT(hDC);


  // Fill area:
  if (bSelected && !bActiveItem) {
    if (!IsFocused) {
      draw_fillrectR(hDC, &rectFill, globalData.clrBtnFace);
      return globalData.clrBtnText;
    }
    else {
      draw_fillrectR(hDC, &rectFill, globalData.clrHilite);
      return globalData.clrTextHilite;
    }
  }
  else {
    if (bActiveItem) {
      draw_fillrectR(hDC, &rectFill, globalData.clrWindow);
    }
    else if (bSortedColumn) {
      COLORREF br = (clrSortedColor);
      draw_fillrectR(hDC, &rectFill, br);
    }
    else {
      // no painting
    }
  }

  return 0;
}
COLORREF CBCGPVisualManagerCarbon::OnFillGridGroupByBoxBackground(HDDC hDC, RECT rect)
{
  COLORREF clr = CBCGPVisualManager2007::OnFillGridGroupByBoxBackground(hDC, rect);

  if (CanDrawImage()) {
    clr = globalData.clrWindowText;
  }

  return clr;
}
COLORREF CBCGPVisualManagerCarbon::OnFillReportCtrlRowBackground(
    HDDC hDC, RECT rectFill,
    BOOL bSelected, BOOL bGroup)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnFillReportCtrlRowBackground(pCtrl,
        hDC, rectFill, bSelected, bGroup);
  }

  ASSERT(hDC);

  // Fill area:
  COLORREF clrText = 0;

  if (bSelected) {
    if (!IsFocused) {
      draw_fillrectR(hDC, &rectFill, globalData.clrBtnFace);
      clrText = s->m_clrReportGroupText;
    }
    else {
      draw_fillrectR(hDC, &rectFill, globalData.clrHilite);
      clrText = globalData.clrTextHilite;
    }
  }
  else {
    if (bGroup) {
      // no painting
      clrText = s->m_clrReportGroupText;
    }
  }

  // Return text color:
  return clrText;
}
void CBCGPVisualManagerCarbon::OnFillSpinButton(HDDC hDC, CBCGPSpinButtonCtrl* pSpinCtrl, RECT rect, BOOL bDisabled)
{
  if (bIsDrawOnGlass || !CanDrawImage()) {
    CBCGPVisualManager2003::OnFillSpinButton(hDC, pSpinCtrl, rect, bDisabled);
  }
  else {
    COLORREF br = (bDisabled ? globalData.clrBtnFace : s->m_clrComboBtnStart);
    draw_fillrectR(hDC, &rect, br);
    draw_3drect_inR(hDC, &rect, globalData.clrBtnHilite, globalData.clrBtnHilite);
  }
}
COLORREF CBCGPVisualManagerCarbon::OnFillCommandsListBackground(HDDC hDC, RECT rect, BOOL bIsSelected)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::OnFillCommandsListBackground(hDC, rect, bIsSelected);
  }

  ASSERT(hDC);
  rect.left = 0;

  if (bIsSelected) {
    COLORREF clr1 = s->m_clrHighlightGradientDark;
    COLORREF clr2 = s->m_clrHighlightGradientLight;
    COLORREF clrBorder = s->m_clrPressedButtonBorder;

    FillGradient(hDC, rect, clr1, clr2, TRUE);
    draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
    CBCGPToolbarMenuButton dummy;
    return GetHighlightedMenuItemTextColor(&dummy);
  }
  else {
    draw_fillrectR(hDC, &rect, globalData.clrWindow);
    int iImageWidth = CBCGPToolBar::GetMenuImageSize().cx + GetMenuImageMargin();
    RECT rectImages = rect;
    rectImages.right = rectImages.left + iImageWidth + MENU_IMAGE_MARGIN;

    FillGradient(hDC, rectImages, s->m_clrToolBarGradientLight, s->m_clrToolBarGradientDark, FALSE);
    return globalData.clrWindowText;
  }
}
int CBCGPVisualManagerCarbon::GetMenuDownArrowState(CBCGPToolbarMenuButton* pButton, BOOL bHightlight, BOOL bPressed, BOOL bDisabled)
{
  if (!CanDrawImage()) {
    return CBCGPVisualManager2003::GetMenuDownArrowState(pButton, bHightlight, bPressed, bDisabled);
  }

  return (int)((bHightlight || bPressed) ? ImageBlack : ImageWhite);
}
int CBCGPVisualManagerCarbon::GetTabButtonState(CBCGPTabWnd* pTab, CBCGTabButton* pButton)
{
  if (!CanDrawImage() || IsHighlighted || IsPressed) {
    return CBCGPVisualManager2003::GetTabButtonState(pTab, pButton);
  }

  return (int) ImageWhite;
}
void CBCGPVisualManagerCarbon::OnDrawShowAllMenuItems(HDDC hDC, RECT rect,
    CBCGPVisualManager::int state)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2007::OnDrawShowAllMenuItems(hDC, rect, state);
    return;
  }

  ASSERT(hDC);

  if (globalData.m_nBitsPerPixel > 8 && !globalData.IsHighContastMode()) {
    const int nRadius = 8;
    rect = RECT(rect CenterPoint(&) - SIZE(nRadius - 1, nRadius - 1), SIZE(nRadius * 2, nRadius * 2));

    dm.DrawGradientRing(rect, s->m_clrHighlightDnGradientLight, s->m_clrHighlightGradientLight,
        0,
        45, nRadius);
  }

  CBCGPVisualManager::OnDrawShowAllMenuItems(hDC, rect, state);
}
void CBCGPVisualManagerCarbon::OnFillButtonInterior(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state)
{
  if (CanDrawImage()) {
    CBCGPControlRenderer* pRenderer = NULL;
    int index = 0;
    BOOL bDisabled = (pButton->s->m_nStyle & UIS_DISABLED) == UIS_DISABLED;
    BOOL bPressed  = (pButton->s->m_nStyle & UIS_PUSHED) == UIS_PUSHED;
    BOOL bChecked  = (pButton->s->m_nStyle & UIS_CHECKED) == UIS_CHECKED;
    CBCGPBaseControlBar* pBar = DYNAMIC_DOWNCAST(CBCGPBaseControlBar, pButton->GetParentWnd());
    CBCGPToolbarMenuButton* pMenuButton =
        DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);

    if (pMenuButton != NULL && pBar != NULL) {
      if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar)) &&
          DYNAMIC_DOWNCAST(CBCGPShowAllButton, pButton) != NULL) {
        if (state == ButtonsIsPressed || state == ButtonsIsHighlighted) {
          COLORREF clrText;
          CBCGPVisualManager2003::OnHighlightMenuItem(hDC, pMenuButton, rect, clrText);
        }

        return;
      }
    }
    else if (pBar != NULL && pBar->IsKindOf(RUNTIME_CLASS(CBCGPColorBar))) {
      index = -1;

      if (bChecked) {
        if (bDisabled) {
          index = 0;
        }
        else if (state == ButtonsIsPressed || state == ButtonsIsHighlighted) {
          index = 3;
        }
      }

      if (!bDisabled) {
        if (bPressed) {
          index = 2;
        }
        else if (state == ButtonsIsHighlighted) {
          if (index == -1) {
            index = 0;
          }

          index++;
        }
      }

      if (index == -1) {
        return;
      }

      pRenderer = &s->m_ctrlToolBarBtn;
    }

    if (pRenderer != NULL) {
      if (pRenderer != NULL) {
        pRenderer->Draw(hDC, rect, index);
      }

      return;
    }
  }

  CBCGPVisualManager2007::OnFillButtonInterior(hDC, pButton, rect, state);
}
void CBCGPVisualManagerCarbon::OnDrawTearOffCaption(HDDC hDC, RECT rect, BOOL bIsActive)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2007::OnDrawTearOffCaption(hDC, rect, bIsActive);
    return;
  }

  COLORREF clrDark  = s->m_clrToolBarGradientDark;
  COLORREF clrLight = s->m_clrToolBarGradientLight;

  if (bIsActive) {
    clrDark  = s->m_clrHighlightGradientDark;
    clrLight = s->m_clrHighlightGradientLight;
  }

  FillGradient(hDC, rect,
      clrDark,
      clrLight,
      TRUE);

  if (bIsActive) {
    draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }

  s->m_ToolBarTear.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter);
}
void CBCGPVisualManagerCarbon::OnDrawMenuScrollButton(HDDC hDC, RECT rect, BOOL bIsScrollDown,
    BOOL bIsHighlited, BOOL bIsPressed,
    BOOL bIsDisabled)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2007::OnDrawMenuScrollButton(hDC, rect, bIsScrollDown, bIsHighlited, bIsPressed, bIsDisabled);
    return;
  }

  ASSERT(hDC);
  COLORREF clrDark  = s->m_clrHighlightGradientDark;
  COLORREF clrLight = s->m_clrHighlightGradientLight;

  if (bIsHighlited) {
    clrDark  = s->m_clrHighlightCheckedGradientDark;
    clrLight = s->m_clrHighlightCheckedGradientLight;
  }

  if (!bIsScrollDown) {
    rect.top--;
    FillGradient(hDC, rect,
        clrDark,
        clrLight,
        TRUE);
  }
  else {
    FillGradient(hDC, rect,
        clrLight,
        clrDark,
        TRUE);
  }

  if (bIsHighlited) {
    draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
  }

  DrawMenuImages(hDC, bIsScrollDown ? IdArowDown : IdArowUp, rect);
}
void CBCGPVisualManagerCarbon::OnDrawMenuSystemButton(HDDC hDC, RECT rect,
    UINT uiSystemCommand,
    UINT nStyle, BOOL bHighlight)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2007::OnDrawMenuSystemButton(hDC, rect,
        uiSystemCommand, nStyle, bHighlight);
    return;
  }

  int imageID =  - 1;

  switch (uiSystemCommand) {
  case SC_CLOSE:
    imageID = IdClose;
    break;

  case SC_MINIMIZE:
    imageID = IdMinimize;
    break;

  case SC_RESTORE:
    imageID = IdRestore;
    break;
  }

  if (imageID == -1) {
    return;
  }

  ASSERT(hDC);
  BOOL bDisabled = (nStyle & UIS_DISABLED);
  BOOL bPressed = (nStyle & UIS_PUSHED);

  if (!bDisabled) {
    int nIndex = 0;

    if (bPressed && bHighlight) {
      nIndex = 2;
    }
    else if (bHighlight) {
      nIndex = 1;
    }

    if (imageID == IdClose) {
      nIndex += 3;
    }

    s->m_ctrlMiniSysBtn.Draw(hDC, rect, nIndex);
  }

  int imageState = ImageWhite;

  if (bDisabled) {
    imageState = ImageDkGray;
  }
  else if (!bPressed && !bHighlight) {
    imageState = ImageGray;
  }

  DrawMenuImages(hDC, imageID, rect, imageState);
}
void CBCGPVisualManagerCarbon::OnDrawScrollButtons(HDDC hDC, RECT  rect, const int nBorderSize,
    int iImage, BOOL bHilited)
{
  if (!CanDrawImage()) {
    CBCGPVisualManager2007::OnDrawScrollButtons(hDC, rect, nBorderSize, iImage, bHilited);
    return;
  }

  RECT rt(rect);
  rt.top--;
  COLORREF clrDark  = s->m_clrHighlightGradientDark;
  COLORREF clrLight = s->m_clrHighlightGradientLight;

  if (bHilited) {
    clrDark  = s->m_clrHighlightCheckedGradientDark;
    clrLight = s->m_clrHighlightCheckedGradientLight;
  }

  FillGradient(hDC, rt,
      clrDark,
      clrLight,
      TRUE);

  if (bHilited) {
    draw_3drect_inR(hDC, &rt, s->m_clrPressedButtonBorder, s->m_clrPressedButtonBorder);
  }

  DrawMenuImages(hDC,  iImage, rect);
}
IMPLEMENT_DYNCREATE(CBCGPVisualManagerScenic, CBCGPWinXPVisualManager)
#define RT_BCG_STYLE_XML _T("STYLE_XML")
const char* CBCGPVisualManagerScenic::s->m_strStylePrefix;
HINSTANCE CBCGPVisualManagerScenic::s->m_hinstRes = NULL;
BOOL CBCGPVisualManagerScenic::s->m_bAutoFreeRes = FALSE;
//
// Construction/Destruction
//
CBCGPVisualManagerScenic::CBCGPVisualManagerScenic()
  : s->m_bLoaded(FALSE)
{
}
CBCGPVisualManagerScenic::~CBCGPVisualManagerScenic()
{
}
const char* CBCGPVisualManagerScenic::MakeResourceID(LPCTSTR lpszID)
{
  const char* strResID(lpszID);
  ASSERT(!strResID.IsEmpty());

  if (!s->m_strStylePrefix.IsEmpty()) {
    strResID = s->m_strStylePrefix + strResID;
  }

  return strResID;
}
const char* CBCGPVisualManagerScenic::GetStyleResourceID()
{
  const char* strResID(_T("IDX_STYLE"));
  strResID = _T("SCENIC_") + strResID;
  return strResID;
};
void CBCGPVisualManagerScenic::SetResourceHandle(HINSTANCE hinstRes)
{
  s->m_bAutoFreeRes = FALSE;

  if (s->m_hinstRes != hinstRes) {
    s->m_hinstRes = hinstRes;

    if (CBCGPVisualManager::GetInstance()->IsKindOf(RUNTIME_CLASS(CBCGPVisualManagerScenic))) {
      CBCGPVisualManager::GetInstance()->OnUpdateSystemColors();
    }
  }
}
BOOL CBCGPVisualManagerScenic::SetStyle(LPCTSTR lpszPath)
{
  if (s->m_hinstRes > (HINSTANCE) 32) {
    return TRUE;
  }

  const char* strVer;
  strVer.Format(_T("%d%d"), _BCGCBPRO_VERSION_MAJOR, _BCGCBPRO_VERSION_MINOR);
  const char* strStyleDLLName = _T("BCGPStyleScenic") + strVer + _T(".dll");
  const char* strStyleDLLPath;

  if (lpszPath != NULL && _tcslen(lpszPath) > 0) {
    strStyleDLLPath = lpszPath;

    if (strStyleDLLPath[strStyleDLLPath.GetLength() - 1] != _T('\\')) {
      strStyleDLLPath += _T('\\');
    }

    strStyleDLLPath += strStyleDLLName;
  }
  else {
    strStyleDLLPath = strStyleDLLName;
  }

  CleanStyle();
  HINSTANCE hinstRes = LoadLibrary(strStyleDLLPath);

  if (hinstRes <= (HINSTANCE) 32) {
    TRACE(_T("Cannot load Style DLL: %s\r\n"), strStyleDLLPath);
    ASSERT(FALSE);
    return FALSE;
  }

  SetResourceHandle(hinstRes);
  s->m_bAutoFreeRes = TRUE;
  return TRUE;
}
void CBCGPVisualManagerScenic::DrawSeparator(HDDC hDC, RECT  rect, COLORREF pen1, COLORREF pen2, BOOL bHorz)
{
  RECT rect1(rect);
  RECT rect2;

  if (bHorz) {
    rect1.top += RCH(&rect) / 2 - 1;
    rect1.bottom = rect1.top;
    rect2 = rect1;
    rect2 OffsetRect(&, 0, 1);
  }
  else {
    rect1.left += RCW(&rect) / 2 - 1;
    rect1.right = rect1.left;
    rect2 = rect1;
    rect2 OffsetRect(&, 1, 0);
  }

  if (bIsDrawOnGlass) {

    LOGPEN logpen;
    pen1.GetLogPen(&logpen);
    draw_line(hDC, rect1.left, rect1.top, rect1.right, rect1.bottom, logpen.lopnColor);
    pen2.GetLogPen(&logpen);
    draw_line(hDC, rect2.left, rect2.top, rect2.right, rect2.bottom, logpen.lopnColor);
  }
  else {
    COLORREF _clr = (pen1);
    TMoveTo(hDC, rect1.TopLeft());
    _LineTo(hDC, rect1.BottomRight());
    _clr = (pen2);
    TMoveTo(hDC, rect2.TopLeft());
    _LineTo(hDC, rect2.BottomRight());

  }
}
void CBCGPVisualManagerScenic::DrawNcBtn(HDDC hDC, RECT  rect, UINT nButton,
    int state, BOOL bSmall,
    BOOL bActive, BOOL bMDI/* = FALSE*/)
{
  ASSERT(hDC);
  {
    UINT nState = 0;

    switch (nButton) {
    case SC_CLOSE:
      nState = DFCS_CAPTIONCLOSE;
      break;

    case SC_MINIMIZE:
      nState = DFCS_CAPTIONMIN;
      break;

    case SC_MAXIMIZE:
      nState = DFCS_CAPTIONMAX;
      break;

    case SC_RESTORE:
      nState = DFCS_CAPTIONRESTORE;
      break;

    case SC_CONTEXTHELP:
      nState = DFCS_CAPTIONHELP;
      break;

    default:
      return;
    }

    if (!bActive) {
      nState |= DFCS_INACTIVE;
    }

    if (state != ButtonsIsRegular) {
      nState |= state == ButtonsIsHighlighted ? 0x1000/*DFCS_HOT*/ : DFCS_PUSHED;
    }

    RECT rt(rect);
    draw_frame_ctrl(hDC, rt, DFC_CAPTION, nState);
    return;
  }
}
void CBCGPVisualManagerScenic::DrawNcText(HDDC hDC, RECT& rect,
    const char* strTitle,
    BOOL bActive, BOOL bIsRTL,
    BOOL bTextCenter,
    BOOL bGlass/* = FALSE*/, int nGlassGlowSize/* = 0*/,
    COLORREF clrGlassText/* = (COLORREF)-1*/)
{
  if (strTitle.IsEmpty() || rect.right <= rect.left) {
    return;
  }

  ASSERT(hDC);
  int nOldMode = hDC->SetBkMode(TRANSPARENT);
  COLORREF clrOldText = globalData.clrWindowText;
  DWORD dwTextStyle = DT_END_ELLIPSIS | DT_SINGLELINE | DT_VCENTER |
      (bIsRTL ? DT_RTLREADING : 0);
  COLORREF clrText = bActive
      ? globalData.clrCaptionText
      : globalData.clrInactiveCaptionText;
  int widthFull = RCW(&rect);
  int width = FontGetTextExtent(hDC, strTitle).cx;

  if (bTextCenter && width < widthFull) {
    rect.left += (widthFull - width) / 2;
  }

  rect.right = MIN(rect.left + width, rect.right);

  if (rect.right > rect.left) {
    if (bGlass) {
      DrawTextOnGlass(hDC, strTitle, rect, dwTextStyle, nGlassGlowSize, clrGlassText);
    }
    else {
      hDC->SetTextColor(clrText);
      draw_textR(hDC, strTitle, rect, dwTextStyle);
    }
  }

  hDC->SetBkMode(nOldMode);
  hDC->SetTextColor(clrOldText);
}
BOOL CBCGPVisualManagerScenic::IsOwnerDrawMenuCheck()
{
  return CanDrawImage() ? FALSE : CBCGPWinXPVisualManager::IsOwnerDrawMenuCheck();
}
BOOL CBCGPVisualManagerScenic::IsHighlightWholeMenuItem()
{
  return CanDrawImage() ? TRUE : CBCGPWinXPVisualManager::IsHighlightWholeMenuItem();
}
void CBCGPVisualManagerScenic::CleanUp()
{
  s->m_AppCaptionFont.DeleteObject();
  s->m_penSeparatorDark.DeleteObject();
  s->m_penSeparatorLight.DeleteObject();
  s->m_clrRibbonBarBkgnd.DeleteObject();
  s->m_ctrlMenuItemBack.CleanUp();
  s->m_MenuItemMarkerC.Clear();
  s->m_MenuItemMarkerR.Clear();
  s->m_ctrlMenuHighlighted[0].CleanUp();
  s->m_ctrlMenuHighlighted[1].CleanUp();
  s->m_ctrlRibbonComboBoxBtn.CleanUp();
  s->m_ctrlRibbonCaptionQA.CleanUp();
  s->m_ctrlRibbonCategoryBack.CleanUp();
  s->m_ctrlRibbonCategoryTab.CleanUp();
  s->m_ctrlRibbonCategoryTabSep.CleanUp();
  s->m_ctrlRibbonPanelBackSep.CleanUp();
  s->m_ctrlRibbonMainPanel.CleanUp();
  s->m_ctrlRibbonBtnMainPanel.CleanUp();
  s->m_ctrlRibbonBtnGroup_S.CleanUp();
  s->m_ctrlRibbonBtnGroup_F.CleanUp();
  s->m_ctrlRibbonBtnGroup_M.CleanUp();
  s->m_ctrlRibbonBtnGroup_L.CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_F[0].CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_F[1].CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_M[0].CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_M[1].CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_L[0].CleanUp();
  s->m_ctrlRibbonBtnGroupMenu_L[1].CleanUp();
  s->m_ctrlRibbonBtn[0].CleanUp();
  s->m_ctrlRibbonBtn[1].CleanUp();
  s->m_ctrlRibbonBtnMenuH[0].CleanUp();
  s->m_ctrlRibbonBtnMenuH[1].CleanUp();
  s->m_ctrlRibbonBtnMenuV[0].CleanUp();
  s->m_ctrlRibbonBtnMenuV[1].CleanUp();
  s->m_ctrlRibbonBtnLaunch.CleanUp();
  s->m_RibbonBtnLaunchIcon.Clear();
  s->m_ctrlRibbonBtnMain.CleanUp();
  s->m_ctrlRibbonSliderBtnPlus.CleanUp();
  s->m_ctrlRibbonSliderBtnMinus.CleanUp();
  s->m_RibbonBtnDefaultImage.Clear();
  s->m_ctrlRibbonBtnDefault.CleanUp();
  s->m_ctrlRibbonBtnDefaultIcon.CleanUp();
  s->m_ctrlRibbonBtnDefaultQAT.CleanUp();
  s->m_ctrlRibbonBtnStatusPane.CleanUp();
  s->m_ctrlRibbonBtnPalette[0].CleanUp();
  s->m_ctrlRibbonBtnPalette[1].CleanUp();
  s->m_ctrlRibbonBtnPalette[2].CleanUp();
  s->m_ctrlRibbonBorder_QAT.CleanUp();
  s->m_cacheRibbonCategoryBack.Clear();
  s->m_cacheRibbonBtnGroup_S.Clear();
  s->m_cacheRibbonBtnGroup_F.Clear();
  s->m_cacheRibbonBtnGroup_M.Clear();
  s->m_cacheRibbonBtnGroup_L.Clear();
  s->m_cacheRibbonBtnGroupMenu_F[0].Clear();
  s->m_cacheRibbonBtnGroupMenu_M[0].Clear();
  s->m_cacheRibbonBtnGroupMenu_L[0].Clear();
  s->m_cacheRibbonBtnGroupMenu_F[1].Clear();
  s->m_cacheRibbonBtnGroupMenu_M[1].Clear();
  s->m_cacheRibbonBtnGroupMenu_L[1].Clear();
  s->m_cacheRibbonBtnDefault.Clear();
  s->m_ActivateFlag.RemoveAll();
  s->m_bLoaded = FALSE;
}
void CBCGPVisualManagerScenic::OnUpdateSystemColors()
{
  HINSTANCE hinstResOld = NULL;

  if (s->m_hinstRes == NULL) {
    SetStyle();
    return;
  }

  if (s->m_hinstRes != NULL) {
    hinstResOld = AfxGetResourceHandle();
    AfxSetResourceHandle(s->m_hinstRes);
  }

  CleanUp();
  CBCGPWinXPVisualManager::OnUpdateSystemColors();
  CBCGPTagManager tm;

  if (!tm.LoadFromResource(GetStyleResourceID(), RT_BCG_STYLE_XML)) {
    TRACE(_T("\r\nImportant: to enable the Scenic look in static link,\r\n"));
    TRACE(_T("include afxribbon.rc from the RC file in your project.\r\n\r\n"));
    ASSERT(FALSE);

    if (hinstResOld != NULL) {
      AfxSetResourceHandle(hinstResOld);
    }

    return;
  }

  {
    const char* strStyle;
    tm.ExcludeTag(_T("STYLE"), strStyle);
    tm.SetBuffer(strStyle);
  }

  const char* strItem;

  if (!tm.IsEmpty()) {
    int nVersion = 0;

    if (tm.ExcludeTag(_T("VERSION"), strItem)) {
      CBCGPTagManager tmItem(strItem);
      tmItem.ReadInt(_T("NUMBER"), nVersion);
      int nType = 20;

      if (nVersion == 2007) {
        tmItem.ReadInt(_T("TYPE"), nType);
        s->m_bLoaded = TRUE;
      }

      if (s->m_bLoaded) {
        if (tmItem.ExcludeTag(_T("ID_PREFIX"), strItem)) {
          strItem.TrimLeft();
          strItem.TrimRight();
          s->m_strStylePrefix = strItem;
        }
      }
    }
  }

  if (!s->m_bLoaded) {
    if (hinstResOld != NULL) {
      ::AfxSetResourceHandle(hinstResOld);
    }

    return;
  }

  // menu
  if (tm.ExcludeTag(_T("MENU"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    tmItem.ReadInt(_T("BorderSize"), s->m_nMenuBorderSize);
    tmItem.ReadControlRenderer(_T("ItemBack"), s->m_ctrlMenuItemBack, MakeResourceID(_T("IDB_MENU_ITEs->m_BACK")));
    tmItem.ReadToolBarImages(_T("ItemCheck"), s->m_MenuItemMarkerC, MakeResourceID(_T("IDB_MENU_ITEs->m_MARKER_C")));
    tmItem.ReadToolBarImages(_T("ItemRadio"), s->m_MenuItemMarkerR, MakeResourceID(_T("IDB_MENU_ITEs->m_MARKER_R")));
    tmItem.ReadControlRenderer(_T("Highlighted"), s->m_ctrlMenuHighlighted[0], MakeResourceID(_T("IDB_MENU_BTN")));
    tmItem.ReadControlRenderer(_T("HighlightedDisabled"), s->m_ctrlMenuHighlighted[1], MakeResourceID(_T("IDB_MENU_BTN_DISABLED")));
  }

  s->m_clrMenuRarelyUsed.DeleteObject();
  s->m_clrMenuRarelyUsed.CreateSolidBrush(s->m_clrMenuRarelyUsed);
  s->m_clrRibbonEdit            = globalData.clrWindow;
  s->m_clrRibbonEditHighlighted = globalData.clrWindow;
  s->m_clrRibbonEditPressed     = s->m_clrRibbonEditHighlighted;
  s->m_clrRibbonEditDisabled    = globalData.clrBtnFace;
  s->m_clrRibbonEditBorder            = globalData.clrWindow;
  s->m_clrRibbonEditBorderDisabled    = globalData.clrBtnShadow;
  s->m_clrRibbonEditBorderHighlighted = s->m_clrMenuItemBorder;
  s->m_clrRibbonEditBorderPressed     = s->m_clrRibbonEditBorderHighlighted;
  s->m_clrRibbonEditSelection         = globalData.clrHilite;
  s->m_clrRibbonBarBkgnd         = globalData.clrBtnFace;
  s->m_clrRibbonBarGradientLight = globalData.clrBtnLight;
  s->m_clrRibbonBarGradientDark  = s->m_clrRibbonBarGradientLight;

  // bars
  if (tm.ExcludeTag(_T("BARS"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    const char* strBar;

    if (tmItem.ExcludeTag(_T("RIBBONBAR"), strBar)) {
      CBCGPTagManager tmBar(strBar);
      tmBar.ReadColor(_T("Bkgnd"), s->m_clrRibbonBarBkgnd);
      tmBar.ReadColor(_T("GradientLight"), s->m_clrRibbonBarGradientLight);
      s->m_clrRibbonBarGradientDark = s->m_clrRibbonBarGradientLight;
      tmBar.ReadColor(_T("GradientDark"), s->m_clrRibbonBarGradientDark);
    }
  }

  s->m_clrRibbonBarBkgnd.DeleteObject();
  s->m_clrRibbonBarBkgnd.CreateSolidBrush(s->m_clrRibbonBarBkgnd);

  if (tm.ExcludeTag(_T("RIBBON"), strItem)) {
    CBCGPTagManager tmItem(strItem);
    const char* str;

    if (tmItem.ExcludeTag(_T("CATEGORY"), str)) {
      CBCGPTagManager tmCategory(str);
      tmCategory.ReadControlRenderer(_T("BACK"), s->m_ctrlRibbonCategoryBack, MakeResourceID(_T("IDB_RIBBON_CATEGORY_BACK")));
      const char* strTab;

      if (tmCategory.ExcludeTag(_T("TAB"), strTab)) {
        CBCGPTagManager tmTab(strTab);
        tmTab.ReadControlRenderer(_T("BUTTON"), s->m_ctrlRibbonCategoryTab, MakeResourceID(_T("IDB_RIBBON_CATEGORY_TAB")));
      }

      tmCategory.ReadControlRenderer(_T("TAB_SEPARATOR"), s->m_ctrlRibbonCategoryTabSep, MakeResourceID(_T("IDB_RIBBON_CATEGORY_TAB_SEP")));
      //      tmCategory.ReadControlRenderer (_T("BUTTON_PAGE_L"), s->m_ctrlRibbonCategoryBtnPage[0], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_PAGE_L")));
      //      tmCategory.ReadControlRenderer (_T("BUTTON_PAGE_R"), s->m_ctrlRibbonCategoryBtnPage[1], MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BTN_PAGE_R")));
    }

    if (tmItem.ExcludeTag(_T("PANEL"), str)) {
      CBCGPTagManager tmPanel(str);
      {
        const char* strBack;

        if (tmPanel.ExcludeTag(_T("BACK"), strBack)) {
          CBCGPTagManager tmBack(strBack);
          tmBack.ReadControlRenderer(_T("SEPARATOR"), s->m_ctrlRibbonPanelBackSep, MakeResourceID(_T("IDB_RIBBON_PANEL_BACK_SEP")));
        }
      }
      {
        const char* strCaption;

        if (tmPanel.ExcludeTag(_T("CAPTION"), strCaption)) {
          CBCGPTagManager tmCaption(strCaption);
          tmCaption.ReadControlRenderer(_T("LAUNCH_BTN"), s->m_ctrlRibbonBtnLaunch, MakeResourceID(_T("IDB_RIBBON_BTN_LAUNCH")));
          tmCaption.ReadToolBarImages(_T("LAUNCH_ICON"), s->m_RibbonBtnLaunchIcon, MakeResourceID(_T("IDB_RIBBON_BTN_LAUNCH_ICON")));
          tmCaption.ReadColor(_T("TextNormal"), s->m_clrRibbonPanelCaptionText);
          tmCaption.ReadColor(_T("TextHighlighted"), s->m_clrRibbonPanelCaptionTextHighlighted);
        }
      }
      {
        const char* strButtons;

        if (tmPanel.ExcludeTag(_T("BUTTONS"), strButtons)) {
          CBCGPTagManager tmButtons(strButtons);
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUP_F"), s->m_ctrlRibbonBtnGroup_F, MakeResourceID(_T("IDB_RIBBON_BTN_GROUP_F")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUP_M"), s->m_ctrlRibbonBtnGroup_M, MakeResourceID(_T("IDB_RIBBON_BTN_GROUP_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUP_L"), s->m_ctrlRibbonBtnGroup_L, MakeResourceID(_T("IDB_RIBBON_BTN_GROUP_L")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUP_S"), s->m_ctrlRibbonBtnGroup_S, MakeResourceID(_T("IDB_RIBBON_BTN_GROUP_S")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_F_C"), s->m_ctrlRibbonBtnGroupMenu_F[0], MakeResourceID(_T("IDB_RIBBON_BTN_GROUPMENU_F_C")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_F_M"), s->m_ctrlRibbonBtnGroupMenu_F[1], MakeResourceID(_T("IDB_RIBBON_BTN_GROUPMENU_F_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_s->m_C"), s->m_ctrlRibbonBtnGroupMenu_M[0], MakeResourceID(_T("IDB_RIBBON_BTN_GROUPMENU_s->m_C")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_s->m_M"), s->m_ctrlRibbonBtnGroupMenu_M[1], MakeResourceID(_T("IDB_RIBBON_BTN_GROUPMENU_s->m_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_L_C"), s->m_ctrlRibbonBtnGroupMenu_L[0], MakeResourceID(_T("IDB_RIBBON_BTN_GROUPMENU_L_C")));
          tmButtons.ReadControlRenderer(_T("BUTTON_GROUPMENU_L_M"), s->m_ctrlRibbonBtnGroupMenu_L[1], MakeResourceID(_T("IDB_RIBBON_BTN_GROUPMENU_L_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_NORMAL_S"), s->m_ctrlRibbonBtn[0], MakeResourceID(_T("IDB_RIBBON_BTN_NORMAL_S")));
          tmButtons.ReadControlRenderer(_T("BUTTON_NORMAL_B"), s->m_ctrlRibbonBtn[1], MakeResourceID(_T("IDB_RIBBON_BTN_NORMAL_B")));
          tmButtons.ReadControlRenderer(_T("BUTTON_DEFAULT"), s->m_ctrlRibbonBtnDefault, MakeResourceID(_T("IDB_RIBBON_BTN_DEFAULT")));
          tmButtons.ReadControlRenderer(_T("BUTTON_DEFAULT_ICON"), s->m_ctrlRibbonBtnDefaultIcon, MakeResourceID(_T("IDB_RIBBON_BTN_DEFAULT_ICON")));
          tmButtons.ReadToolBarImages(_T("BUTTON_DEFAULT_IMAGE"), s->m_RibbonBtnDefaultImage, MakeResourceID(_T("IDB_RIBBON_BTN_DEFAULT_IMAGE")));
          tmButtons.ReadControlRenderer(_T("BUTTON_DEFAULT_QAT"), s->m_ctrlRibbonBtnDefaultQAT, MakeResourceID(_T("IDB_RIBBON_BTN_DEFAULT_QAT")));
          tmButtons.ReadControlRenderer(_T("BUTTON_MENU_H_C"), s->m_ctrlRibbonBtnMenuH[0], MakeResourceID(_T("IDB_RIBBON_BTN_MENU_H_C")));
          tmButtons.ReadControlRenderer(_T("BUTTON_MENU_H_M"), s->m_ctrlRibbonBtnMenuH[1], MakeResourceID(_T("IDB_RIBBON_BTN_MENU_H_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_MENU_V_C"), s->m_ctrlRibbonBtnMenuV[0], MakeResourceID(_T("IDB_RIBBON_BTN_MENU_V_C")));
          tmButtons.ReadControlRenderer(_T("BUTTON_MENU_V_M"), s->m_ctrlRibbonBtnMenuV[1], MakeResourceID(_T("IDB_RIBBON_BTN_MENU_V_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_PNL_T"), s->m_ctrlRibbonBtnPalette[0], MakeResourceID(_T("IDB_RIBBON_BTN_PALETTE_T")));
          tmButtons.ReadControlRenderer(_T("BUTTON_PNL_M"), s->m_ctrlRibbonBtnPalette[1], MakeResourceID(_T("IDB_RIBBON_BTN_PALETTE_M")));
          tmButtons.ReadControlRenderer(_T("BUTTON_PNL_B"), s->m_ctrlRibbonBtnPalette[2], MakeResourceID(_T("IDB_RIBBON_BTN_PALETTE_B")));
        }
      }
      {
        const char* strEdit;

        if (tmPanel.ExcludeTag(_T("EDIT"), strEdit)) {
          CBCGPTagManager tmEdit(strEdit);
          tmEdit.ReadColor(_T("Normal"), s->m_clrRibbonEdit);
          tmEdit.ReadColor(_T("Highlighted"), s->m_clrRibbonEditHighlighted);
          tmEdit.ReadColor(_T("Disabled"), s->m_clrRibbonEditDisabled);
          tmEdit.ReadColor(_T("Pressed"), s->m_clrRibbonEditPressed);
          tmEdit.ReadColor(_T("BorderNormal"), s->m_clrRibbonEditBorder);
          tmEdit.ReadColor(_T("BorderHighlighted"), s->m_clrRibbonEditBorderHighlighted);
          tmEdit.ReadColor(_T("BorderDisabled"), s->m_clrRibbonEditBorderDisabled);
          tmEdit.ReadColor(_T("BorderPressed"), s->m_clrRibbonEditBorderPressed);
          tmEdit.ReadColor(_T("Selection"), s->m_clrRibbonEditSelection);
          const char* strButton;

          if (tmEdit.ExcludeTag(_T("BUTTON"), strButton)) {
            CBCGPTagManager tmButton(strButton);
            tmButton.ReadControlRenderer(_T("IMAGE"), s->m_ctrlRibbonComboBoxBtn, MakeResourceID(_T("IDB_COMBOBOX_BTN")));
          }
        }
      }
    }

    tmItem.ReadControlRenderer(_T("MAIN_BUTTON"), s->m_ctrlRibbonBtnMain, MakeResourceID(_T("IDB_RIBBON_BTN_MAIN")));

    if (tmItem.ExcludeTag(_T("MAIN"), str)) {
      CBCGPTagManager tmMain(str);
      tmMain.ReadControlRenderer(_T("BACK"), s->m_ctrlRibbonMainPanel, MakeResourceID(_T("IDB_RIBBON_PANEL_MAIN")));
      tmMain.ReadControlRenderer(_T("BUTTON"), s->m_ctrlRibbonBtnMainPanel, MakeResourceID(_T("IDB_RIBBON_BTN_PANEL_MAIN")));
    }

    if (tmItem.ExcludeTag(_T("CAPTION"), str)) {
      CBCGPTagManager tmCaption(str);
      tmCaption.ReadControlRenderer(_T("QA"), s->m_ctrlRibbonCaptionQA, MakeResourceID(_T("IDB_RIBBON_CAPTION_QA")));
    }

    if (tmItem.ExcludeTag(_T("STATUS"), str)) {
      CBCGPTagManager tmStatus(str);
      tmStatus.ReadControlRenderer(_T("PANE_BUTTON"), s->m_ctrlRibbonBtnStatusPane, MakeResourceID(_T("IDB_RIBBON_BTN_STATUS_PANE")));
      const char* strSlider;

      if (tmStatus.ExcludeTag(_T("SLIDER"), strSlider)) {
        CBCGPTagManager tmSlider(strSlider);
        tmSlider.ReadControlRenderer(_T("PLUS"), s->m_ctrlRibbonSliderBtnPlus, MakeResourceID(_T("IDB_RIBBON_SLIDER_BTN_PLUS")));
        tmSlider.ReadControlRenderer(_T("MINUS"), s->m_ctrlRibbonSliderBtnMinus, MakeResourceID(_T("IDB_RIBBON_SLIDER_BTN_MINUS")));
      }
    }

    if (tmItem.ExcludeTag(_T("BORDERS"), str)) {
      CBCGPTagManager tmBorders(str);
      tmBorders.ReadControlRenderer(_T("QAT"), s->m_ctrlRibbonBorder_QAT, MakeResourceID(_T("IDB_RIBBON_BORDER_QAT")));
      //tmBorders.ReadControlRenderer (_T("FLOATY"), s->m_ctrlRibbonBorder_Floaty, MakeResourceID(_T("IDB_OFFICE2007_RIBBON_BORDER_FLOATY")));
    }
  }

  if (hinstResOld != NULL) {
    AfxSetResourceHandle(hinstResOld);
  }

  NONCLIENTMETRICS ncm;
  globalData.GetNonClientMetrics(ncm);
  s->m_AppCaptionFont.CreateFontIndirect(&ncm.lfCaptionFont);
  s->m_penSeparatorDark.CreatePen(PS_SOLID, 0, _RGB(198, 212, 227));
  s->m_penSeparatorLight.CreatePen(PS_SOLID, 0, _RGB(237, 243, 248));
}
void CBCGPVisualManagerScenic::OnDrawMenuBorder(HDDC hDC, CBCGPPopupMenu* pMenu, RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawMenuBorder(hDC, pMenu, rect);
    return;
  }

  if (pMenu != NULL) {
    CBCGPRibbonPanelMenuBar* pRibbonMenuBar =
        DYNAMIC_DOWNCAST(CBCGPRibbonPanelMenuBar, pMenu->GetMenuBar());

    if (pRibbonMenuBar != NULL) {
      ASSERT(pRibbonMenuBar);

      if (pRibbonMenuBar->IsMainPanel()) {
        if (s->m_ctrlRibbonMainPanel.IsValid()) {
          s->m_ctrlRibbonMainPanel.DrawFrame(hDC, rect);
        }

        return;
      }

      if (!pRibbonMenuBar->IsMenuMode()) {
        if (pRibbonMenuBar->IsQATPopup() &&
            s->m_ctrlRibbonBorder_QAT.IsValid()) {
          s->m_ctrlRibbonBorder_QAT.DrawFrame(hDC, rect);
          return;
        }
        else if (pRibbonMenuBar->IsCategoryPopup()) {
          return;
        }
        else if (pRibbonMenuBar->IsFloaty() /*&
             s->m_ctrlRibbonBorder_Floaty.IsValid ()*/) {
          /*
                    s->m_ctrlRibbonBorder_Floaty.DrawFrame (hDC, rect);
                    return;
          */
        }
        else {
          if (pRibbonMenuBar->GetPanel() != NULL) {
            return;
          }
        }
      }
    }
  }

  CBCGPWinXPVisualManager::OnDrawMenuBorder(hDC, pMenu, rect);
}
void CBCGPVisualManagerScenic::OnDrawMenuCheck(HDDC hDC, CBCGPToolbarMenuButton* pButton,
    RECT rect, BOOL bHighlight, BOOL bIsRadio)
{

  CBCGPToolBarImages& img = bIsRadio ? s->m_MenuItemMarkerR : s->m_MenuItemMarkerC;

  if (!CanDrawImage() || img.GetCount() == 0) {
    CBCGPWinXPVisualManager::OnDrawMenuCheck(hDC, pButton, rect, bHighlight, bIsRadio);
    return;
  }

  SIZE size(img.GetImageSize());
  RECT rectImage(0, 0, size.cx, size.cy);

  if ((pButton->s->m_nStyle & UIS_DISABLED) == UIS_DISABLED) {
    rectImage OffsetRect(&, 0, size.cy);
  }

  if (globalData.m_bIsRTL) {
    img.Mirror();
  }

  img.DrawEx(hDC, rect, 0, CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter, rectImage);

  if (globalData.m_bIsRTL) {
    img.Mirror();
  }
}
void CBCGPVisualManagerScenic::OnHighlightMenuItem(HDDC hDC, CBCGPToolbarMenuButton* pButton,
    RECT rect, COLORREF clrText)
{
  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnHighlightMenuItem(hDC, pButton, rect, clrText);
    return;
  }

  clrText = globalData.clrMenuText;
  s->m_ctrlMenuHighlighted[(pButton->s->m_nStyle & UIS_DISABLED) == UIS_DISABLED ? 1 : 0].Draw(hDC, rect);
}
void CBCGPVisualManagerScenic::OnDrawRibbonCaption(HDDC hDC,
    RECT rectCaption, RECT rectText)
{
  ASSERT(hDC);

  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawRibbonCaption(hDC, pBar, rectCaption, rectText);
    return;
  }

  CWnd* pWnd = pBar->GetParent();
  ASSERT(pWnd);
  //const DWORD dwStyle   = pWnd->GetStyle ();
  const DWORD dwStyleEx = pWnd->GetExStyle();
  const BOOL bIsRTL     = (dwStyleEx & WS_EX_LAYOUTRTL) == WS_EX_LAYOUTRTL;
  const BOOL bActive    = IsWindowActive(pWnd);
  const BOOL bGlass   = pBar->IsTransparentCaption();
  {
    SIZE szSysBorder(GetSystemBorders(TRUE));

    if (!bGlass) {
      RECT rectCaption1(rectCaption);
      rectCaption1 InflateRect(&, szSysBorder.cx, szSysBorder.cy, szSysBorder.cx, 0);
      {

        FillGradient(hDC, rectCaption1,
            bActive ? globalData.clrActiveCaption : globalData.clrInactiveCaption,
            bActive ? globalData.clrActiveCaptionGradient : globalData.clrInactiveCaptionGradient, FALSE);
      }
    }

    RECT rectQAT = rectQuickAccessToolbarLocation;

    if (rectQAT.left > rectQAT.right) {
      rectText.left = rectQAT.left + 1;
    }

    BOOL bHide  = (pBar->GetHideFlags() & BCGPRIBBONBAR_HIDE_ALL) != 0;
    BOOL bExtra = !bHide && pBar->IsQuickAccessToolbarOnTop() &&
        rectQAT.left < rectQAT.right && !pBar->IsQATEmpty();
    BOOL bDrawIcon = (bHide && !bExtra) || IsScenicLook;

    if (bExtra) {
      RECT rectQAFrame(rectQAT);
      rectQAFrame.right = rectText.left - 6;
      rectQAFrame InflateRect(&, 1, 1, 1, 1);
      const CBCGPControlRendererParams& params = s->m_ctrlRibbonCaptionQA.GetParams();

      if (rectQAFrame RCH(&) < params.s->m_rectImage RCH(&)) {
        rectQAFrame.top = rectQAFrame.bottom - params.s->m_rectImage RCH(&);
      }

      /*
            if (bGlass)
            {
              const int dxFrame = GetSystemMetrics (Ss->m_CXSIZEFRAME) / 2;
              const int nTop = globalData.GetRibbonImageScale () != 1. ? -2 : 1;
              rectQAFrame.DeflateRect (1, nTop, dxFrame, 0);
            }
      */
      s->m_ctrlRibbonCaptionQA.Draw(hDC, rectQAFrame, bActive ? 0 : 1);
    }

    if (bDrawIcon) {
      BOOL bDestroyIcon = FALSE;
      HICON hIcon = globalUtils.GetWndIcon(pWnd, &bDestroyIcon);

      if (hIcon != NULL) {
        SIZE szIcon(GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON));
        long x = rectCaption.left + 2;
        long y = rectCaption.top  + MAX(0, (rectCaption RCH(&) - szIcon.cy) / 2);

        if (bGlass) {
          globalData.DrawIconOnGlass(s->m_hThemeWindow, hDC, hIcon, RECT(x, y, x + szIcon.cx, y + szIcon.cy));
        }
        else {
          ::DrawIconEx(hDC, x, y, hIcon, szIcon.cx, szIcon.cy,
              0, NULL, DI_NORMAL);
        }

        if (rectText.left < (x + szIcon.cx + 4)) {
          rectText.left = x + szIcon.cx + 4;
        }

        if (bDestroyIcon) {
          ::DestroyIcon(hIcon);
        }
      }
    }
  }
  const char* strText;
  pWnd->GetWindowText(strText);
  CFont* pOldFont = (CFont*)_clr = (&s->m_AppCaptionFont);
  ASSERT(pOldFont != NULL);
  DrawNcText(hDC, rectText, strText, bActive,
      bIsRTL, FALSE, bGlass, pWnd->IsZoomed() ? 0 : 10,
      pWnd->IsZoomed() ? _RGB(255, 255, 255) : 0);
  _clr = (pOldFont);
}
void CBCGPVisualManagerScenic::OnDrawRibbonCaptionButton(HDDC hDC)
{
  ASSERT(hDC);

  const BOOL bHighlighted = IsHighlighted || IsFocused;
  const BOOL bPressed = IsPressed;
  int state = ButtonsIsRegular;

  if (bPressed) {
    if (bHighlighted) {
      state = ButtonsIsPressed;
    }
  }
  else if (bHighlighted) {
    state = ButtonsIsHighlighted;
  }

  const BOOL bMDI = pButton->IsMDIChildButton();
  BOOL bActive = TRUE;

  if (!bMDI) {
    CBCGPRibbonBar* pBar = pButton->GetParentRibbonBar();

    if (pBar->GetSafeHwnd() != NULL) {
      CWnd* pWnd = pBar->GetParent();
      ASSERT(pWnd);
      bActive = IsWindowActive(pWnd);
    }
  }

  RECT rect(rect);
  DeflateRect(&rect, 1, 1);
  DrawNcBtn(hDC, rect, nID, state, FALSE, bActive, bMDI);
}
COLORREF CBCGPVisualManagerScenic::OnDrawRibbonPanel(
    HDDC hDC,

    RECT rectPanel,
    RECT rectCaption)
{
  if (!CanDrawImage()) {
    return CBCGPWinXPVisualManager::OnDrawRibbonPanel(hDC, pPanel, rectPanel, rectCaption);
  }

  ASSERT(hDC);


  if (pPanel->IsKindOf(RUNTIME_CLASS(CBCGPRibbonMainPanel))) {
    const int nBorderSize = GetPopupMenuBorderSize();
    rectPanel InflateRect(&, nBorderSize, nBorderSize);
    s->m_ctrlRibbonMainPanel.Draw(hDC, rectPanel);
  }
  else {
    if (!pPanel->IsMenuMode() && !IsCollapsed) {
      int nWidth = s->m_ctrlRibbonPanelBackSep.GetParams().s->m_rectImage RCW(&);
      int nWidth2 = nWidth / 2;
      rectPanel.left = rectPanel.right - nWidth2;
      rectPanel.right += (nWidth - nWidth2);
      rectPanel DeflateRect(&, 0, 4);
      s->m_ctrlRibbonPanelBackSep.Draw(hDC, rectPanel);
    }
  }

  return globalData.clrBtnText;
}
COLORREF CBCGPVisualManagerScenic::OnFillRibbonPanelCaption(
    HDDC /*hDC*/,
    CBCGPRibbonPanel* /*pPanel*/,
)
{
  return s->m_clrRibbonPanelCaptionText;
}
void CBCGPVisualManagerScenic::OnDrawRibbonCategory(
    HDDC hDC,

    RECT rectCategory)
{
  ASSERT(hDC);


  if (!CanDrawImage() || pCategory->IsOnDialogBar()) {
    CBCGPWinXPVisualManager::OnDrawRibbonCategory(hDC, pCategory, rectCategory);
    return;
  }

  CBCGPControlRenderer* pRenderer = &s->m_ctrlRibbonCategoryBack;
  CBCGPBitmapCache* pCache = &s->m_cacheRibbonCategoryBack;
  /*
    CBCGPBaseRibbonElement* pParentButton = pCategory->GetParentButton ();
    if (pCategory->GetTabColor () != BCGPCategoryColor_None &&
      (pParentButton == NULL || !pParentButton->IsQATMode ()))
    {
      XRibbonContextCategory& context =
        s->m_ctrlRibbonContextCategory[pCategory->GetTabColor () - 1];
      pRenderer = &context.s->m_ctrlBack;
      pCache    = &context.s->m_cacheBack;
    }
  */
  const CBCGPControlRendererParams& params = pRenderer->GetParams();
  CBCGPRibbonPanelMenuBar* pMenuBar = pCategory->GetParentMenuBar();

  if (pMenuBar != NULL) {
    if (pMenuBar->GetCategory() != NULL) {
      if (rectCategory.left < 0 || rectCategory.top < 0) {

        FillGradient(hDC, rectCategory, s->m_clrRibbonBarGradientDark, s->m_clrRibbonBarGradientLight, TRUE);
        return;
      }
    }
  }

  int nCacheIndex = -1;

  if (pCache != NULL) {
    SIZE size(params.s->m_rectImage RCW(&), rectCategory RCH(&));
    nCacheIndex = pCache->FindIndex(size);

    if (nCacheIndex == -1) {
      nCacheIndex = pCache->CacheY(size.cy, *pRenderer);
    }
  }

  if (nCacheIndex != -1) {
    pCache->Get(nCacheIndex)->DrawY(hDC, rectCategory,
        SIZE(params.s->m_rectInter.left, params.s->m_rectImage.right - params.s->m_rectInter.right));
  }
  else {
    pRenderer->Draw(hDC, rectCategory);
  }
}
COLORREF CBCGPVisualManagerScenic::OnDrawRibbonCategoryTab(
    HDDC hDC,

    BOOL bIsActive)
{
  ASSERT(hDC);


  if (!CanDrawImage()) {
    return CBCGPWinXPVisualManager::OnDrawRibbonCategoryTab(hDC,
        pTab, bIsActive);
  }

  CBCGPRibbonCategory* pCategory = pTab->GetParentCategory();

  CBCGPRibbonBar* pBar = pCategory->GetParentRibbonBar();
  bIsActive = bIsActive &&
      ((pBar->GetHideFlags() & BCGPRIBBONBAR_HIDE_ELEMENTS) == 0 || pTab->GetDroppedDown() != NULL);
  const BOOL bPressed     = pTab->IsPressed();
  const BOOL bIsFocused = pTab->IsFocused() && (pBar->GetHideFlags() & BCGPRIBBONBAR_HIDE_ELEMENTS);
  const BOOL bIsHighlight = (pTab->IsHighlighted() || bIsFocused) && !pTab->IsDroppedDown();
  RECT rectTab(pTab->GetRect());
  rectTab.bottom++;
  int ratio = 0;

  if (s->m_ctrlRibbonCategoryTabSep.IsValid()) {
    ratio = pBar->GetTabTrancateRatio();
  }

  if (ratio > 0) {
    rectTab.left++;
  }

  int nImage = bIsActive ? 3 : 0;

  if (bPressed) {
    if (bIsHighlight) {
      nImage = bIsActive ? 2 : 1;
    }
  }

  if (bIsHighlight) {
    nImage += 1;
  }

  CBCGPControlRenderer* pRenderer = &s->m_ctrlRibbonCategoryTab;
  /*
    COLORREF clrText = s->m_clrRibbonCategoryText;
    COLORREF clrTextHighlighted = s->m_clrRibbonCategoryTextHighlighted;
    if (pCategory->GetTabColor () != BCGPCategoryColor_None || pTab->IsSelected ())
    {
      XRibbonContextCategory& context =
          s->m_ctrlRibbonContextCategory[
          (pTab->IsSelected () || nImage == 4)
            ? BCGPCategoryColor_Orange - 1
            : pCategory->GetTabColor () - 1];
      pRenderer = &context.s->m_ctrlTab;
      clrText  = context.s->m_clrText;
      clrTextHighlighted = context.s->m_clrTextHighlighted;
    }
  */
  pRenderer->Draw(hDC, rectTab, nImage);

  if (ratio > 0) {
    RECT rectSep(rectTab);
    rectSep.left = rectSep.right;
    rectSep.right++;
    rectSep.bottom--;
    s->m_ctrlRibbonCategoryTabSep.Draw(hDC, rectSep, 0, (BYTE)MIN(ratio * 255 / 100, 255));
  }

  return globalData.clrBtnText;
}
COLORREF CBCGPVisualManagerScenic::OnDrawRibbonTabsFrame(
    HDDC hDC,
    CBCGPRibbonBar* pWndRibbonBar,
    RECT rectTab)
{
  UNREFERENCED_PARAMETER(hDC);
  UNREFERENCED_PARAMETER(pWndRibbonBar);
  UNREFERENCED_PARAMETER(rectTab);
  return 0;
}
void CBCGPVisualManagerScenic::OnFillMenuImageRect(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state)
{
  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnFillMenuImageRect(hDC, pButton, rect, state);
    return;
  }

  OnFillButtonInterior(hDC, pButton, rect, state);
}
void CBCGPVisualManagerScenic::OnFillButtonInterior(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state)
{
  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnFillButtonInterior(hDC, pButton, rect, state);
    return;
  }

  CCustomizeButton* pCustButton = DYNAMIC_DOWNCAST(CCustomizeButton, pButton);

  if (pCustButton == NULL) {
    if (CBCGPToolBar::IsCustomizeMode() &&
        !CBCGPToolBar::IsAltCustomizeMode() && !pButton->IsLocked()) {
      return;
    }

    CBCGPControlRenderer* pRenderer = NULL;
    int index = 0;
    BOOL bDisabled = (pButton->s->m_nStyle & UIS_DISABLED) == UIS_DISABLED;
    //BOOL bPressed  = (pButton->s->m_nStyle & UIS_PUSHED ) == UIS_PUSHED;
    BOOL bChecked  = (pButton->s->m_nStyle & UIS_CHECKED) == UIS_CHECKED;
    CBCGPBaseControlBar* pBar = DYNAMIC_DOWNCAST(CBCGPBaseControlBar, pButton->GetParentWnd());
    CBCGPToolbarMenuButton* pMenuButton =
        DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);

    if (pMenuButton != NULL && pBar != NULL) {
      if (!pBar->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar)) &&
          pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar))) {
        if (bChecked) {
          pRenderer = &s->m_ctrlMenuItemBack;

          if (bDisabled) {
            index = 1;
          }

          InflateRect(&rect, 0, 0, 0, 1);
        }
        else if (state == ButtonsIsPressed || state == ButtonsIsHighlighted) {
          pRenderer = &s->m_ctrlMenuHighlighted[bDisabled ? 1 : 0];
        }
        else {
          return;
        }
      }
    }

    if (pRenderer != NULL) {
      pRenderer->Draw(hDC, rect, index);
      return;
    }
  }

  CBCGPWinXPVisualManager::OnFillButtonInterior(hDC, pButton, rect, state);
}
void CBCGPVisualManagerScenic::OnDrawRibbonMenuCheckFrame(
    HDDC hDC,
    ,
    RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawRibbonMenuCheckFrame(hDC, pButton, rect);
    return;
  }

  ASSERT(hDC);
  s->m_ctrlMenuItemBack.Draw(hDC, rect);
}
void CBCGPVisualManagerScenic::OnFillRibbonQATPopup(
    HDDC hDC, CBCGPRibbonPanelMenuBar* pMenuBar, RECT rect)
{
  if (!CanDrawImage() || !s->m_ctrlRibbonBorder_QAT.IsValid()) {
    CBCGPWinXPVisualManager::OnFillRibbonQATPopup(hDC, pMenuBar, rect);
    return;
  }

  ASSERT(hDC);
  s->m_ctrlRibbonBorder_QAT.FillInterior(hDC, rect);
}
int CBCGPVisualManagerScenic::GetRibbonPopupBorderSize(const CBCGPRibbonPanelMenu* pPopup)
{
  if (!CanDrawImage()) {
    return CBCGPWinXPVisualManager::GetRibbonPopupBorderSize(pPopup);
  }

  if (pPopup != NULL) {
    ASSERT(pPopup);
    CBCGPRibbonPanelMenuBar* pRibbonMenuBar =
        DYNAMIC_DOWNCAST(CBCGPRibbonPanelMenuBar,
            (const_cast<CBCGPRibbonPanelMenu*>(pPopup))->GetMenuBar());

    if (pRibbonMenuBar != NULL) {
      if (pRibbonMenuBar->IsMainPanel()) {
        return s->m_ctrlRibbonMainPanel.GetParams().s->m_rectSides.left;
      }

      if (!pRibbonMenuBar->IsMenuMode()) {
        if (pRibbonMenuBar->IsQATPopup()) {
          if (s->m_ctrlRibbonBorder_QAT.IsValid()) {
            return s->m_ctrlRibbonBorder_QAT.GetParams().s->m_rectSides.left;
          }
        }
        else if (pRibbonMenuBar->IsCategoryPopup()) {
          return 0;
        }
        else if (pRibbonMenuBar->IsFloaty()) {
          /*
                    if (s->m_ctrlRibbonBorder_Floaty.IsValid ())
                    {
                      return s->m_ctrlRibbonBorder_Floaty.GetParams ().s->m_rectSides.left;
                    }
          */
        }
        else {
          if (pRibbonMenuBar->GetPanel() != NULL) {
            return 0;
          }

          // standard size
        }
      }
    }
  }

  return (int)GetPopupMenuBorderSize();
}
void CBCGPVisualManagerScenic::OnDrawButtonBorder(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state)
{
  CBCGPToolbarMenuButton* pMenuButton = DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);

  if (CanDrawImage() && pMenuButton != NULL &&
      pMenuButton->GetParentWnd() != NULL &&
      pMenuButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar))) {
    return;
  }

  CBCGPWinXPVisualManager::OnDrawButtonBorder(hDC, pButton, rect, state);
}
void CBCGPVisualManagerScenic::OnFillBarBackground(HDDC hDC, CBCGPBaseControlBar* pBar,
    RECT rectClient, RECT rectClip,
    BOOL bNCArea)
{
  ASSERT(hDC);

  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnFillBarBackground(hDC, pBar, rectClient, rectClip, bNCArea);
    return;
  }

  if (IsOnGlass) {
    draw_fillrectR(hDC, &rectClient, _RGB(0, 0, 0));
    return;
  }

  if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPRibbonBar))) {

    FillGradient(hDC, rectClient, s->m_clrRibbonBarGradientDark, s->m_clrRibbonBarGradientLight, TRUE);
    return;
  }

  CBCGPWinXPVisualManager::OnFillBarBackground(hDC, pBar, rectClient, rectClip, bNCArea);
}
void CBCGPVisualManagerScenic::OnDrawStatusBarSizeBox(HDDC hDC, CBCGPStatusBar* pStatBar,
    RECT rectSizeBox)
{
  if (!CanDrawImage() || s->m_hThemeStatusBar == NULL) {
    CBCGPWinXPVisualManager::OnDrawStatusBarSizeBox(hDC, pStatBar, rectSizeBox);
    return;
  }
}
void CBCGPVisualManagerScenic::OnDrawRibbonPaletteButton(
    HDDC hDC,
    CBCGPRibbonPaletteIcon* pButton)
{
  ASSERT(hDC);


  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawRibbonPaletteButton(hDC, pButton);
    return;
  }

  int index = 0;

  if (IsDisabled) {
    index = 3;
  }
  else {
    if (IsPressed) {
      if (IsHighlighted) {
        index = 2;
      }
    }
    else if (IsHighlighted || IsFocused) {
      index = 1;
    }
  }

  int nBtn = 1;

  if (pButton->IsLast()) {
    nBtn = 2;
  }
  else if (pButton->IsFirst()) {
    nBtn = 0;
  }

  s->m_ctrlRibbonBtnPalette[nBtn].Draw(hDC, rect, index);
}
COLORREF CBCGPVisualManagerScenic::OnDrawRibbonStatusBarPane(HDDC hDC, CBCGPRibbonStatusBar* pBar,
    CBCGPRibbonStatusBarPane* pPane)
{
  ASSERT(hDC);
  ASSERT(pPane);

  if (!CanDrawImage()) {
    return CBCGPWinXPVisualManager::OnDrawRibbonStatusBarPane(hDC, pBar, pPane);
  }

  RECT rectPane = pPane->GetRect();
  const BOOL bHighlighted = pPane->IsHighlighted() || pPane->IsFocused();
  const BOOL bChecked     = pPane->IsChecked();

  if (bHighlighted || bChecked) {
    RECT rectButton = rectPane;
    rectButton DeflateRect(&, 1, 1);
    int index = 0;

    if (pPane->IsPressed()) {
      if (bHighlighted) {
        index = 1;
      }
    }
    else if (bChecked) {
      if (bHighlighted) {
        index = 0;
      }
      else {
        index = 1;
      }
    }

    s->m_ctrlRibbonBtnStatusPane.Draw(hDC, rectButton, index);
  }

  return 0;
}
void CBCGPVisualManagerScenic::OnDrawRibbonSliderZoomButton(
    HDDC hDC, CBCGPRibbonSlider* pSlider,
    RECT rect, BOOL bIsZoomOut,
    BOOL bIsHighlighted, BOOL bIsPressed, BOOL bIsDisabled)
{
  ASSERT(hDC);

  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawRibbonSliderZoomButton(hDC, pSlider, rect,
        bIsZoomOut, bIsHighlighted, bIsPressed, bIsDisabled);
    return;
  }

  CBCGPControlRenderer* pRenderer = bIsZoomOut
      ? &s->m_ctrlRibbonSliderBtnMinus
      : &s->m_ctrlRibbonSliderBtnPlus;
  int index = 0;

  if (bIsDisabled) {
    index = 3;
  }
  else {
    if (bIsPressed) {
      if (bIsHighlighted) {
        index = 2;
      }
    }
    else if (bIsHighlighted) {
      index = 1;
    }
  }

  pRenderer->FillInterior(hDC, rect,
      GetRibbonImageScale() != 1. ? CBCGPToolBarImages::ImageAlignHorzStretch : CBCGPToolBarImages::ImageAlignHorzCenter,
      GetRibbonImageScale() != 1. ? CBCGPToolBarImages::ImageAlignVertStretch : CBCGPToolBarImages::ImageAlignVertCenter,
      index);
}
void CBCGPVisualManagerScenic::OnDrawRibbonProgressBar(HDDC hDC,
    CBCGPRibbonProgressBar* pProgress,
    RECT rectProgress, RECT rectChunk,
    BOOL bInfiniteMode)
{
  if (!CanDrawImage() || s->m_hThemeProgress == NULL) {
    CBCGPWinXPVisualManager::OnDrawRibbonProgressBar(hDC, pProgress, rectProgress,
        rectChunk, bInfiniteMode);
    return;
  }
}
void CBCGPVisualManagerScenic::OnDrawDefaultRibbonImage(HDDC hDC, RECT rectImage,
    BOOL bIsDisabled/* = FALSE*/,
    BOOL bIsPressed/* = FALSE*/,
    BOOL bIsHighlighted/* = FALSE*/)
{
  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawDefaultRibbonImage(hDC, rectImage, bIsDisabled,
        bIsPressed, bIsHighlighted);
    return;
  }

  s->m_RibbonBtnDefaultImage.DrawEx(hDC, rectImage, bIsDisabled ? 1 : 0,
      CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter);
}
void CBCGPVisualManagerScenic::OnDrawRibbonMainButton(
    HDDC hDC,
)
{
  ASSERT(hDC);


  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawRibbonMainButton(hDC, pButton);
    return;
  }

  BOOL bIsHighlighted = IsHighlighted || IsFocused;
  BOOL bIsPressed = IsPressed || IsDroppedDown;

  if (IsDroppedDown) {
    bIsPressed = TRUE;
    bIsHighlighted = TRUE;
  }

  RECT rect = rect;
  int index = 0;

  if (bIsPressed) {
    if (bIsHighlighted) {
      index = 2;
    }
  }
  else if (bIsHighlighted) {
    index = 1;
  }

  s->m_ctrlRibbonBtnMain.Draw(hDC, rect, index);
}
void CBCGPVisualManagerScenic::OnDrawCheckBoxEx(HDDC hDC, RECT rect,
    int nState,
    BOOL bHighlighted,
    BOOL bPressed,
    BOOL bEnabled)
{
  if (s->m_hThemeButton == NULL) {
    CBCGPVisualManager::OnDrawCheckBoxEx(hDC, rect, nState, bHighlighted, bPressed, bEnabled);
    return;
  }

  DrawCheckBox(hDC, rect, bHighlighted, nState, bEnabled, bPressed);
}
void CBCGPVisualManagerScenic::OnDrawRadioButton(HDDC hDC, RECT rect,
    BOOL bOn,
    BOOL bHighlighted,
    BOOL bPressed,
    BOOL bEnabled)
{
  if (s->m_hThemeButton == NULL) {
    CBCGPVisualManager::OnDrawRadioButton(hDC, rect, bOn, bHighlighted, bPressed, bEnabled);
    return;
  }

  DrawRadioButton(hDC, rect, bHighlighted, bOn, bEnabled, bPressed);
}
void CBCGPVisualManagerScenic::OnDrawRibbonButtonBorder(HDDC hDC)
{
  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawRibbonButtonBorder(hDC, pButton);
    return;
  }

  if (IsRibbonEdit) {
    RECT rect(rect);
    COLORREF colorBorder = s->m_clrRibbonEditBorder;

    if (IsDisabled) {
      colorBorder = s->m_clrRibbonEditBorderDisabled;
    }
    else if (IsHighlighted || IsDroppedDown || IsFocused) {
      colorBorder = IsDroppedDown
          ? s->m_clrRibbonEditBorderPressed
          : s->m_clrRibbonEditBorderHighlighted;
    }

    rect.left = pButton->GetCommandRect().left;

    if (bIsDrawOnGlass) {

      DrawRect(hDC, rect, 0, colorBorder);
    }
    else {
      draw_3drect_inR(hDC, &rect, colorBorder, colorBorder);
    }
  }
}
void CBCGPVisualManagerScenic::OnDrawRibbonLaunchButton(
    HDDC hDC,

)
{
  ASSERT(hDC);



  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawRibbonLaunchButton(hDC, pButton, pPanel);
    return;
  }

  RECT rect(rect);
  rect.right--;
  rect.bottom--;
  BOOL bHighlighted = IsHighlighted || IsFocused;
  int index = 0;

  if (s->m_RibbonBtnLaunchIcon.GetCount() > 3) {
    if (IsDisabled) {
      index = 3;
    }
    else if (IsPressed) {
      if (bHighlighted) {
        index = 2;
      }
    }
    else if (bHighlighted) {
      index = 1;
    }
  }
  else {
    if (!IsDisabled) {
      if (IsPressed) {
        if (bHighlighted) {
          index = 2;
        }
      }
      else if (bHighlighted) {
        index = 1;
      }
    }
  }

  if (s->m_ctrlRibbonBtnLaunch.IsValid()) {
    s->m_ctrlRibbonBtnLaunch.Draw(hDC, rect, index);
  }

  if (s->m_RibbonBtnLaunchIcon.IsValid()) {
    const double dblImageScale = GetRibbonImageScale();

    if (dblImageScale == 1.) {
      s->m_RibbonBtnLaunchIcon.DrawEx(hDC, rect, index,
          CBCGPToolBarImages::ImageAlignHorzCenter, CBCGPToolBarImages::ImageAlignVertCenter);
    }
    else {
      SIZE sizeImage = s->m_RibbonBtnLaunchIcon.GetImageSize();
      sizeImage.cx = (int)(.5 + dblImageScale * sizeImage.cx);
      sizeImage.cy = (int)(.5 + dblImageScale * sizeImage.cy);
      rect.left = rect CenterPoint(&).x - sizeImage.cx / 2;
      rect.right = rect.left + sizeImage.cx;
      rect.top = rect CenterPoint(&).y - sizeImage.cy / 2;
      rect.bottom = rect.top + sizeImage.cy;
      s->m_RibbonBtnLaunchIcon.DrawEx(hDC, rect, index,
          CBCGPToolBarImages::ImageAlignHorzStretch,
          CBCGPToolBarImages::ImageAlignVertStretch);
    }
  }
}
COLORREF CBCGPVisualManagerScenic::OnFillRibbonButton(HDDC hDC)
{
  ASSERT(hDC);


  if (!CanDrawImage()) {
    return CBCGPWinXPVisualManager::OnFillRibbonButton(hDC, pButton);
  }

  const BOOL bIsMenuMode = IsMenuMode;
  RECT rect(rect);
  CBCGPControlRenderer* pRenderer = NULL;
  CBCGPBitmapCache* pCache = NULL;
  int index = 0;
  BOOL bDisabled    = IsDisabled;
  BOOL bWasDisabled = bDisabled;
  BOOL bFocused     = IsFocused;
  BOOL bDroppedDown = IsDroppedDown;
  BOOL bPressed     = IsPressed && !bIsMenuMode;
  BOOL bChecked     = IsChecked;
  BOOL bHighlighted = IsHighlighted || bFocused;
  BOOL bDefaultPanelButton = pButton->IsDefaultPanelButton() && !IsQATMode;

  if (bFocused) {
    bDisabled = FALSE;
  }

  if (IsDroppedDown && !bIsMenuMode) {
    bChecked     = TRUE;
    bPressed     = FALSE;
    bHighlighted = FALSE;
  }

  CBCGPBaseRibbonElement::RibbonElementLocation location =
      pButton->GetLocationInGroup();

  if (IsRibbonEdit) {
    COLORREF color1 = s->m_clrRibbonEdit;

    if (bDisabled) {
      color1 = s->m_clrRibbonEditDisabled;
    }
    else if (bChecked || bHighlighted) {
      color1 = s->m_clrRibbonEditHighlighted;
    }

    COLORREF color2 = color1;
    rect.left = pButton->GetCommandRect().left;
    {

      FillGradient(hDC, rect, color1, color2, TRUE);
    }
    return 0;
  }

  if (bChecked && bIsMenuMode && !pButton->IsPaletteIcon()) {
    bChecked = FALSE;
  }

  if (location != CBCGPBaseRibbonElement::RibbonElementNotInGroup &&
      pButton->IsShowGroupBorder()) {
    if (!pButton->GetMenuRect().IsRectEmpty()) {
      RECT rectC = pButton->GetCommandRect();
      RECT rectM = pButton->GetMenuRect();
      CBCGPControlRenderer* pRendererC = NULL;
      CBCGPControlRenderer* pRendererM = NULL;
      CBCGPBitmapCache* pCacheC = NULL;
      CBCGPBitmapCache* pCacheM = NULL;

      if (location == CBCGPBaseRibbonElement::RibbonElementSingleInGroup) {
        pRendererC = &s->m_ctrlRibbonBtnGroupMenu_F[0];
        pRendererM = &s->m_ctrlRibbonBtnGroupMenu_L[1];
        pCacheC = &s->m_cacheRibbonBtnGroupMenu_F[0];
        pCacheM = &s->m_cacheRibbonBtnGroupMenu_L[1];
      }
      else if (location == CBCGPBaseRibbonElement::RibbonElementFirstInGroup) {
        pRendererC = &s->m_ctrlRibbonBtnGroupMenu_F[0];
        pRendererM = &s->m_ctrlRibbonBtnGroupMenu_F[1];
        pCacheC = &s->m_cacheRibbonBtnGroupMenu_F[0];
        pCacheM = &s->m_cacheRibbonBtnGroupMenu_F[1];
      }
      else if (location == CBCGPBaseRibbonElement::RibbonElementLastInGroup) {
        pRendererC = &s->m_ctrlRibbonBtnGroupMenu_L[0];
        pRendererM = &s->m_ctrlRibbonBtnGroupMenu_L[1];
        pCacheC = &s->m_cacheRibbonBtnGroupMenu_L[0];
        pCacheM = &s->m_cacheRibbonBtnGroupMenu_L[1];
      }
      else {
        pRendererC = &s->m_ctrlRibbonBtnGroupMenu_M[0];
        pRendererM = &s->m_ctrlRibbonBtnGroupMenu_M[1];
        pCacheC = &s->m_cacheRibbonBtnGroupMenu_M[0];
        pCacheM = &s->m_cacheRibbonBtnGroupMenu_M[1];
      }

      int indexC = 0;
      int indexM = 0;
      BOOL bHighlightedC = pButton->IsCommandAreaHighlighted();
      BOOL bHighlightedM = pButton->IsMenuAreaHighlighted();

      if (bChecked) {
        indexC = 3;

        if (bHighlighted) {
          indexM = 5;
        }
      }

      if (bDisabled) {
        if (bChecked) {
          indexC = 5;
          indexM = 4;
        }
      }
      else {
        if (IsDroppedDown && !bIsMenuMode) {
          indexC = IsChecked ? 3 : 6;
          indexM = 3;
        }
        else {
          if (bFocused) {
            indexC = 6;
            indexM = 5;
          }

          if (bHighlightedC || bHighlightedM) {
            if (bChecked) {
              indexC = bHighlightedC ? 4 : 3;
            }
            else {
              indexC = bHighlightedC ? 1 : 6;
            }

            indexM = bHighlightedM ? 1 : 5;
          }

          if (bPressed) {
            if (bHighlightedC) {
              indexC = 2;
            }
          }
        }
      }

      if (indexC != -1 && indexM != -1) {
        int nCacheIndex = -1;

        if (pCacheC != NULL) {
          SIZE size(rectC.Size());
          nCacheIndex = pCacheC->FindIndex(size);

          if (nCacheIndex == -1) {
            nCacheIndex = pCacheC->Cache(size, *pRendererC);
          }
        }

        if (nCacheIndex != -1) {
          pCacheC->Get(nCacheIndex)->Draw(hDC, rectC, indexC);
        }
        else {
          pRendererC->Draw(hDC, rectC, indexC);
        }

        nCacheIndex = -1;

        if (pCacheM != NULL) {
          SIZE size(rectM.Size());
          nCacheIndex = pCacheM->FindIndex(size);

          if (nCacheIndex == -1) {
            nCacheIndex = pCacheM->Cache(size, *pRendererM);
          }
        }

        if (nCacheIndex != -1) {
          pCacheM->Get(nCacheIndex)->Draw(hDC, rectM, indexM);
        }
        else {
          pRendererM->Draw(hDC, rectM, indexM);
        }
      }

      return 0;
    }
    else {
      if (location == CBCGPBaseRibbonElement::RibbonElementSingleInGroup) {
        pRenderer = &s->m_ctrlRibbonBtnGroup_S;
        pCache    = &s->m_cacheRibbonBtnGroup_S;
      }
      else if (location == CBCGPBaseRibbonElement::RibbonElementFirstInGroup) {
        pRenderer = &s->m_ctrlRibbonBtnGroup_F;
        pCache    = &s->m_cacheRibbonBtnGroup_F;
      }
      else if (location == CBCGPBaseRibbonElement::RibbonElementLastInGroup) {
        pRenderer = &s->m_ctrlRibbonBtnGroup_L;
        pCache    = &s->m_cacheRibbonBtnGroup_L;
      }
      else {
        pRenderer = &s->m_ctrlRibbonBtnGroup_M;
        pCache    = &s->m_cacheRibbonBtnGroup_M;
      }

      if (bChecked) {
        index = 3;
      }

      if (bDisabled && !bFocused) {
        index = 0;
      }
      else {
        if (bPressed) {
          if (bHighlighted) {
            index = 2;
          }
        }
        else if (bHighlighted) {
          index++;
        }
      }
    }
  }
  else if (bDefaultPanelButton) {
    if (bPressed) {
      if (bHighlighted) {
        index = 2;
      }
    }
    else if (bHighlighted) {
      index = 1;
    }
    else if (bChecked) {
      index = 2;
    }

    if (bFocused && !bDroppedDown && s->m_ctrlRibbonBtnDefault.GetImageCount() > 3) {
      index = 3;
    }

    if (index != -1) {
      pRenderer = &s->m_ctrlRibbonBtnDefault;
      CBCGPBitmapCache* pCache = &s->m_cacheRibbonBtnDefault;
      CBCGPRibbonCategory* pCategory = pButton->GetParentCategory();

      if (pCategory != NULL) {

        /*
                if (pCategory->GetTabColor () != BCGPCategoryColor_None)
                {
                  XRibbonContextCategory& context =
                    s->m_ctrlRibbonContextCategory[pCategory->GetTabColor () - 1];
                  pRenderer = &context.s->m_ctrlBtnDefault;
                  pCache    = &context.s->m_cacheBtnDefault;
                }
        */
      }

      const CBCGPControlRendererParams& params = pRenderer->GetParams();
      int nCacheIndex = -1;

      if (pCache != NULL) {
        SIZE size(params.s->m_rectImage RCW(&), RCH(&rect));
        nCacheIndex = pCache->FindIndex(size);

        if (nCacheIndex == -1) {
          nCacheIndex = pCache->CacheY(size.cy, *pRenderer);
        }
      }

      if (nCacheIndex != -1) {
        pCache->Get(nCacheIndex)->DrawY(hDC, rect,
            SIZE(params.s->m_rectInter.left, params.s->m_rectImage.right - params.s->m_rectInter.right),
            index);
        return globalData.clrBtnText;
      }
    }
  }
  else if ((!bDisabled && (bPressed || bChecked || bHighlighted)) ||
      (bDisabled && bFocused)) {
    if (!pButton->GetMenuRect().IsRectEmpty()/* &&
      (pButton->IsHighlighted () || bChecked)*/) {
      RECT rectC = pButton->GetCommandRect();
      RECT rectM = pButton->GetMenuRect();
      CBCGPControlRenderer* pRendererC = IsMenuOnBottom
          ? &s->m_ctrlRibbonBtnMenuV[0]
          : &s->m_ctrlRibbonBtnMenuH[0];
      CBCGPControlRenderer* pRendererM = IsMenuOnBottom
          ? &s->m_ctrlRibbonBtnMenuV[1]
          : &s->m_ctrlRibbonBtnMenuH[1];
      int indexC = -1;
      int indexM = -1;
      BOOL bDropped      = IsDroppedDown;
      BOOL bHighlightedC = pButton->IsCommandAreaHighlighted();
      BOOL bHighlightedM = pButton->IsMenuAreaHighlighted();

      if (bDisabled) {
        if (bHighlightedC || bHighlightedM) {
          indexC = 4;
          indexM = 4;

          if (bHighlightedM) {
            indexM = 0;

            if (bDropped && !bIsMenuMode) {
              indexC = 5;
              indexM = 2;
            }
            else if (bPressed) {
              indexM = 1;
            }
          }
        }
      }
      else {
        if (bDropped && !bIsMenuMode) {
          indexC = 5;
          indexM = 2;
        }
        else {
          if (bFocused) {
            indexC = 5;
            indexM = 4;
          }

          if (bChecked) {
            indexC = 2;
            indexM = 2;
          }

          if (bHighlightedC || bHighlightedM) {
            indexM = 4;

            if (bPressed) {
              if (bHighlightedC) {
                indexC = 1;
              }
              else if (bHighlightedM) {
                indexC = bChecked ? 3 : 5;
              }
            }
            else {
              indexC = bChecked ? 3 : 0;

              if (bHighlightedM) {
                indexC = bChecked ? 3 : 5;
                indexM = 0;
              }
            }
          }
        }
      }

      if (indexC != -1) {
        pRendererC->Draw(hDC, rectC, indexC);
      }

      if (indexM != -1) {
        pRendererM->Draw(hDC, rectM, indexM);
      }

      return 0;
    }
    else {
      index = -1;
      pRenderer = &s->m_ctrlRibbonBtn[0];

      if (RCH(&rect) > pRenderer->GetParams().s->m_rectImage RCH(&) * 1.5 &&
          s->m_ctrlRibbonBtn[1].IsValid()) {
        pRenderer = &s->m_ctrlRibbonBtn[1];
      }

      if (bDisabled && bFocused) {
        if (pRenderer->GetImageCount() > 4) {
          index = 4;
        }
        else {
          index = 0;
        }
      }

      if (!bDisabled) {
        if (bChecked) {
          index = 2;
        }

        if (bPressed) {
          if (bHighlighted) {
            index = 1;
          }
        }
        else if (bHighlighted) {
          index++;
        }
      }
    }
  }

  COLORREF clrText = bWasDisabled
      ? globalData.clrGrayedText
      : COLORREF(-1);

  if (pRenderer != NULL) {
    if (index != -1) {
      int nCacheIndex = -1;

      if (pCache != NULL) {
        SIZE size(rect.Size());
        nCacheIndex = pCache->FindIndex(size);

        if (nCacheIndex == -1) {
          nCacheIndex = pCache->Cache(size, *pRenderer);
        }
      }

      if (nCacheIndex != -1) {
        pCache->Get(nCacheIndex)->Draw(hDC, rect, index);
      }
      else {
        pRenderer->Draw(hDC, rect, index);
      }

      if (!bWasDisabled) {
        clrText = globalData.clrBtnText;
      }
    }
  }

  return clrText;
}
void CBCGPVisualManagerScenic::OnDrawRibbonDefaultPaneButton(
    HDDC hDC,
)
{
  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawRibbonDefaultPaneButton(hDC, pButton);
    return;
  }

  ASSERT(hDC);

  OnFillRibbonButton(hDC, pButton);
  BOOL bIsQATMode = IsQATMode;
  RECT rectFrame(rect);

  if (!bIsQATMode) {
    if (s->m_ctrlRibbonBtnDefaultIcon.IsValid()) {
      const SIZE sizeImage = pButton->GetImageSize(RibbonImageSmall);
      const int nMarginX = 11;
      const int nMarginY = 10;
      rectFrame.top += nMarginY / 2;
      rectFrame.bottom = rectFrame.top + sizeImage.cy + 2 * nMarginY;
      rectFrame.top -= 2;
      rectFrame.left = rectFrame CenterPoint(&).x - sizeImage.cx / 2 - nMarginX;
      rectFrame.right = rectFrame.left + sizeImage.cx + 2 * nMarginX;
      s->m_ctrlRibbonBtnDefaultIcon.Draw(hDC, rectFrame);
    }
  }
  else {
    if (s->m_ctrlRibbonBtnDefaultQAT.IsValid()) {
      int index = 0;

      if (IsDroppedDown) {
        index = 2;
      }
      else if (IsPressed) {
        if (IsHighlighted) {
          index = 2;
        }
      }
      else if (IsHighlighted || IsFocused) {
        index = 1;
      }

      s->m_ctrlRibbonBtnDefaultQAT.Draw(hDC, rectFrame, index);
    }
  }

  OnDrawRibbonDefaultPaneButtonContext(hDC, pButton);
}
void CBCGPVisualManagerScenic::OnDrawRibbonRecentFilesFrame(
    HDDC hDC,
    CBCGPRibbonMainPanel* pPanel,
    RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawRibbonRecentFilesFrame(hDC,
        pPanel, rect);
    return;
  }

  ASSERT(hDC);
  rect.right += 2; //TODO
  draw_fillrectR(hDC, &rect, &s->m_clrRibbonBarBkgnd);
  RECT rectSeparator = rect;
  rectSeparator.right = rectSeparator.left + 2;
  draw_3drect_inR(hDC, &rectSeparator, globalData.clrBtnShadow,
      globalData.clrBtnHilite);
}
BOOL CBCGPVisualManagerScenic::IsWindowActive(CWnd* pWnd)
{
  BOOL bActive = FALSE;
  HWND hWnd = pWnd->GetSafeHwnd();

  if (hWnd != NULL) {
    if (!s->m_ActivateFlag.Lookup(pWnd->GetSafeHwnd(), bActive)) {
      //ASSERT(FALSE);
      bActive = TRUE;
    }
  }

  return bActive;
}
BOOL CBCGPVisualManagerScenic::OnNcActivate(CWnd* pWnd, BOOL bActive)
{
  ASSERT(pWnd);

  if (pWnd->GetSafeHwnd() == NULL) {
    return FALSE;
  }

  if (globalData.DwmIsCompositionEnabled()) {
    return FALSE;
  }

  // stay active if WF_STAYACTIVE bit is on
  if (pWnd->s->m_nFlags & WF_STAYACTIVE) {
    bActive = TRUE;
  }

  // but do not stay active if the window is disabled
  if (!pWnd->IsWindowEnabled()) {
    bActive = FALSE;
  }

  BOOL bIsMDIFrame = FALSE;
  BOOL bWasActive = FALSE;

  // If the active state of an owner-draw MDI frame window changes, we need to
  // invalidate the MDI client area so the MDI child window captions are redrawn.
  if (IsOwnerDrawCaption()) {
    bIsMDIFrame = pWnd->IsKindOf(RUNTIME_CLASS(CMDIFrameWnd));
    bWasActive = IsWindowActive(pWnd);
  }

  s->m_ActivateFlag[pWnd->GetSafeHwnd()] = bActive;
  pWnd->SendMessage(Ws->m_NCPAINT, 0, 0);

  if (IsOwnerDrawCaption()) {
    if (bIsMDIFrame && (bWasActive != bActive)) {
      ::RedrawWindow(((CMDIFrameWnd*)pWnd)->s->m_hWndMDIClient, NULL, NULL, RDW_INVALIDATE | RDW_ALLCHILDREN);
    }
  }

  return TRUE;
}
SIZE CBCGPVisualManagerScenic::GetSystemBorders(BOOL bRibbonPresent)
{
  SIZE size(GetSystemMetrics(Ss->m_CYSIZEFRAME), GetSystemMetrics(Ss->m_CXSIZEFRAME));

  if (bRibbonPresent) {
    size.cx--;
    size.cy--;
  }

  return size;
}
void CBCGPVisualManagerScenic::OnDrawComboDropButton(HDDC hDC, RECT rect,
    BOOL bDisabled,
    BOOL bIsDropped,
    BOOL bIsHighlighted,
    CBCGPToolbarComboBoxButton* pButton)
{
  if (!CanDrawImage() || !pButton->IsRibbonButton()) {
    CBCGPWinXPVisualManager::OnDrawComboDropButton(hDC, rect, bDisabled, bIsDropped, bIsHighlighted, pButton);
    return;
  }

  InflateRect(&rect, 0, 1, 1, 1);
  int nIndex = 0;

  if (bDisabled) {
    nIndex = 3;
  }
  else {
    if (bIsDropped) {
      nIndex = 2;
    }
    else if (bIsHighlighted) {
      nIndex = 1;
    }
  }

  s->m_ctrlRibbonComboBoxBtn.Draw(hDC, rect, nIndex);
  DeflateRect(&rect, 0, 1, 1, 1);
  rect.bottom -= 2;
  DrawMenuImages(hDC, IdArowDown, rect,
      bDisabled
      ? ImageGray
      : ImageBlack);
}
CBCGPRibbonBar* CBCGPVisualManagerScenic::GetRibbonBar(CWnd* pWnd)
{
  CBCGPRibbonBar* pBar = NULL;

  if (pWnd == NULL) {
    pWnd = AfxGetMainWnd();
  }

  if (pWnd->GetSafeHwnd() == NULL) {
    return NULL;
  }

  if (pWnd->IsKindOf(RUNTIME_CLASS(CBCGPFrameWnd))) {
    pBar = ((CBCGPFrameWnd*) pWnd)->GetRibbonBar();
  }
  else if (pWnd->IsKindOf(RUNTIME_CLASS(CBCGPMDIFrameWnd))) {
    pBar = ((CBCGPMDIFrameWnd*) pWnd)->GetRibbonBar();
  }

  return pBar;
}
BOOL CBCGPVisualManagerScenic::IsRibbonPresent(CWnd* pWnd)
{
  CBCGPRibbonBar* pBar = GetRibbonBar(pWnd);
  return pBar != NULL && pBar->IsWindowVisible();
}
COLORREF CBCGPVisualManagerScenic::GetRibbonEditBackgroundColor(
    CBCGPRibbonEditCtrl* pEdit,
    BOOL bIsHighlighted,
    BOOL bIsPaneHighlighted,
    BOOL bIsDisabled)
{
  if (!CanDrawImage()) {
    return CBCGPWinXPVisualManager::GetRibbonEditBackgroundColor(
        pEdit, bIsHighlighted, bIsPaneHighlighted, bIsDisabled);
  }

  COLORREF color = s->m_clrRibbonEdit;

  if (bIsDisabled) {
    color = s->m_clrRibbonEditDisabled;
  }
  else {
    if (bIsHighlighted) {
      color = s->m_clrRibbonEditHighlighted;
    }
  }

  return color;
}
void CBCGPVisualManagerScenic::OnDrawRibbonPaletteBorder(
    HDDC hDC,
    CBCGPRibbonPaletteButton* pButton,
    RECT rectBorder)
{
  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnDrawRibbonPaletteBorder(hDC, pButton, rectBorder);
    return;
  }

  rectBorder.right -= 5;
  ASSERT(hDC);
  draw_3drect_inR(hDC, &rectBorder, s->m_clrRibbonEditBorder, s->m_clrRibbonEditBorder);
}
COLORREF CBCGPVisualManagerScenic::OnDrawMenuLabel(HDDC hDC, RECT rect)
{
  if (!CanDrawImage()) {
    return CBCGPWinXPVisualManager::OnDrawMenuLabel(hDC, rect);
  }

  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, &s->m_clrRibbonBarBkgnd);
  RECT rectSeparator = rect;
  rectSeparator.top = rectSeparator.bottom - 2;
  DrawSeparator(hDC, rectSeparator, s->m_penSeparatorDark, s->m_penSeparatorLight, TRUE);
  return globalData.clrBtnText;
}
void CBCGPVisualManagerScenic::OnFillPopupMenuBackground(HDDC hDC, RECT rect)
{
  if (!CanDrawImage()) {
    CBCGPWinXPVisualManager::OnFillPopupMenuBackground(hDC, rect);
    return;
  }

  COLORREF br = (_RGB(255, 255, 255));
  draw_fillrectR(hDC, &rect, br);
}
BOOL CBCGPVisualManagerVS2005::s->m_bRoundedAutohideButtons = FALSE;
IMPLEMENT_DYNCREATE(CBCGPVisualManagerVS2005, CBCGPVisualManager2003)
//
// Construction/Destruction
//
CBCGPVisualManagerVS2005::CBCGPVisualManagerVS2005()
{
  s->m_bAlwaysFillTab = TRUE;
  s->m_b3DTabWideBorder = FALSE;
  s->m_bShdowDroppedDownMenuButton = TRUE;
  s->m_bDrawLastTabLine = FALSE;
  s->m_colorActiveTabBorder = 0;
  s->m_bFrameMenuCheckedItems = TRUE;
  CBCGPDockManager::EnableDockBarMenu();
  CBCGPDockManager::SetDockMode(BCGP_DT_SMART);
  CBCGPAutoHideButton::s->m_bOverlappingTabs = FALSE;
}

void CBCGPVisualManagerVS2005::OnUpdateSystemColors()
{
  BOOL bDefaultWinXPColors = s->m_bDefaultWinXPColors;
  s->m_clrPressedButtonBorder = 0;
  s->m_CurrAppTheme = GetStandardWinXPTheme();

  if (s->m_CurrAppTheme != WinXpTheme_Silver) {
    s->m_bDefaultWinXPColors = FALSE;
  }

  CBCGPVisualManager2003::OnUpdateSystemColors();

  if (!bDefaultWinXPColors) {
    return;
  }

  COLORREF clrMenuButtonDroppedDown = s->m_clrBtnBkgnd;
  COLORREF clrMenuItemCheckedHighlight = s->m_clrHighlightDn;

  if (s->m_hThemeComboBox == NULL ||
      s->m_pfGetThemeColor == NULL ||
      (*s->m_pfGetThemeColor)(s->m_hThemeComboBox, 5, 0, 3801, &s->m_colorActiveTabBorder) != S_OK) {
    s->m_colorActiveTabBorder = 0;
  }

  if (globalData.m_nBitsPerPixel > 8 && !globalData.IsHighContastMode()) {
    s->m_clrCustomizeButtonGradientLight = SmartMixColors(
        s->m_clrCustomizeButtonGradientDark,
        globalData.clrBtnFace, 1.5, 1, 1);

    if (s->m_CurrAppTheme == WinXpTheme_Blue ||
        s->m_CurrAppTheme == WinXpTheme_Olive) {
      s->m_clrToolBarGradientDark = PixelAlpha(
          s->m_clrToolBarGradientDark, 83);
      s->m_clrToolBarGradientLight = SmartMixColors(
          GetBaseThemeColor(),
          GetThemeColor(s->m_hThemeWindow, COLOR_WINDOW),
          1., 3, 2);
    }
    else if (!s->m_bIsStandardWinXPTheme) {
      s->m_clrToolBarGradientLight = SmartMixColors(
          s->m_clrToolBarGradientLight,
          globalData.clrBtnHilite,
          1.05, 1, 1);
    }

    if (s->m_CurrAppTheme == WinXpTheme_Blue) {
      s->m_clrCustomizeButtonGradientDark = PixelAlpha(
          s->m_clrCustomizeButtonGradientDark, 90);
      s->m_clrCustomizeButtonGradientLight = PixelAlpha(
          s->m_clrCustomizeButtonGradientLight, 115);
      s->m_clrToolBarBottomLine = PixelAlpha(
          s->m_clrToolBarBottomLine, 85);
    }
    else if (s->m_CurrAppTheme == WinXpTheme_Olive) {
      s->m_clrToolBarBottomLine = PixelAlpha(
          s->m_clrToolBarBottomLine, 110);
      s->m_clrCustomizeButtonGradientDark = s->m_clrToolBarBottomLine;
      s->m_clrCustomizeButtonGradientLight = PixelAlpha(
          s->m_clrCustomizeButtonGradientLight, 120);
      s->m_clrHighlightDn = globalData.clrHilite;
      s->m_clrHighlight = PixelAlpha(
          s->m_clrHighlightDn, 124);
      s->m_clrHighlightChecked = PixelAlpha(
          GetThemeColor(s->m_hThemeWindow, 27 /*COLOR_GRADIENTACTIVECAPTION*/), 98);
      s->m_clrHighlight.DeleteObject();
      s->m_clrHighlightDn.DeleteObject();
      s->m_clrHighlight.CreateSolidBrush(s->m_clrHighlight);
      s->m_clrHighlightDn.CreateSolidBrush(s->m_clrHighlightDn);
      s->m_clrHighlightChecked.DeleteObject();
      s->m_clrHighlightChecked.CreateSolidBrush(s->m_clrHighlightChecked);
      s->m_clrHighlightGradientDark = s->m_clrHighlightChecked;
      s->m_clrHighlightGradientLight = PixelAlpha(
          s->m_clrHighlightGradientDark, 120);
    }
    else if (s->m_CurrAppTheme != WinXpTheme_Silver) {
      s->m_clrToolBarBottomLine = s->m_clrToolBarGradientDark;
    }

    clrMenuButtonDroppedDown = PixelAlpha(
        s->m_clrBtnBkgnd, 107);
    clrMenuItemCheckedHighlight = GetThemeColor(s->m_hThemeWindow, COLOR_HIGHLIGHT);

    if (s->m_CurrAppTheme == WinXpTheme_Blue ||
        s->m_CurrAppTheme == WinXpTheme_Olive) {
      s->m_clrBtnGradientLight = PixelAlpha(
          s->m_clrToolBarGradientLight, 95);
      s->m_clrBtnGradientDark = PixelAlpha(
          s->m_clrBtnGradientDark, 97);
    }

    s->m_clrToolbarDisabled = SmartMixColors(
        s->m_clrToolBarGradientDark, s->m_clrToolBarGradientLight,
        .92, 1, 2);
    s->m_clrPressedButtonBorder = SmartMixColors(
        s->m_clrMenuItemBorder,
        globalData.clrBtnDkShadow,
        .8, 1, 2);
  }

  s->m_clrMenuButtonDroppedDown.DeleteObject();
  s->m_clrMenuButtonDroppedDown.CreateSolidBrush(clrMenuButtonDroppedDown);
  s->m_clrMenuItemCheckedHighlight.DeleteObject();
  s->m_clrMenuItemCheckedHighlight.CreateSolidBrush(clrMenuItemCheckedHighlight);
  s->m_penActiveTabBorder.DeleteObject();

  if (s->m_colorActiveTabBorder != 0) {
    s->m_penActiveTabBorder.CreatePen = (s->m_colorActiveTabBorder);
  }

  s->m_bDefaultWinXPColors = bDefaultWinXPColors;
  s->m_clrInactiveTabText = globalData.clrBtnDkShadow;

  if (globalData.m_nBitsPerPixel > 8 && !globalData.IsHighContastMode()) {
    s->m_penSeparator.DeleteObject();
    COLORREF clrSeparator = PixelAlpha(
        globalData.clrBtnFace, 84);
    s->m_penSeparator.CreatePen = (clrSeparator);
  }
}
COLORREF CBCGPVisualManagerVS2005::OnDrawControlBarCaption(HDDC hDC, CBCGPDockingControlBar* pBar,
    BOOL bActive, RECT rectCaption, RECT rectButtons)
{
  ASSERT(hDC);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    return CBCGPVisualManagerXP::OnDrawControlBarCaption(hDC, pBar,
        bActive, rectCaption, rectButtons);
  }

  rectCaption.bottom++;
  COLORREF clrFill;

  if (!bActive) {
    if (s->m_CurrAppTheme == WinXpTheme_Blue ||
        s->m_CurrAppTheme == WinXpTheme_Olive ||
        s->m_CurrAppTheme == WinXpTheme_Silver) {
      clrFill = PixelAlpha(s->m_clrBtnGradientDark, 87);
      COLORREF brFill(clrFill);
      draw_fillrectR(hDC, &rectCaption, brFill);
      draw_3drect_inR(hDC, &rectCaption, globalData.clrBtnShadow, globalData.clrBtnShadow);
    }
    else {
      COLORREF brFill(globalData.clrInactiveCaption);
      draw_fillrectR(hDC, &rectCaption, brFill);
      return globalData.clrInactiveCaptionText;
    }
  }
  else {
    if (s->m_CurrAppTheme == WinXpTheme_Blue ||
        s->m_CurrAppTheme == WinXpTheme_Olive ||
        s->m_CurrAppTheme == WinXpTheme_Silver) {
      COLORREF clrLight =
          PixelAlpha(globalData.clrHilite, 130);

      FillGradient(hDC, rectCaption, globalData.clrHilite, clrLight, TRUE);
      return globalData.clrTextHilite;
    }
    else {
      draw_fillrectR(hDC, &rectCaption, globalData.clrActiveCaption);
      return globalData.clrCaptionText;
    }
  }

  if (GetRValue(clrFill) <= 192 &&
      GetGValue(clrFill) <= 192 &&
      GetBValue(clrFill) <= 192) {
    return _RGB(255, 255, 255);
  }
  else {
    return _RGB(0, 0, 0);
  }
}
void CBCGPVisualManagerVS2005::OnDrawCaptionButton(HDDC hDC, CBCGPCaptionButton* pButton,
    BOOL bActive, BOOL bHorz, BOOL bMaximized, BOOL bDisabled,
    int nImageID /*= -1*/)
{
  ASSERT(hDC);


  if (bActive || pButton->IsMiniFrameButton()) {
    CBCGPVisualManagerXP::OnDrawCaptionButton(hDC, pButton, bActive, bHorz, bMaximized, bDisabled, nImageID);
    return;
  }

  RECT rc = rect;
  const BOOL bHighlight =
      (bPushed || bFocused) && !bDisabled;

  if (bHighlight) {
    draw_fillrectR(hDC, &rc, globalData.clrBtnFace);
  }

  int id =  - 1;

  if (nImageID != -1) {
    id = nImageID;
  }
  else {
    id = pButton->GetIconID(bHorz, bMaximized);
  }

  if (id !=  - 1) {
    SIZE sizeImage = CBCGPMenuImages::Size();
    POINT ptImage(rc.left + (rc RCW(&) - sizeImage.cx) / 2,
        rc.top + (rc RCH(&) - sizeImage.cy) / 2);
    OnDrawCaptionButtonIcon(hDC, pButton, id, bActive, bDisabled, ptImage);
  }

  if (bHighlight) {
    draw_3drect_inR(hDC, &rc, globalData.clrBtnDkShadow, globalData.clrBtnDkShadow);
  }
}
void CBCGPVisualManagerVS2005::OnEraseTabsArea(HDDC hDC, RECT rect,
    const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(hDC);
  ASSERT(pTabWnd);

  if (pTabWnd->IsFlatTab() || globalData.m_nBitsPerPixel <= 8 ||
      globalData.IsHighContastMode()) {
    CBCGPVisualManagerXP::OnEraseTabsArea(hDC, rect, pTabWnd);
    return;
  }

  if (IsOneNoteStyle || IsVS2005Style) {
    if (pTabWnd->IsDialogControl()) {
      if (pTabWnd->IsVisualManagerStyle()) {
        OnFillDialog(hDC, pTabWnd->GetParent(), rect);
      }
      else {
        draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
      }
    }
    else {
      draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
    }
  }
  else {
    CBCGPBaseControlBar* pParentBar = DYNAMIC_DOWNCAST(CBCGPBaseControlBar,
        pTabWnd->GetParent());

    if (pParentBar == NULL) {
      draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
    }
    else {
      RECT rectScreen = globalData.m_rectVirtual;
      pTabWnd->ScreenToClient(&rectScreen);
      RECT rectFill = rect;
      rectFill.left = MIN(rectFill.left, rectScreen.left);
      OnFillBarBackground(hDC, pParentBar, rectFill, rect);
    }
  }
}
void CBCGPVisualManagerVS2005::OnDrawTab(HDDC hDC, RECT rectTab,
    int iTab, BOOL bIsActive, const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(pTabWnd);
  ASSERT(hDC);

  if (pTabWnd->IsFlatTab() || IsOneNoteStyle ||
      IsVS2005Style) {
    COLORREF  pOldPen = NULL;

    if (bIsActive && IsVS2005Style &&
        s->m_penActiveTabBorder != NULL) {
      _clr = (&s->m_penActiveTabBorder);
    }

    CBCGPVisualManager2003::OnDrawTab(hDC, rectTab, iTab, bIsActive, pTabWnd);

    if (pOldPen != NULL) {

    }

    return;
  }

  COLORREF clrTab = pTabWnd->GetTabBkColor(iTab);
  COLORREF clrTextOld = 0;

  if (bIsActive && clrTab == 0) {
    clrTextOld = hDC->SetTextColor(globalData.clrWindowText);
    ((CBCGPBaseTabWnd*)pTabWnd)->SetTabBkColor(iTab, globalData.clrWindow);
  }

  CBCGPVisualManagerXP::OnDrawTab(hDC, rectTab, iTab, bIsActive, pTabWnd);
  ((CBCGPBaseTabWnd*)pTabWnd)->SetTabBkColor(iTab, clrTab);

  if (clrTextOld != 0) {

  }
}
int CBCGPVisualManagerVS2005::CreateAutoHideButtonRegion(RECT rect,
    DWORD dwAlignment, LPPOINT& points)
{
  switch (dwAlignment & CBRS_ALIGN_ANY) {
  case CBRS_ALIGN_LEFT:
    rect.right--;
    break;

  case CBRS_ALIGN_TOP:
    rect.bottom--;
    break;
  }

  RECT rectOrign = rect;
  DWORD dwAlignmentOrign = dwAlignment;

  if ((dwAlignment & CBRS_ALIGN_ANY) == CBRS_ALIGN_LEFT ||
      (dwAlignment & CBRS_ALIGN_ANY) == CBRS_ALIGN_RIGHT) {
    rect = RECT(0, 0, rectOrign RCH(&), rectOrign RCW(&));
    dwAlignment = (dwAlignment == CBRS_ALIGN_LEFT) ? CBRS_ALIGN_TOP : CBRS_ALIGN_BOTTOM;
  }

  CList<POINT, POINT> pts;

  if (!s->m_bRoundedAutohideButtons) {
    rect.right--;
    pts.AddHead(cPOINT(rect.left, rect.top));
    pts.AddHead(cPOINT(rect.left, rect.bottom - 2));
    pts.AddHead(cPOINT(rect.left + 2, rect.bottom));
    pts.AddHead(cPOINT(rect.right - 2, rect.bottom));
    pts.AddHead(cPOINT(rect.right, rect.bottom - 2));
    pts.AddHead(cPOINT(rect.right, rect.top));
  }
  else {
    POSITION posLeft = pts.AddHead(cPOINT(rect.left, rect.top));
    posLeft = pts.InsertAfter(posLeft, cPOINT(rect.left, rect.top + 2));
    POSITION posRight = pts.AddTail(cPOINT(rect.right, rect.top));
    posRight = pts.InsertBefore(posRight, cPOINT(rect.right, rect.top + 2));
    int xLeft = rect.left + 1;
    int xRight = rect.right - 1;
    int y = 0;
    BOOL bIsHorz =
        (dwAlignmentOrign & CBRS_ALIGN_ANY) == CBRS_ALIGN_LEFT ||
        (dwAlignmentOrign & CBRS_ALIGN_ANY) == CBRS_ALIGN_RIGHT;

    for (y = rect.top + 2; y < rect.bottom - 4; y += 2) {
      posLeft = pts.InsertAfter(posLeft, cPOINT(xLeft, y));
      posLeft = pts.InsertAfter(posLeft, cPOINT(xLeft, y + 2));
      posRight = pts.InsertBefore(posRight, cPOINT(xRight, y));
      posRight = pts.InsertBefore(posRight, cPOINT(xRight, y + 2));
      xLeft++;
      xRight--;
    }

    if ((dwAlignmentOrign & CBRS_ALIGN_ANY) == CBRS_ALIGN_BOTTOM && !bIsHorz) {
      xLeft--;
      xRight++;
    }

    if (bIsHorz) {
      xRight++;
    }

    for (; y < rect.bottom - 1; y++) {
      posLeft = pts.InsertAfter(posLeft, cPOINT(xLeft, y));
      posLeft = pts.InsertAfter(posLeft, cPOINT(xLeft + 1, y + 1));
      posRight = pts.InsertBefore(posRight, cPOINT(xRight, y));
      posRight = pts.InsertBefore(posRight, cPOINT(xRight - 1, y + 1));

      if (y == rect.bottom - 2) {
        posLeft = pts.InsertAfter(posLeft, cPOINT(xLeft + 1, y + 1));
        posLeft = pts.InsertAfter(posLeft, cPOINT(xLeft + 3, y + 1));
        posRight = pts.InsertBefore(posRight, cPOINT(xRight, y + 1));
        posRight = pts.InsertBefore(posRight, cPOINT(xRight - 2, y + 1));
      }

      xLeft++;
      xRight--;
    }

    posLeft = pts.InsertAfter(posLeft, cPOINT(xLeft + 2, rect.bottom));
    posRight = pts.InsertBefore(posRight, cPOINT(xRight - 2, rect.bottom));
  }

  points = new POINT[pts.GetCount()];
  int i = 0;

  for (POSITION pos = pts.GetHeadPosition(); pos != NULL; i++) {
    points[i] = pts.GetNext(pos);

    switch (dwAlignmentOrign & CBRS_ALIGN_ANY) {
    case CBRS_ALIGN_BOTTOM:
      points[i].y = rect.bottom - (points[i].y - rect.top);
      break;

    case CBRS_ALIGN_RIGHT: {
      int x = rectOrign.right - points[i].y;
      int y = rectOrign.top + points[i].x;
      points[i] = cPOINT(x, y);
    }
    break;

    case CBRS_ALIGN_LEFT: {
      int x = rectOrign.left + points[i].y;
      int y = rectOrign.top + points[i].x;
      points[i] = cPOINT(x, y);
    }
    break;
    }
  }

  return (int) pts.GetCount();
}
void CBCGPVisualManagerVS2005::OnFillAutoHideButtonBackground(HDDC hDC, RECT rect, CBCGPAutoHideButton* pButton)
{
  ASSERT(hDC);


  if (!s->m_bRoundedAutohideButtons) {
    return;
  }

  LPPOINT points;
  int nPoints = CreateAutoHideButtonRegion(rect, pButton->GetAlignment(), points);
  CRgn rgnClip;
  rgnClip.CreatePolygonRgn(points, nPoints, WINDING);
  hDC->SelectClipRgn(&rgnClip);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManager2003::OnFillAutoHideButtonBackground(hDC, rect, pButton);
  }
  else {
    BOOL bIsHorz =
        ((pButton->GetAlignment() & CBRS_ALIGN_ANY) == CBRS_ALIGN_LEFT ||
            (pButton->GetAlignment() & CBRS_ALIGN_ANY) == CBRS_ALIGN_RIGHT);

    FillGradient(hDC, rect,
        s->m_clrBtnGradientDark, s->m_clrBtnGradientLight, !bIsHorz);
  }

  hDC->SelectClipRgn(NULL);
  delete[] points;
}
void CBCGPVisualManagerVS2005::OnDrawAutoHideButtonBorder(HDDC hDC, RECT rect, RECT /*rectBorderSize*/, CBCGPAutoHideButton* pButton)
{
  ASSERT(hDC);

  COLORREF pen = (globalData.clrBtnShadow);
  COLORREF _clr = (pen);
  LPPOINT points;
  int nPoints = CreateAutoHideButtonRegion(rect, pButton->GetAlignment(), points);

  if (!s->m_bRoundedAutohideButtons) {
    hDC->Polyline(points, nPoints);
  }
  else {
    BOOL bIsHorz
    ((pButton->GetAlignment() & CBRS_ALIGN_ANY) == CBRS_ALIGN_LEFT ||
        (pButton->GetAlignment() & CBRS_ALIGN_ANY) == CBRS_ALIGN_RIGHT);

    for (int i = 0; i < nPoints; i++) {
      if ((i % 2) != 0) {
        int x1 = points[i - 1].x;
        int y1 = points[i - 1].y;
        int x2 = points[i].x;
        int y2 = points[i].y;

        if (bIsHorz) {
          if (y1 > rect CenterPoint(&).y && y2 > rect CenterPoint(&).y) {
            y1--;
            y2--;
          }
        }
        else {
          if (x1 > rect CenterPoint(&).x && x2 > rect CenterPoint(&).x) {
            x1--;
            x2--;
          }
        }

        if (y2 >= y1) {
          TMoveTo(hDC, x1, y1);
          _LineTo(hDC, x2, y2);
        }
        else {
          TMoveTo(hDC, x2, y2);
          _LineTo(hDC, x1, y1);
        }
      }
    }
  }


  delete[] points;
}
void CBCGPVisualManagerVS2005::GetTabFrameColors(const CBCGPBaseTabWnd* pTabWnd,
    COLORREF clrDark,
    COLORREF clrBlack,
    COLORREF clrHighlight,
    COLORREF clrFace,
    COLORREF clrDarkShadow,
    COLORREF clrLight,
    COLORREF& pbrFace,
    COLORREF& pbrBlack)
{
  ASSERT(pTabWnd);
  CBCGPVisualManager2003::GetTabFrameColors(pTabWnd,
      clrDark, clrBlack,
      clrHighlight, clrFace,
      clrDarkShadow, clrLight,
      pbrFace, pbrBlack);

  if (IsVS2005Style && s->m_colorActiveTabBorder != 0) {
    clrHighlight = s->m_colorActiveTabBorder;
  }

  clrBlack = clrDarkShadow;
}
void CBCGPVisualManagerVS2005::OnDrawSeparator(HDDC hDC, CBCGPBaseControlBar* pBar,
    RECT rect, BOOL bHorz)
{
  CBCGPToolBar* pToolBar = DYNAMIC_DOWNCAST(CBCGPToolBar, pBar);

  if (pToolBar != NULL) {
    ASSERT(pToolBar);

    if (bHorz) {
      const int nDelta = MAX(0, (pToolBar->GetButtonSize().cy - pToolBar->GetImageSize().cy) / 2);
      rect.top += nDelta;
    }
    else {
      const int nDelta = MAX(0, (pToolBar->GetButtonSize().cx - pToolBar->GetImageSize().cx) / 2);
      rect.left += nDelta;
    }
  }

  CBCGPVisualManagerXP::OnDrawSeparator(hDC, pBar, rect, bHorz);
}
void CBCGPVisualManagerVS2005::OnFillHighlightedArea(HDDC hDC, RECT rect,
    COLORREF  pBrush, CBCGPToolbarButton* pButton)
{
  if (pButton != NULL &&
      (s->m_CurrAppTheme == WinXpTheme_Blue || s->m_CurrAppTheme == WinXpTheme_Olive)) {

    CBCGPToolbarMenuButton* pMenuButton =
        DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);
    BOOL bIsPopupMenu = pMenuButton != NULL &&
        pMenuButton->GetParentWnd() != NULL &&
        pMenuButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar));

    if (bIsPopupMenu &&
        (pButton->s->m_nStyle & UIS_CHECKED) &&
        pBrush == &s->m_clrHighlightDn) {
      draw_fillrectR(hDC, &rect, &s->m_clrMenuItemCheckedHighlight);
      return;
    }

    if (pMenuButton != NULL && !bIsPopupMenu && pMenuButton->IsDroppedDown()) {
      draw_fillrectR(hDC, &rect, &s->m_clrMenuButtonDroppedDown);
      return;
    }
  }

  CBCGPVisualManager2003::OnFillHighlightedArea(hDC, rect, pBrush, pButton);
}
int CBCGPVisualManagerVS2005::GetDockingTabsBordersSize()
{
  return
      CBCGPTabbedControlBar::s->m_StyleTabWnd == CBCGPTabWnd::STYLE_3D_ROUNDED ?
      0 : 3;
}
COLORREF CBCGPVisualManagerVS2005::GetPropListGroupColor()
{
  ASSERT(pPropList);

  if (s->m_bDefaultWinXPColors) {
    return CBCGPVisualManager2003::GetPropListGroupColor(pPropList);
  }

  return pPropList->DrawControlBarColors() ?
      globalData.clrBtnLight : globalData.clrBtnLight;
}
COLORREF CBCGPVisualManagerVS2005::OnFillMiniFrameCaption(HDDC hDC,
    RECT rectCaption,
    BOOL bActive)
{
  ASSERT(hDC);

  if (DYNAMIC_DOWNCAST(CBCGPBaseToolBar, pFrameWnd->GetControlBar()) == NULL) {
    return CBCGPVisualManager2003::OnFillMiniFrameCaption(hDC,
        rectCaption, pFrameWnd, bActive);
  }

  draw_fillrectR(hDC, &rectCaption, _GetSysColor(COLOR_3DSHADOW));
  return globalData.clrCaptionText;
}
void CBCGPVisualManagerVS2005::OnDrawToolBoxFrame(HDDC hDC, RECT  rect)
{
  ASSERT(hDC);
  draw_3drect_inR(hDC, &rect, globalData.clrBtnShadow, globalData.clrBtnShadow);
}
#define WINXPBLUE_GRADIENT_LIGHT  _RGB(239, 243, 250)
#define WINXPBLUE_GRADIENT_DARK   _RGB(193, 210, 238)
#define WINXPBLUE_MENUITEs->m_BORDER _RGB(152, 181, 226)
#define WINXPBLUE_MENU_GUTTER   _RGB(241, 241, 241)
#define WINXPBLUE_MENU_GUTTER_DARK  _RGB(225, 225, 225)
IMPLEMENT_DYNCREATE(CBCGPVisualManagerVS2008, CBCGPVisualManagerVS2005)
CBCGPVisualManagerVS2008::CBCGPVisualManagerVS2008()
{
  s->m_bConnectMenuToParent = FALSE;
  s->m_bShdowDroppedDownMenuButton = FALSE;
  s->m_bOSColors = FALSE;
  OnUpdateSystemColors();
}
void CBCGPVisualManagerVS2008::OnFillBarBackground(HDDC hDC, CBCGPBaseControlBar* pBar,
    RECT rectClient, RECT rectClip,
    BOOL bNCArea)
{
  ASSERT(hDC);

  if (IsOnGlass) {
    draw_fillrectR(hDC, &rectClient, _RGB(0, 0, 0));
    return;
  }

  if (globalData.m_nBitsPerPixel <= 8 ||
      globalData.IsHighContastMode() ||
      !pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar)) ||
      pBar->IsKindOf(RUNTIME_CLASS(CBCGPColorBar)) ||
      pBar->IsKindOf(RUNTIME_CLASS(CBCGPCalculator)) ||
      pBar->IsKindOf(RUNTIME_CLASS(CBCGPCalendarBar)) ||
      GetStandardWinXPTheme() != WinXpTheme_Blue) {
    CBCGPVisualManagerVS2005::OnFillBarBackground(hDC, pBar, rectClient, rectClip, bNCArea);
    return;
  }

  if (rectClip.IsRectEmpty()) {
    rectClip = rectClient;
  }

  draw_fillrectR(hDC, &rectClip, &s->m_clrMenuLight);
  CBCGPPopupMenuBar* pMenuBar = DYNAMIC_DOWNCAST(CBCGPPopupMenuBar, pBar);
  ASSERT(pMenuBar);

  if (!pMenuBar->s->m_bDisableSideBarInXPMode) {
    RECT rectImages = rectClient;
    rectImages.right = rectImages.left + pMenuBar->GetGutterWidth();
    rectImages DeflateRect(&, 0, 1);
    COLORREF br = (WINXPBLUE_MENU_GUTTER);
    draw_fillrectR(hDC, &rectImages, br);
    COLORREF _clr = (&s->m_penSeparator);
    TMoveTo(hDC, rectImages.right, rectImages.top);
    _LineTo(hDC, rectImages.right, rectImages.bottom);

  }
}
void CBCGPVisualManagerVS2008::OnHighlightRarelyUsedMenuItems(HDDC hDC, RECT rectRarelyUsed)
{
  ASSERT(hDC);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      GetStandardWinXPTheme() != WinXpTheme_Blue) {
    CBCGPVisualManagerVS2005::OnHighlightRarelyUsedMenuItems(hDC, rectRarelyUsed);
    return;
  }

  rectRarelyUsed.left --;
  rectRarelyUsed.right = rectRarelyUsed.left + CBCGPToolBar::GetMenuImageSize().cx +
      2 * GetMenuImageMargin() + 2;
  COLORREF br = (WINXPBLUE_MENU_GUTTER_DARK);
  draw_fillrectR(hDC, &rectRarelyUsed, br);
}
void CBCGPVisualManagerVS2008::OnDrawButtonBorder(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, int state)
{
  ASSERT(hDC);

  CBCGPToolbarMenuButton* pMenuButton =
      DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);
  BOOL bIsMenuBarButton = pMenuButton != NULL &&
      pMenuButton->GetParentWnd() != NULL &&
      pMenuButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar));

  if (bIsMenuBarButton) {
    rect.bottom -= 2;
  }

  if (!bIsMenuBarButton || !pMenuButton->IsDroppedDown()) {
    CBCGPVisualManagerVS2005::OnDrawButtonBorder(hDC, pButton, rect, state);
    return;
  }

  draw_3drect_inR(hDC, &rect, s->m_clrMenuItemBorder, s->m_clrMenuItemBorder);
}
void CBCGPVisualManagerVS2008::OnFillButtonInterior(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state)
{
  ASSERT(hDC);

  ASSERT(hDC);

  CBCGPToolbarMenuButton* pMenuButton =
      DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);
  BOOL bIsMenuBarButton = pMenuButton != NULL &&
      pMenuButton->GetParentWnd() != NULL &&
      pMenuButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar));

  if (bIsMenuBarButton) {
    rect.bottom -= 2;
  }

  if (!bIsMenuBarButton || !pMenuButton->IsDroppedDown()) {
    CBCGPVisualManagerVS2005::OnFillButtonInterior(hDC, pButton, rect, state);
    return;
  }

  if (!s->m_bOSColors) {
    OnFillHighlightedArea(hDC, rect, &s->m_clrBtnBkgnd, pButton);
    return;
  }

  COLORREF clr1 = PixelAlpha(s->m_clrHighlight, 85);
  COLORREF clr2 = _RGB(255, 255, 255);

  FillGradient(hDC, rect, clr1, clr2, TRUE);
}
void CBCGPVisualManagerVS2008::OnHighlightMenuItem(HDDC hDC, CBCGPToolbarMenuButton* pButton,
    RECT rect, COLORREF clrText)
{
  ASSERT(hDC);


  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManagerVS2005::OnHighlightMenuItem(hDC, pButton, rect, clrText);
    return;
  }

  const int nRoundSize = 3;
  const BOOL bIsWinXPBlue = (GetStandardWinXPTheme() == WinXpTheme_Blue);
  COLORREF clr1 = bIsWinXPBlue ? WINXPBLUE_GRADIENT_DARK : s->m_clrHighlightGradientDark;
  COLORREF clr2 = bIsWinXPBlue ? WINXPBLUE_GRADIENT_LIGHT : s->m_clrHighlightGradientLight;
  COLORREF clrBorder = bIsWinXPBlue ? WINXPBLUE_MENUITEs->m_BORDER : s->m_clrHighlightGradientDark;

  if (s->m_bOSColors) {
    clr1 = s->m_clrHighlight;
    clr2 = _RGB(255, 255, 255);
    clrBorder = s->m_clrHighlightDn;
  }

  DeflateRect(&rect, 2, 0);
  CRgn rgn;
  rgn.CreateRoundRectRgn(rect.left, rect.top, rect.right, rect.bottom, nRoundSize, nRoundSize);
  hDC->SelectClipRgn(&rgn);

  FillGradient(hDC, rect, clr1, clr2, TRUE);
  hDC->SelectClipRgn(NULL);
  COLORREF pen = (clrBorder);
  COLORREF _clr = (pen);
  COLORREF  pOldBrush = (COLORREF) hDC->SelectStockObject(NULL_BRUSH);
  hDC->RoundRect(rect.left, rect.top, rect.right, rect.bottom, nRoundSize + 2, nRoundSize + 2);

  _clr = (pOldBrush);
  clrText = GetHighlightedMenuItemTextColor(pButton);
}
void CBCGPVisualManagerVS2008::OnEraseTabsArea(HDDC hDC, RECT rect,
    const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(hDC);
  ASSERT(pTabWnd);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      !IsVS2005Style ||
      pTabWnd->IsDialogControl()) {
    CBCGPVisualManagerVS2005::OnEraseTabsArea(hDC, rect, pTabWnd);
    return;
  }

  CFrameWnd* pMainFrame = BCGCBProGetTopLevelFrame(pTabWnd);

  if (pMainFrame->GetSafeHwnd() != NULL) {
    RECT rectMain;
    pMainFrame->GetClientRect(rectMain);
    pMainFrame->MapWindowPoints((CBCGPTabWnd*)pTabWnd, &rectMain);
    rect.top = rectMain.top;
    rect.left = rectMain.left;
    rect.right = rect.left + globalData.m_rectVirtual RCW(&) + 10;
  }

  FillGradient(hDC, rect, s->m_clrBtnGradientDark, s->m_clrBtnGradientLight, FALSE, 0);
}
void CBCGPVisualManagerVS2008::OnEraseTabsButton(HDDC hDC, RECT rect,
    CBCGPButton* pButton,
    CBCGPBaseTabWnd* pBaseTab)
{
  ASSERT(hDC);

  ASSERT(pBaseTab);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      !pBaseTab->IsVS2005Style() ||
      pBaseTab->IsDialogControl() ||
      IsPressed || IsHighlighted) {
    CBCGPVisualManagerVS2005::OnEraseTabsButton(hDC, rect, pButton, pBaseTab);
    return;
  }

  CRgn rgn;
  rgn.CreateRectRgnIndirect(rect);
  hDC->SelectClipRgn(&rgn);
  CFrameWnd* pMainFrame = BCGCBProGetTopLevelFrame(pButton);

  if (pMainFrame->GetSafeHwnd() != NULL) {
    RECT rectMain;
    pMainFrame->GetClientRect(rectMain);
    pMainFrame->MapWindowPoints(pButton, &rectMain);
    rect.top = rectMain.top;
    rect.left = rectMain.left;
    rect.right = rect.left + globalData.m_rectVirtual RCW(&) + 10;
  }

  FillGradient(hDC, rect, s->m_clrBtnGradientDark, s->m_clrBtnGradientLight, FALSE, 0);
  hDC->SelectClipRgn(NULL);
}
BOOL CBCGPVisualManagerVS2008::OnEraseTabsFrame(HDDC hDC, RECT rect, const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(hDC);
  ASSERT(pTabWnd);

  if (!IsVS2005Style || globalData.m_nBitsPerPixel <= 8 ||
      globalData.IsHighContastMode()) {
    return CBCGPVisualManagerVS2005::OnEraseTabsFrame(hDC, rect, pTabWnd);
  }

  COLORREF clrActiveTab = pTabWnd->GetTabBkColor(pTabWnd->GetActiveTab());

  if (clrActiveTab == 0) {
    clrActiveTab = s->m_clrHighlight;
  }

  COLORREF brFill(clrActiveTab);
  draw_fillrectR(hDC, &rect, brFill);
  return TRUE;
}
void CBCGPVisualManagerVS2008::OnDrawTab(HDDC hDC, RECT rectTab,
    int iTab, BOOL bIsActive, const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(pTabWnd);
  ASSERT(hDC);
  const COLORREF clrTab = pTabWnd->GetTabBkColor(iTab);
  const BOOL bIsHighlight = (iTab == pTabWnd->GetHighlightedTab());

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      pTabWnd->IsDialogControl() ||
      pTabWnd->IsFlatTab() ||
      clrTab != 0) {
    CBCGPVisualManagerVS2005::OnDrawTab(hDC, rectTab, iTab, bIsActive, pTabWnd);
    return;
  }

  if ((bIsActive || bIsHighlight || s->m_bOSColors) && IsVS2005Style) {
    ((CBCGPBaseTabWnd*)pTabWnd)->SetTabBkColor(iTab,
        bIsActive ? s->m_clrHighlight :
        bIsHighlight ? s->m_clrHighlightDnGradientDark : GetThemeColor(s->m_hThemeButton, 2));
    CBCGPVisualManagerVS2005::OnDrawTab(hDC, rectTab, iTab, bIsActive, pTabWnd);
    ((CBCGPBaseTabWnd*)pTabWnd)->SetTabBkColor(iTab, clrTab);
    return;
  }

  if (s->m_hThemeTab == NULL ||
      IsOneNoteStyle || IsVS2005Style ||
      pTabWnd->IsLeftRightRounded()) {
    RECT rectClip = rectTab;
    rectClip.bottom -= 2;
    CRgn rgn;
    rgn.CreateRectRgnIndirect(&rectClip);
    hDC->SelectClipRgn(&rgn);
    CBCGPVisualManagerVS2005::OnDrawTab(hDC, rectTab, iTab, bIsActive, pTabWnd);
    hDC->SelectClipRgn(NULL);
    return;
  }

  int nState = TIS_NORMAL;

  if (bIsActive) {
    nState = TIS_SELECTED;
  }
  else if (iTab == pTabWnd->GetHighlightedTab()) {
    nState = TIS_HOT;
  }

  rectTab.right += 2;

  if (!bIsActive) {
    rectTab.bottom--;
  }

  if (rectTab RCW(&) > 25) { // DrawThemeBackground will draw < 25 width tab bad
    if (LOCATION_BOTTOM) {

      dm.MirrorRect(rectTab, FALSE);
    }
  }

  COLORREF clrTabText = globalData.clrWindowText;

  if (!bIsActive) {
    clrTabText = globalData.clrBtnDkShadow;
  }
  else if (s->m_pfGetThemeColor != NULL) {
    (*s->m_pfGetThemeColor)(s->m_hThemeTab, TABP_TABITEM, nState, TMT_TEXTCOLOR, &clrTabText);
  }

  COLORREF cltTextOld = hDC->SetTextColor(clrTabText);
  rectTab.right -= 2;
  OnDrawTabContent(hDC, rectTab, iTab, bIsActive, pTabWnd, 0);
  hDC->SetTextColor(cltTextOld);
}
void CBCGPVisualManagerVS2008::OnDrawAutoHideButtonBorder(HDDC hDC, RECT rect, RECT rectBorderSize, CBCGPAutoHideButton* pButton)
{
  ASSERT(hDC);


  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      s->m_hThemeTab == NULL) {
    CBCGPVisualManagerVS2005::OnDrawAutoHideButtonBorder(hDC, rect, rectBorderSize, pButton);
    return;
  }
}
COLORREF CBCGPVisualManagerVS2008::OnDrawControlBarCaption(HDDC hDC, CBCGPDockingControlBar* pBar,
    BOOL bActive, RECT rectCaption, RECT rectButtons)
{
  ASSERT(hDC);

  if (!s->m_bOSColors) {
    return CBCGPVisualManagerVS2005::OnDrawControlBarCaption(hDC, pBar,
        bActive, rectCaption, rectButtons);
  }

  rectCaption.bottom++;

  FillGradient(hDC, rectCaption,
      bActive ? globalData.clrActiveCaptionGradient : globalData.clrInactiveCaptionGradient,
      bActive ? globalData.clrActiveCaption : globalData.clrInactiveCaption,
      TRUE);
  return bActive ? globalData.clrCaptionText : globalData.clrInactiveCaptionText;
}
void CBCGPVisualManagerVS2008::OnUpdateSystemColors()
{
  s->m_bOSColors = globalData.bIsWindowsVista &&
      s->m_hThemeExplorerBar != NULL &&
      globalData.m_nBitsPerPixel > 8 && !globalData.IsHighContastMode();
  CBCGPVisualManagerVS2005::OnUpdateSystemColors();

  if (!s->m_bOSColors || s->m_pfGetThemeColor == NULL) {
    return;
  }

  (*s->m_pfGetThemeColor)(s->m_hThemeExplorerBar, 0, 0, TMT_EDGEHIGHLIGHTCOLOR, &s->m_clrToolBarGradientLight);
  (*s->m_pfGetThemeColor)(s->m_hThemeExplorerBar, 0, 0, TMT_GRADIENTCOLOR2, &s->m_clrToolBarGradientDark);
  s->m_clrBtnGradientDark = SmartMixColors(s->m_clrToolBarGradientDark, s->m_clrToolBarGradientLight,
      1., 2, 1);
  s->m_clrBtnGradientLight = s->m_clrToolBarGradientLight;
  s->m_clrToolBarGradientVertLight = s->m_clrToolBarGradientLight;
  s->m_clrToolBarGradientVertDark = PixelAlpha(
      s->m_clrToolBarGradientDark, 98);
  //-------------------------------------
  // Calculate highlight gradient colors:
  //-------------------------------------
  s->m_clrCustomizeButtonGradientLight = s->m_clrToolBarGradientDark;
  s->m_clrCustomizeButtonGradientDark = s->m_clrBtnGradientDark;
  s->m_clrToolBarBottomLine = PixelAlpha(s->m_clrToolBarGradientDark, 85);
  s->m_colorToolBarCornerBottom = s->m_clrToolBarGradientDark;
  s->m_clrTabBack.DeleteObject();
  s->m_clrTabBack.CreateSolidBrush(s->m_clrToolBarGradientLight);
  s->m_clrFace.DeleteObject();
  s->m_clrFace.CreateSolidBrush(s->m_clrToolBarGradientLight);
  s->m_clrToolbarDisabled = SmartMixColors(
      s->m_clrToolBarGradientDark, s->m_clrToolBarGradientLight, .92);
  s->m_penBottomLine.DeleteObject();
  s->m_penBottomLine.CreatePen = (s->m_clrToolBarBottomLine);
  //--------------------------------------
  // Calculate grid/report control colors:
  //--------------------------------------
  s->m_penGridExpandBoxLight.DeleteObject();
  s->m_penGridExpandBoxLight.CreatePen(PS_SOLID, 1,
      PixelAlpha(s->m_clrToolBarBottomLine, 210));
  s->m_penGridExpandBoxDark.DeleteObject();
  s->m_penGridExpandBoxDark.CreatePen(PS_SOLID, 1,
      PixelAlpha(s->m_clrToolBarBottomLine, 75));
}
COLORREF CBCGPVisualManagerVS2008::OnFillCommandsListBackground(HDDC hDC, RECT rect, BOOL bIsSelected)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    return CBCGPVisualManagerVS2005::OnFillCommandsListBackground(hDC, rect, bIsSelected);
  }

  ASSERT(hDC);
  rect.left = 0;
  const BOOL bIsWinXPBlue = (GetStandardWinXPTheme() == WinXpTheme_Blue) || s->m_bOSColors;

  if (bIsSelected) {
    COLORREF clr1 = bIsWinXPBlue ? WINXPBLUE_GRADIENT_DARK : s->m_clrHighlightGradientDark;
    COLORREF clr2 = bIsWinXPBlue ? WINXPBLUE_GRADIENT_LIGHT : s->m_clrHighlightGradientLight;
    COLORREF clrBorder = bIsWinXPBlue ? WINXPBLUE_MENUITEs->m_BORDER : s->m_clrHighlightGradientDark;

    if (s->m_bOSColors) {
      clr1 = s->m_clrHighlight;
      clr2 = _RGB(255, 255, 255);
      clrBorder = s->m_clrHighlightDn;
    }

    FillGradient(hDC, rect, clr1, clr2, TRUE);
    draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
    CBCGPToolbarMenuButton dummy;
    return GetHighlightedMenuItemTextColor(&dummy);
  }
  else {
    draw_fillrectR(hDC, &rect, &s->m_clrMenuLight);
    int iImageWidth = CBCGPToolBar::GetMenuImageSize().cx + GetMenuImageMargin();
    RECT rectImages = rect;
    rectImages.right = rectImages.left + iImageWidth + MENU_IMAGE_MARGIN;

    if (bIsWinXPBlue) {
      COLORREF br = (WINXPBLUE_MENU_GUTTER);
      draw_fillrectR(hDC, &rectImages, br);
      COLORREF _clr = (&s->m_penSeparator);
      TMoveTo(hDC, rectImages.right, rectImages.top);
      _LineTo(hDC, rectImages.right, rectImages.bottom);

    }
    else {

      FillGradient(hDC, rectImages, s->m_clrToolBarGradientLight, s->m_clrToolBarGradientDark, FALSE);
    }

    return globalData.clrBtnText;
  }
}
void CBCGPVisualManagerVS2008::GetTabFrameColors(const CBCGPBaseTabWnd* pTabWnd,
    COLORREF clrDark,
    COLORREF clrBlack,
    COLORREF clrHighlight,
    COLORREF clrFace,
    COLORREF clrDarkShadow,
    COLORREF clrLight,
    COLORREF& pbrFace,
    COLORREF& pbrBlack)
{
  ASSERT(pTabWnd);
  CBCGPVisualManagerVS2005::GetTabFrameColors(pTabWnd,
      clrDark, clrBlack,
      clrHighlight, clrFace,
      clrDarkShadow, clrLight,
      pbrFace, pbrBlack);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      pTabWnd->IsFlatTab()) {
    return;
  }

  clrBlack = globalData.clrBtnShadow;
}
void CBCGPVisualManagerVS2008::OnDrawTabResizeBar(HDDC hDC, CBCGPBaseTabWnd* pWndTab,
    BOOL bIsVert, RECT rect,
    COLORREF  pbrFace, COLORREF  pPen)
{
  ASSERT(hDC);
  ASSERT(pbrFace);
  ASSERT(pPen);
  ASSERT(pWndTab);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() || pWndTab->IsFlatTab()) {
    CBCGPVisualManagerVS2005::OnDrawTabResizeBar(hDC, pWndTab, bIsVert, rect, pbrFace, pPen);
    return;
  }

  CRgn rgn;
  rgn.CreateRectRgnIndirect(rect);
  hDC->SelectClipRgn(&rgn);
  CFrameWnd* pMainFrame = BCGCBProGetTopLevelFrame(pWndTab);

  if (pMainFrame->GetSafeHwnd() != NULL) {
    RECT rectMain;
    pMainFrame->GetClientRect(rectMain);
    pMainFrame->MapWindowPoints(pWndTab, &rectMain);
    rect.top = rectMain.top;
    rect.left = rectMain.left;
    rect.right = rect.left + globalData.m_rectVirtual RCW(&) + 10;
  }

  FillGradient(hDC, rect, s->m_clrBtnGradientDark, s->m_clrBtnGradientLight, FALSE, 0);
  hDC->SelectClipRgn(NULL);
}
BCGP_SMARTDOCK_THEME CBCGPVisualManagerVS2008::GetSmartDockingTheme()
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() || !globalData.IsWindowsLayerSupportAvailable() ||
      !globalData.bIsWindowsVista) {
    return CBCGPVisualManagerVS2005::GetSmartDockingTheme();
  }

  return BCGP_SDT_VS2008;
}
// COPYRIGHT NOTES
// ---------------
// This is a part of the BCGControlBar Library
// Copyright (C) 1998-2009 BCGSoft Ltd.
// All rights reserved.
// This source code can be used, distributed or modified
// only under terms and conditions
// of the accompanying license agreement.
// BCGWinXPVisualManager.cpp: implementation of the CBCGPWinXPVisualManager class.
IMPLEMENT_DYNCREATE(CBCGPWinXPVisualManager, CBCGPVisualManagerXP)
BOOL CBCGPWinXPVisualManager::s->m_b3DTabsXPTheme = FALSE;
//
// Construction/Destruction
//
CBCGPWinXPVisualManager::CBCGPWinXPVisualManager(BOOL bIsTemporary) :
  CBCGPVisualManagerXP(bIsTemporary)
{
  s->m_bShadowHighlightedImage = FALSE;
  s->m_bOfficeStyleMenus = FALSE;
  s->m_nVertMargin = 12;
  s->m_nHorzMargin = 12;
  s->m_nGroupVertOffset = 15;
  s->m_nGroupCaptionHeight = 25;
  s->m_nGroupCaptionHorzOffset = 13;
  s->m_nGroupCaptionVertOffset = 7;
  s->m_nTasksHorzOffset = 12;
  s->m_nTasksIconHorzOffset = 5;
  s->m_nTasksIconVertOffset = 4;
  s->m_bActiveCaptions = TRUE;
  globalData.UpdateSysColors();
  OnUpdateSystemColors();
}
CBCGPWinXPVisualManager::~CBCGPWinXPVisualManager()
{
}
BOOL CBCGPWinXPVisualManager::IsWinXPThemeAvailible()
{
  CBCGPWinXPVisualManager* pWinXPManager =
      DYNAMIC_DOWNCAST(CBCGPWinXPVisualManager, s->m_pVisManager);

  if (pWinXPManager != NULL) {
    return pWinXPManager->s->m_hThemeWindow != NULL;
  }

  // Create a temporary manager and check it:
  CBCGPWinXPVisualManager winXPManager(TRUE /* Temporary */);
  return winXPManager.s->m_hThemeWindow != NULL;
}
void CBCGPWinXPVisualManager::SetOfficeStyleMenus(BOOL bOn)
{
  s->m_bOfficeStyleMenus = bOn;
}
void CBCGPWinXPVisualManager::OnDrawBarGripper(HDDC hDC, RECT rectGripper, BOOL bHorz,
    CBCGPBaseControlBar* pBar)
{
  ASSERT(hDC);

  if (s->m_hThemeRebar == NULL || pBar->GetSafeHwnd() == NULL) {
    CBCGPVisualManagerXP::OnDrawBarGripper(hDC, rectGripper, bHorz, pBar);
    return;
  }
}
void CBCGPWinXPVisualManager::OnFillBarBackground(HDDC hDC, CBCGPBaseControlBar* pBar,
    RECT rectClient, RECT rectClip,
    BOOL bNCArea)
{
  ASSERT(hDC);

  if (IsOnGlass) {
    draw_fillrectR(hDC, &rectClient, _RGB(0, 0, 0));
    return;
  }

  if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar))) {
    if (s->m_bOfficeStyleMenus) {
      CBCGPVisualManagerXP::OnFillBarBackground(hDC, pBar, rectClient, rectClip, bNCArea);
    }
    else {
      OnFillPopupMenuBackground(hDC, rectClient);
      CBCGPPopupMenuBar* pMenuBar = DYNAMIC_DOWNCAST(CBCGPPopupMenuBar, pBar);
    }

    return;
  }

  FillRebarPane(hDC, pBar, rectClient);
}
void CBCGPWinXPVisualManager::OnFillPopupMenuBackground(HDDC hDC, RECT rect)
{
  draw_fillrectR(hDC, &rect, _GetSysColor(COLOR_MENU));
}
void CBCGPWinXPVisualManager::OnDrawBarBorder(HDDC hDC, CBCGPBaseControlBar* pBar, RECT& rect)
{
  CBCGPVisualManager::OnDrawBarBorder(hDC, pBar, rect);
}
void CBCGPWinXPVisualManager::OnFillButtonInterior(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect,
    CBCGPVisualManager::int state)
{
  if (s->m_hThemeToolBar == NULL) {
    CBCGPVisualManagerXP::OnFillButtonInterior(hDC, pButton, rect, state);
    return;
  }
}
COLORREF CBCGPWinXPVisualManager::GetToolbarButtonTextColor(CBCGPToolbarButton* pButton,
    CBCGPVisualManager::int state)
{


  if (s->m_hThemeToolBar == NULL ||
      pButton->IsKindOf(RUNTIME_CLASS(CBCGPOutlookButton))) {
    return CBCGPVisualManagerXP::GetToolbarButtonTextColor(pButton, state);
  }

  return CBCGPVisualManager::GetToolbarButtonTextColor(pButton, state);
}
void CBCGPWinXPVisualManager::OnHighlightMenuItem(HDDC hDC, CBCGPToolbarMenuButton* pButton,
    RECT rect, COLORREF clrText)
{
  if (s->m_hThemeWindow == NULL || s->m_bOfficeStyleMenus) {
    CBCGPVisualManagerXP::OnHighlightMenuItem(hDC, pButton, rect, clrText);
    return;
  }

  if (s->m_hThemeMenu == NULL) {
    CBCGPVisualManager::OnHighlightMenuItem(hDC, pButton,  rect, clrText);
    return;
  }
}
COLORREF CBCGPWinXPVisualManager::GetHighlightedMenuItemTextColor(CBCGPToolbarMenuButton* pButton)
{
  if (s->m_hThemeMenu != NULL && !s->m_bOfficeStyleMenus) {
    COLORREF clrText = 0;
    (*s->m_pfGetThemeColor)(s->m_hThemeMenu, MENU_POPUPITEM, 0, TMT_TEXTCOLOR, &clrText);
    return clrText;
  }

  if (s->m_hThemeWindow == NULL || s->m_bOfficeStyleMenus) {
    return CBCGPVisualManagerXP::GetHighlightedMenuItemTextColor(pButton);
  }
  else {
    return CBCGPVisualManager::GetHighlightedMenuItemTextColor(pButton);
  }
}
void CBCGPWinXPVisualManager::OnHighlightRarelyUsedMenuItems(HDDC hDC, RECT rectRarelyUsed)
{
  if (s->m_hThemeWindow == NULL || s->m_bOfficeStyleMenus) {
    CBCGPVisualManagerXP::OnHighlightRarelyUsedMenuItems(hDC, rectRarelyUsed);
    return;
  }

  ASSERT(hDC);

  rectRarelyUsed.left --;
  rectRarelyUsed.right = rectRarelyUsed.left + CBCGPToolBar::GetMenuImageSize().cx +
      2 * GetMenuImageMargin() + 2;
  HighlightRect(hDC, rectRarelyUsed, 94);
}
void CBCGPWinXPVisualManager::OnFillMenuImageRect(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state)
{
  if (s->m_hThemeMenu == NULL || s->m_bOfficeStyleMenus) {
    CBCGPVisualManagerXP::OnFillMenuImageRect(hDC, pButton, rect, state);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawButtonBorder(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, int state)
{
  if (s->m_hThemeToolBar == NULL) {
    CBCGPVisualManagerXP::OnDrawButtonBorder(hDC, pButton, rect, state);
    return;
  }

  if (s->m_bOfficeStyleMenus) {
    CBCGPToolbarMenuButton* pMenuButton =
        DYNAMIC_DOWNCAST(CBCGPToolbarMenuButton, pButton);

    if (pMenuButton != NULL) {
      BOOL bIsMenuBar = pMenuButton->GetParentWnd() != NULL &&
          pMenuButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar));
      BOOL bIsPopupMenu = pMenuButton->GetParentWnd() != NULL &&
          pMenuButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPPopupMenuBar));

      if (bIsPopupMenu || bIsMenuBar) {
        CBCGPVisualManagerXP::OnDrawButtonBorder(hDC, pButton, rect, state);
        return;
      }
    }
  }
}
void CBCGPWinXPVisualManager::OnDrawButtonSeparator(HDDC hDC,
    CBCGPToolbarButton* pButton, RECT rect, CBCGPVisualManager::int state,
    BOOL bHorz)
{
  if (s->m_hThemeToolBar == NULL) {
    CBCGPVisualManagerXP::OnDrawButtonSeparator(hDC, pButton, rect, state, bHorz);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawSeparator(HDDC hDC, CBCGPBaseControlBar* pBar,
    RECT rect, BOOL bHorz)
{
  if (s->m_hThemeToolBar == NULL ||
      IsDialogControl) {
    CBCGPVisualManagerXP::OnDrawSeparator(hDC, pBar, rect, bHorz);
    return;
  }

  CBCGPPopupMenuBar* pMenuBar = DYNAMIC_DOWNCAST(CBCGPPopupMenuBar, pBar);

  if (pMenuBar != NULL) {
    if (s->m_bOfficeStyleMenus) {
      CBCGPVisualManagerXP::OnDrawSeparator(hDC, pBar, rect, bHorz);
      return;
    }
  }

  if (pBar->IsKindOf(RUNTIME_CLASS(CBCGPRibbonStatusBar))) {
    RECT rectClient;
    pBar->GetClientRect(rectClient);
    rect.top = rectClient.top;
    rect.bottom = rectClient.bottom;
  }

  if (bHorz & RCW(&rect) < 2) {
    rect.right++;
  }
}
void CBCGPWinXPVisualManager::OnDrawCaptionButton(HDDC hDC, CBCGPCaptionButton* pButton,
    BOOL bActive, BOOL bHorz, BOOL bMaximized, BOOL bDisabled,
    int nImageID /*= -1*/)
{
  if (s->m_hThemeToolBar == NULL) {
    CBCGPVisualManagerXP::OnDrawCaptionButton(hDC, pButton, bActive, bHorz, bMaximized, bDisabled, nImageID);
    return;
  }

  ASSERT(hDC);
  ASSERT(pButton != NULL);
  BOOL bPushed = bPushed;
  BOOL bFocused = bFocused ;
  int nState = TS_NORMAL;

  if (bDisabled) {
    nState = TS_DISABLED;
  }
  else if (bPushed && bFocused) {
    nState = TS_PRESSED;
  }
  else if (bFocused) {
    nState = TS_HOT;
  }

  RECT rect = rect;

  if (pButton->IsMiniFrameButton()) {
    rect.bottom -= 3;
    rect.right -= 2;
  }

  int nPart = 0;
  HTHEME hTheme = NULL;

  if (nImageID == -1) {
    switch (pButton->s->m_nHit) {
    case HTCLOSE:
    case HTCLOSE_BCG:
      if (pButton->IsMiniFrameButton() || globalData.bIsWindowsVista) {
        nPart = WP_SMALLCLOSEBUTTON;
        hTheme = s->m_hThemeWindow;

        if (!pButton->IsMiniFrameButton()) {
          DeflateRect(&rect, 1, 2);
        }
      }
      else {
        nPart = EBP_HEADERCLOSE;
        hTheme = s->m_hThemeExplorerBar;
      }

      break;

    case HTMAXBUTTON:
      if (!globalData.bIsWindowsVista) {
        nPart = EBP_HEADERPIN;
        hTheme = s->m_hThemeExplorerBar;

        if (!bMaximized) {
          nState += 3;
        }
      }

      break;
    }
  }

  if (nPart == 0 || hTheme == NULL) {
    if (!pButton->IsMiniFrameButton() && !globalData.bIsWindowsVista) {
      DeflateRect(&rect, 1, 2);
    }

    int id =  - 1;

    if (nImageID != -1) {
      id = nImageID;
    }
    else {
      id = pButton->GetIconID(bHorz, bMaximized);
    }

    if (id !=  - 1) {
      SIZE sizeImage = CBCGPMenuImages::Size();
      POINT ptImage(rect.left + (RCW(&rect) - sizeImage.cx) / 2,
          rect.top + (RCH(&rect) - sizeImage.cy) / 2);
      OnDrawCaptionButtonIcon(hDC, pButton, id, bActive, bDisabled, ptImage);
    }
  }
}
void CBCGPWinXPVisualManager::OnDrawCaptionButtonIcon(HDDC hDC,
    CBCGPCaptionButton* pButton,
    int id,
    BOOL bActive, BOOL bDisabled,
    POINT ptImage)
{
  BOOL bFocused = bFocused ;

  if (s->m_hThemeButton == NULL || !bFocused) {
    CBCGPVisualManagerXP::OnDrawCaptionButtonIcon(hDC, pButton, id, bActive,
        bDisabled, ptImage);
    return;
  }

  ASSERT(hDC);
  DrawMenuImages(hDC, id, ptImage, ImageBlack);
}
COLORREF CBCGPWinXPVisualManager::OnFillCommandsListBackground(HDDC hDC, RECT rect, BOOL bIsSelected)
{
  if (s->m_hThemeWindow == NULL || s->m_bOfficeStyleMenus) {
    return CBCGPVisualManagerXP::OnFillCommandsListBackground(hDC, rect, bIsSelected);
  }

  draw_fillrectR(hDC, &rect, _GetSysColor(COLOR_MENU));

  if (bIsSelected) {
    draw_fillrectR(hDC, &rect, globalData.clrHilite);
    draw_3drect_inR(hDC, &rect, globalData.clrMenuText, globalData.clrMenuText);
    return globalData.clrTextHilite;
  }

  return globalData.clrMenuText;
}
void CBCGPWinXPVisualManager::OnDrawTearOffCaption(HDDC hDC, RECT rect, BOOL bIsActive)
{
  CBCGPVisualManagerXP::OnDrawTearOffCaption(hDC, rect, bIsActive);
}
void CBCGPWinXPVisualManager::OnDrawMenuSystemButton(HDDC hDC, RECT rect,
    UINT uiSystemCommand,
    UINT nStyle, BOOL bHighlight)
{
  if (s->m_hThemeWindow == NULL) {
    CBCGPVisualManagerXP::OnDrawMenuSystemButton(hDC, rect, uiSystemCommand, nStyle, bHighlight);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawStatusBarPaneBorder(HDDC hDC, CBCGPStatusBar* pBar,
    RECT rectPane, UINT uiID, UINT nStyle)
{
  if (s->m_hThemeStatusBar == NULL) {
    CBCGPVisualManagerXP::OnDrawStatusBarPaneBorder(hDC, pBar, rectPane, uiID, nStyle);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawStatusBarSizeBox(HDDC hDC, CBCGPStatusBar* pStatBar,
    RECT rectSizeBox)
{
  if (s->m_hThemeScrollBar == NULL) {
    CBCGPVisualManagerXP::OnDrawStatusBarSizeBox(hDC, pStatBar, rectSizeBox);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawMenuBorder(HDDC hDC, CBCGPPopupMenu* pMenu, RECT rect)
{
  if (s->m_hThemeWindow == NULL || s->m_bOfficeStyleMenus) {
    ASSERT(pMenu);
    BOOL bConnectMenuToParent = s->m_bConnectMenuToParent;
    s->m_bConnectMenuToParent = FALSE;

    if (s->m_hThemeWindow == NULL) {
      s->m_bConnectMenuToParent = TRUE;
    }
    else if (!CBCGPToolBar::IsCustomizeMode()) {
      CBCGPToolbarMenuButton* pMenuButton = pMenu->GetParentButton();

      if (pMenuButton != NULL) {
        BOOL bIsMenuBar = pMenuButton->GetParentWnd() != NULL &&
            pMenuButton->GetParentWnd()->IsKindOf(RUNTIME_CLASS(CBCGPMenuBar));

        if (bIsMenuBar) {
          s->m_bConnectMenuToParent = TRUE;
        }
      }
    }

    CBCGPVisualManagerXP::OnDrawMenuBorder(hDC, pMenu, rect);
    s->m_bConnectMenuToParent = bConnectMenuToParent;
  }
  else {
    CBCGPVisualManager::OnDrawMenuBorder(hDC, pMenu, rect);
  }
}
void CBCGPWinXPVisualManager::OnDrawComboDropButton(HDDC hDC, RECT rect,
    BOOL bDisabled,
    BOOL bIsDropped,
    BOOL bIsHighlighted,
    CBCGPToolbarComboBoxButton* pButton)
{
  if (s->m_hThemeComboBox == NULL) {
    CBCGPVisualManagerXP::OnDrawComboDropButton(hDC, rect, bDisabled, bIsDropped, bIsHighlighted, pButton);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawComboBorder(HDDC hDC, RECT rect,
    BOOL bDisabled,
    BOOL bIsDropped,
    BOOL bIsHighlighted,
    CBCGPToolbarComboBoxButton* pButton)
{
  if (s->m_hThemeWindow == NULL) {
    CBCGPVisualManagerXP::OnDrawComboBorder(hDC, rect, bDisabled, bIsDropped, bIsHighlighted, pButton);
    return;
  }

  if (bIsHighlighted || bIsDropped) {
    DeflateRect(&rect, 1, 1);

    if (bIsDrawOnGlass) {

      DrawRect(hDC, rect, 0, globalData.clrHilite);
    }
    else {
      draw_3drect_inR(hDC, &rect,  globalData.clrHilite, globalData.clrHilite);
    }
  }
}
void CBCGPWinXPVisualManager::OnEraseTabsButton(HDDC hDC, RECT rect,
    CBCGPButton* pButton,
    CBCGPBaseTabWnd* pWndTab)
{
  if (!s->m_b3DTabsXPTheme || s->m_hThemeTab == NULL || pWndTab->IsFlatTab() ||
      pWndTab->IsOneNoteStyle() || pWndTab->IsVS2005Style()) {
    CBCGPVisualManagerXP::OnEraseTabsButton(hDC, rect, pButton, pWndTab);
    return;
  }

  CRgn rgn;
  rgn.CreateRectRgnIndirect(rect);
  hDC->SelectClipRgn(&rgn);
  RECT rectTabs;
  pWndTab->GetClientRect(&rectTabs);
  RECT rectTabArea;
  pWndTab->GetTabsRect(rectTabArea);

  if (pWndTab->GetLocation() == LOCATION_BOTTOM) {
    rectTabs.top = rectTabArea.top;
    rectTabs.bottom += 2;
  }
  else {
    rectTabs.bottom = rectTabArea.bottom;
  }

  pWndTab->MapWindowPoints(pButton, rectTabs);
  OnEraseTabsArea(hDC, rectTabs, pWndTab);
  hDC->SelectClipRgn(NULL);
}
void CBCGPWinXPVisualManager::OnDrawTabsButtonBorder(HDDC hDC, RECT& rect,
    CBCGPButton* pButton, UINT uiState,
    CBCGPBaseTabWnd* pWndTab)
{
  if (s->m_hThemeToolBar == NULL) {
    CBCGPVisualManagerXP::OnDrawTabsButtonBorder(hDC, rect, pButton, uiState, pWndTab);
    return;
  }
}
COLORREF CBCGPWinXPVisualManager::OnFillMiniFrameCaption(
    HDDC hDC, RECT rectCaption,
    BOOL bActive)
{
  if (s->m_hThemeWindow == NULL) {
    return CBCGPVisualManager::OnFillMiniFrameCaption(hDC, rectCaption, pFrameWnd, bActive);
  }

  return globalData.clrCaptionText;
}
void CBCGPWinXPVisualManager::OnDrawMiniFrameBorder(
    HDDC hDC,
    RECT rectBorder, RECT rectBorderSize)
{
  if (s->m_hThemeWindow == NULL) {
    CBCGPVisualManager::OnDrawMiniFrameBorder(hDC, pFrameWnd, rectBorder, rectBorderSize);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawFloatingToolbarBorder(
    HDDC hDC, CBCGPBaseToolBar* pToolBar,
    RECT rectBorder, RECT rectBorderSize)
{
  if (s->m_hThemeWindow == NULL) {
    CBCGPVisualManager::OnDrawFloatingToolbarBorder(hDC, pToolBar,
        rectBorder, rectBorderSize);
    return;
  }
}
void CBCGPWinXPVisualManager::OnFillOutlookPageButton(HDDC hDC, RECT  rectClient,
    BOOL bIsHighlighted, BOOL bIsPressed,
    COLORREF clrText)
{
  if (s->m_hThemeButton == NULL) {
    CBCGPVisualManagerXP::OnFillOutlookPageButton(hDC, rectClient, bIsHighlighted, bIsPressed, clrText);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawOutlookPageButtonBorder(HDDC hDC,
    RECT& rectBtn, BOOL bIsHighlighted, BOOL bIsPressed)
{
  if (s->m_hThemeButton == NULL) {
    CBCGPVisualManagerXP::OnDrawOutlookPageButtonBorder(hDC, rectBtn, bIsHighlighted, bIsPressed);
  }
}
void CBCGPWinXPVisualManager::OnDrawStatusBarProgress(HDDC hDC, CBCGPStatusBar* pStatusBar,
    RECT rectProgress, int nProgressTotal, int nProgressCurr,
    COLORREF clrBtn, COLORREF clrProgressBarDest, COLORREF clrProgressText,
    BOOL bProgressText)
{
  if (!DrawStatusBarProgress(hDC, pStatusBar,
      rectProgress, nProgressTotal, nProgressCurr,
      clrBtn, clrProgressBarDest, clrProgressText, bProgressText)) {
    CBCGPVisualManagerXP::OnDrawStatusBarProgress(hDC, pStatusBar,
        rectProgress, nProgressTotal, nProgressCurr,
        clrBtn, clrProgressBarDest, clrProgressText, bProgressText);
  }
}
SIZE CBCGPWinXPVisualManager::GetButtonExtraBorder()
{
  if (s->m_hThemeWindow == NULL) {
    return CBCGPVisualManagerXP::GetButtonExtraBorder();
  }

  return SIZE(2, 2);
}
SIZE CBCGPWinXPVisualManager::GetCaptionButtonExtraBorder()
{
  if (s->m_hThemeWindow == NULL) {
    return CBCGPVisualManagerXP::GetCaptionButtonExtraBorder();
  }

  return SIZE(1, 1);
}
void CBCGPWinXPVisualManager::OnDrawHeaderCtrlBorder(HDDC hDC,
    RECT& rect, BOOL bIsPressed, BOOL bIsHighlighted)
{
  if (s->m_hThemeHeader == NULL) {
    CBCGPVisualManagerXP::OnDrawHeaderCtrlBorder(pCtrl, hDC, rect, bIsPressed, bIsHighlighted);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawHeaderCtrlSortArrow(
    HDDC hDC,
    RECT& rect, BOOL bIsUp)
{
  if (s->m_hThemeHeader == NULL) {
    CBCGPVisualManagerXP::OnDrawHeaderCtrlSortArrow(pCtrl, hDC, rect, bIsUp);
    return;
  }

  /* TODO
    int nState = bIsUp ? HSAS_SORTEDUP : HSAS_SORTEDDOWN;
    (*s->m_pfDrawThemeBackground) (s->m_hThemeHeader, hDC,
                  HP_HEADERSORTARROW, nState, &rect, 0);
  */
#define POINTS_NUM  3
  POINT pts[POINTS_NUM];

  if (bIsUp) {
    pts[0].x = rect.left;
    pts[0].y = rect.bottom;
    pts[1].x = rect CenterPoint(&).x;
    pts[1].y = rect.top;
    pts[2].x = rect.right;
    pts[2].y = rect.bottom;
  }
  else {
    pts[0].x = rect.left;
    pts[0].y = rect.top;
    pts[1].x = rect CenterPoint(&).x;
    pts[1].y = rect.bottom;
    pts[2].x = rect.right;
    pts[2].y = rect.top;
  }

  COLORREF br = (globalData.clrBtnShadow);
  COLORREF  pOldBrush = _clr = (br);
  COLORREF  pOldPen = (COLORREF) hDC->SelectStockObject(NULL_PEN);
  hDC->Polygon(pts, POINTS_NUM);
}
void CBCGPWinXPVisualManager::OnDrawEditBorder(HDDC hDC, RECT rect,
    BOOL bDisabled,
    BOOL bIsHighlighted,
    CBCGPToolbarEditBoxButton* pButton)
{
  if (s->m_hThemeComboBox == NULL) {
    CBCGPVisualManagerXP::OnDrawEditBorder(hDC, rect, bDisabled, bIsHighlighted, pButton);
    return;
  }

  if (!pButton->IsFlatMode()) {
    COLORREF clrBorder = 0;

    if ((*s->m_pfGetThemeColor)(s->m_hThemeComboBox, 5, 0, TMT_BORDERCOLOR, &clrBorder) != S_OK) {
      CBCGPVisualManagerXP::OnDrawEditBorder(hDC, rect, bDisabled, bIsHighlighted, pButton);
      return;
    }

    if (bIsDrawOnGlass) {

      DrawRect(hDC, rect, 0, clrBorder);
    }
    else {
      draw_3drect_inR(hDC, &rect,  clrBorder, clrBorder);
    }

    return;
  }

  if (bIsHighlighted) {
    if (bIsDrawOnGlass) {

      DrawRect(hDC, rect, 0, globalData.clrBtnHilite);
    }
    else {
      draw_3drect_inR(hDC, &rect,  globalData.clrBtnHilite, globalData.clrBtnHilite);
    }
  }
}
void CBCGPWinXPVisualManager::OnFillTasksPaneBackground(HDDC hDC, RECT rectWorkArea)
{
  ASSERT(hDC);

  if (s->m_hThemeExplorerBar == NULL) {
    CBCGPVisualManagerXP::OnFillTasksPaneBackground(hDC, rectWorkArea);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawTasksGroupCaption(HDDC hDC,
    BOOL bIsHighlighted, BOOL bIsSelected, BOOL bCanCollapse)
{
  ASSERT(hDC);
  ASSERT(pGroup != NULL);
  ASSERT(pPage);
  BOOL bIsToolBox = FALSE;

  if (s->m_hThemeExplorerBar == NULL || bIsToolBox) {
    CBCGPVisualManagerXP::OnDrawTasksGroupCaption(hDC, pGroup, bIsHighlighted, bIsSelected, bCanCollapse);
    return;
  }
}
void CBCGPWinXPVisualManager::OnFillTasksGroupInterior(HDDC hDC, RECT rect, BOOL bSpecial)
{
  ASSERT(hDC);

  if (s->m_hThemeExplorerBar == NULL) {
    CBCGPVisualManagerXP::OnFillTasksGroupInterior(hDC, rect);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawTasksGroupAreaBorder(HDDC hDC, RECT rect, BOOL bSpecial,
    BOOL bNoTitle)
{
  if (s->m_hThemeExplorerBar == NULL) {
    CBCGPVisualManagerXP::OnDrawTasksGroupAreaBorder(hDC, rect, bSpecial, bNoTitle);
    return;
  }

  return;
}
void CBCGPWinXPVisualManager::OnDrawTask(HDDC hDC, CBCGPTask* pTask, CImageList* pIcons,
    BOOL bIsHighlighted, BOOL bIsSelected)
{
  ASSERT(hDC);
  ASSERT(pIcons);
  ASSERT(pTask != NULL);

  if (s->m_hThemeExplorerBar == NULL) {
    CBCGPVisualManagerXP::OnDrawTask(hDC, pTask, pIcons, bIsHighlighted, bIsSelected);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawScrollButtons(HDDC hDC, RECT  rect, const int nBorderSize,
    int iImage, BOOL bHilited)
{
  ASSERT(hDC);
  RECT rectImage(cPOINT(0, 0), CBCGPMenuImages::Size());
  RECT rectFill = rect;
  rectFill.top -= nBorderSize;
  draw_fillrectR(hDC, &rectFill, globalData.clrBtnFace);

  if (bHilited) {

    HighlightRect(hDC, rect);
    draw_3drect_inR(hDC, &rect,
        globalData.clrBtnHilite,
        globalData.clrBtnDkShadow);
  }

  DrawMenuImages(hDC, iImage, rect);
}
void CBCGPWinXPVisualManager::OnDrawExpandingBox(HDDC hDC, RECT rect, BOOL bIsOpened, COLORREF colorBox)
{
  ASSERT(hDC);

  if (s->m_hThemeTree == NULL) {
    CBCGPVisualManagerXP::OnDrawExpandingBox(hDC, rect, bIsOpened, colorBox);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawCheckBoxEx(HDDC hDC, RECT rect,
    int nState,
    BOOL bHighlighted,
    BOOL bPressed,
    BOOL bEnabled)
{
  if (!DrawCheckBox(hDC, rect, bHighlighted, nState, bEnabled, bPressed)) {
    CBCGPVisualManagerXP::OnDrawCheckBoxEx(hDC, rect, nState, bHighlighted, bPressed, bEnabled);
  }
}
void CBCGPWinXPVisualManager::OnDrawRadioButton(HDDC hDC, RECT rect,
    BOOL bOn,
    BOOL bHighlighted,
    BOOL bPressed,
    BOOL bEnabled)
{
  if (!DrawRadioButton(hDC, rect, bHighlighted, bOn, bEnabled, bPressed)) {
    CBCGPVisualManagerXP::OnDrawRadioButton(hDC, rect, bOn, bHighlighted, bPressed, bEnabled);
  }
}
void CBCGPWinXPVisualManager::OnDrawControlBorder(HDDC hDC, RECT rect, BOOL bDrawOnGlass)
{
  if (s->m_hThemeComboBox == NULL) {
    CBCGPVisualManagerXP::OnDrawControlBorder(hDC, rect, pWndCtrl, bDrawOnGlass);
    return;
  }

  ASSERT(hDC);
  COLORREF clrBorder = 0;

  if ((*s->m_pfGetThemeColor)(s->m_hThemeComboBox, 5, 0, TMT_BORDERCOLOR, &clrBorder) != S_OK) {
    CBCGPVisualManagerXP::OnDrawControlBorder(hDC, rect, pWndCtrl, bDrawOnGlass);
    return;
  }

  if (bDrawOnGlass) {

    DrawRect(hDC, rect, 0, clrBorder);
    DeflateRect(&rect, 1, 1);
    DrawRect(hDC, rect, 0, globalData.clrWindow);
  }
  else {
    draw_3drect_inR(hDC, &rect, clrBorder, clrBorder);
    DeflateRect(&rect, 1, 1);
    draw_3drect_inR(hDC, &rect, globalData.clrWindow, globalData.clrWindow);
  }
}
BOOL CBCGPWinXPVisualManager::OnDrawCalculatorButton(HDDC hDC,
    RECT rect, CBCGPToolbarButton* pButton,
    CBCGPVisualManager::int state,
    int cmd /* CBCGPCalculator::CalculatorCommands */,
    CBCGPCalculator* pCalculator)
{
  if (s->m_hThemeButton == NULL) {
    return CBCGPVisualManagerXP::OnDrawCalculatorButton(hDC, rect, pButton, state, cmd, pCalculator);
  }
}
BOOL CBCGPWinXPVisualManager::OnDrawBrowseButton(HDDC hDC, RECT rect,
    CBCGPEdit* pEdit,
    CBCGPVisualManager::int state,
    COLORREF clrText)
{
  if (s->m_hThemeButton == NULL) {
    return CBCGPVisualManagerXP::OnDrawBrowseButton(hDC, rect,
        pEdit, state, clrText);
  }
}
void CBCGPWinXPVisualManager::OnDrawSpinButtons(HDDC hDC, RECT rect,
    int nState, BOOL bOrientation, CBCGPSpinButtonCtrl* pSpinCtrl)
{
  if (s->m_hThemeSpin == NULL || pSpinCtrl->IsRibbonControl()) {
    CBCGPVisualManagerXP::OnDrawSpinButtons(hDC, rect,
        nState, bOrientation, pSpinCtrl);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawTab(HDDC hDC, RECT rectTab,
    int iTab, BOOL bIsActive, const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(pTabWnd);
  ASSERT(hDC);

  if (!s->m_b3DTabsXPTheme || s->m_hThemeTab == NULL || pTabWnd->IsFlatTab() ||
      IsOneNoteStyle || IsVS2005Style ||
      pTabWnd->IsLeftRightRounded()) {
    CBCGPVisualManagerXP::OnDrawTab(hDC, rectTab, iTab, bIsActive, pTabWnd);
    return;
  }
}
void CBCGPWinXPVisualManager::OnDrawTabCloseButton(HDDC hDC, RECT rect,
    const CBCGPBaseTabWnd* pTabWnd,
    BOOL bIsHighlighted,
    BOOL bIsPressed,
    BOOL bIsDisabled)
{
  if (s->m_hThemeWindow == NULL) {
    CBCGPVisualManagerXP::OnDrawTabCloseButton(hDC, rect, pTabWnd,
        bIsHighlighted, bIsPressed, bIsDisabled);
    return;
  }
}
void CBCGPWinXPVisualManager::OnEraseTabsArea(HDDC hDC, RECT rect,
    const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(hDC);
  ASSERT(pTabWnd);

  if (!s->m_b3DTabsXPTheme || s->m_hThemeTab == NULL || pTabWnd->IsFlatTab() ||
      IsOneNoteStyle || IsVS2005Style ||
      pTabWnd->IsDialogControl()) {
    CBCGPVisualManagerXP::OnEraseTabsArea(hDC, rect, pTabWnd);
    return;
  }
}
BOOL CBCGPWinXPVisualManager::OnEraseTabsFrame(HDDC hDC, RECT rect, const CBCGPBaseTabWnd* pTabWnd)
{
  ASSERT(hDC);
  ASSERT(pTabWnd);

  if (!s->m_b3DTabsXPTheme || s->m_hThemeTab == NULL || pTabWnd->IsFlatTab() ||
      IsOneNoteStyle || IsVS2005Style) {
    return CBCGPVisualManagerXP::OnEraseTabsFrame(hDC, rect, pTabWnd);
  }

  return FALSE;
}
void CBCGPWinXPVisualManager::OnErasePopupWindowButton(HDDC hDC, RECT rect)
{
  ASSERT(hDC);


  if (s->m_hThemeButton == NULL || IsCaptionButton) {
    CBCGPVisualManagerXP::OnErasePopupWindowButton(hDC, rect, pButton);
    return;
  }

  RECT rectParent;
  pButton->GetParent()->GetClientRect(rectParent);
  pButton->GetParent()->MapWindowPoints(pButton, rectParent);
  OnFillPopupWindowBackground(hDC, rectParent);
}
void CBCGPWinXPVisualManager::OnDrawPopupWindowButtonBorder(HDDC hDC, RECT rect)
{

  int nState = PBS_NORMAL;

  if (!pButton->IsWindowEnabled()) {
    nState = PBS_DISABLED;
  }
  else if (IsPressed || IsCheck) {
    nState = PBS_PRESSED;
  }
  else if (IsHighlighted) {
    nState = PBS_HOT;
  }
  else {
    nState = PBS_NORMAL;
  }

  if (s->m_hThemeButton == NULL) {
    CBCGPVisualManagerXP::OnDrawPopupWindowButtonBorder(hDC, rect, pButton);
    return;
  }
}
BOOL CBCGPWinXPVisualManager::IsDefaultWinXPPopupButton(CBCGPPopupWndButton* pButton)
{

  return s->m_hThemeWindow != NULL && pButton->IsCloseButton() && IsCaptionButton;
}
void CBCGPWinXPVisualManager::OnFillGridHeaderBackground(HDDC hDC, RECT rect)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      s->m_hThemeHeader == NULL) {
    CBCGPVisualManagerXP::OnFillGridHeaderBackground(pCtrl, hDC, rect);
    return;
  }

  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
}
BOOL CBCGPWinXPVisualManager::OnDrawGridHeaderItemBorder(HDDC hDC, RECT rect, BOOL bPressed)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      s->m_hThemeHeader == NULL) {
    return CBCGPVisualManagerXP::OnDrawGridHeaderItemBorder(pCtrl, hDC, rect, bPressed);
  }

  return TRUE;
}
void CBCGPWinXPVisualManager::OnFillGridRowHeaderBackground(HDDC hDC, RECT rect)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      s->m_hThemeHeader == NULL) {
    CBCGPVisualManagerXP::OnFillGridRowHeaderBackground(pCtrl, hDC, rect);
    return;
  }

  ASSERT(hDC);
  draw_fillrectR(hDC, &rect, globalData.clrBtnFace);
}
BOOL CBCGPWinXPVisualManager::OnDrawGridRowHeaderItemBorder(HDDC hDC, RECT rect, BOOL bPressed)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      s->m_hThemeHeader == NULL) {
    return CBCGPVisualManagerXP::OnDrawGridRowHeaderItemBorder(pCtrl, hDC, rect, bPressed);
  }

  return TRUE;
}
void CBCGPWinXPVisualManager::OnFillGridSelectAllAreaBackground(HDDC hDC, RECT rect)
{
  OnFillGridHeaderBackground(pCtrl, hDC, rect);
}
BOOL CBCGPWinXPVisualManager::OnDrawGridSelectAllAreaBorder(HDDC hDC, RECT rect, BOOL bPressed)
{
  return OnDrawGridHeaderItemBorder(pCtrl, hDC, rect, bPressed);
}
void CBCGPWinXPVisualManager::OnDrawGridHeaderMenuButton(HDDC hDC, RECT rect,
    BOOL bHighlighted, BOOL bPressed, BOOL bDisabled)
{
  ASSERT(hDC);

  if (s->m_hThemeToolBar == NULL) {
    CBCGPVisualManagerXP::OnDrawGridHeaderMenuButton(pCtrl, hDC, rect, bHighlighted, bPressed, bDisabled);
    return;
  }
}
void CBCGPWinXPVisualManager::DrawGanttHeaderCell(const CBCGPGanttChart* pChart, HDDC hDC, const BCGP_GANTT_CHART_HEADER_CELL_INFO& cellInfo, BOOL bHilite)
{
  if (s->m_hThemeHeader == NULL) {
    CBCGPVisualManagerXP::DrawGanttHeaderCell(pChart, hDC, cellInfo, bHilite);
    return;
  }
}
void CBCGPWinXPVisualManager::FillGanttBar(const CBCGPGanttItem* pItem, HDDC hDC, RECT  rectFill, COLORREF color, double dGlowLine)
{
  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode()) {
    CBCGPVisualManager::FillGanttBar(pItem, hDC, rectFill, color, dGlowLine);
    return;
  }

  dGlowLine = MIN(1.0, dGlowLine);
  dGlowLine = MAX(0.0, dGlowLine);
  RECT rectPart = rectFill;
  int h = rectFill RCH(&);
  rectPart.bottom = (LONG)(rectFill.top + dGlowLine * h);
  CBCGPDrawManager dm(hDC);
  FillGradient(hDC, rectPart, MixColors(color, _RGB(255, 255, 255), 0.3f), MixColors(color, _RGB(255, 255, 255), 0.15f), TRUE);
  rectPart.top = rectPart.bottom;
  rectPart.bottom = rectFill.bottom;
  FillGradient(hDC, rectPart, MixColors(color, _RGB(0, 0, 0), 0.2f), color, TRUE);
}
void CBCGPWinXPVisualManager::GetCalendarColors(const CBCGPCalendar* pCalendar,
    CBCGPCalendarColors& colors)
{
  CBCGPVisualManagerXP::GetCalendarColors(pCalendar, colors);

  if (globalData.m_nBitsPerPixel <= 8 || globalData.IsHighContastMode() ||
      s->m_clrCalendarCaption == 0 ||
      s->m_clrCalendarCaptionText == 0) {
    return;
  }

  colors->clrCaption = s->m_clrCalendarCaption;
  colors->clrCaptionText = s->m_clrCalendarCaptionText;
}
COLORREF CBCGPWinXPVisualManager::OnDrawControlBarCaption(HDDC hDC, CBCGPDockingControlBar* pBar,
    BOOL bActive, RECT rectCaption, RECT rectButtons)
{
  if (s->m_hThemeExplorerBar == NULL || s->m_pfGetThemeColor == NULL) {
    return CBCGPVisualManagerXP::OnDrawControlBarCaption(hDC, pBar,
        bActive, rectCaption, rectButtons);
  }
}
BOOL CBCGPWinXPVisualManager::OnEraseToolBoxButton(HDDC hDC, RECT rect,
    CBCGPToolBoxButton* pButton)
{
  ASSERT(hDC);


  if (s->m_hThemeToolBar == NULL) {
    return CBCGPVisualManagerXP::OnEraseToolBoxButton(hDC, rect, pButton);
  }
}
BOOL CBCGPWinXPVisualManager::OnDrawToolBoxButtonBorder(HDDC hDC, RECT& rect,
    CBCGPToolBoxButton* pButton, UINT uiState)
{
  ASSERT(hDC);


  if (s->m_hThemeToolBar == NULL) {
    return CBCGPVisualManagerXP::OnDrawToolBoxButtonBorder(hDC, rect, pButton, uiState);
  }

  return TRUE;
}
BOOL CBCGPWinXPVisualManager::OnDrawPushButton(HDDC hDC, RECT rect, CBCGPButton* pButton, COLORREF clrText)
{
  clrText = globalData.clrBtnText;
  return DrawPushButton(hDC, rect, pButton, 0);
}
void CBCGPWinXPVisualManager::OnDrawRibbonProgressBar(HDDC hDC,
    CBCGPRibbonProgressBar* pProgress,
    RECT rectProgress, RECT rectChunk,
    BOOL bInfiniteMode)
{
  ASSERT(hDC);
#define PP_BAR        1
#define PP_CHUNK      3
  CBCGPVisualManagerXP::OnDrawRibbonProgressBar(hDC, pProgress,
      rectProgress, rectChunk, bInfiniteMode);
}
